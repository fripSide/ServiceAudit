IPC Flooding(30)
	<android.nfc.INfcAdapter: void setAppCallback(android.nfc.IAppCallback)>
	<android.hardware.location.IGeofenceHardware: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)>
	<android.media.session.ISessionController: void unregisterCallbackListener(android.media.session.ISessionControllerCallback)>
	<android.media.projection.IMediaProjectionManager: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)>
	<android.bluetooth.IBluetoothManager: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
	<android.media.midi.IMidiManager: void registerListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>
	<android.app.trust.ITrustManager: void unregisterTrustListener(android.app.trust.ITrustListener)>
	<android.net.IEthernetManager: void addListener(android.net.IEthernetServiceListener)>
	<android.os.storage.IMountService: void unregisterListener(android.os.storage.IMountServiceListener)>
	<android.media.session.ISessionController: void registerCallbackListener(android.media.session.ISessionControllerCallback)>
	<android.location.ICountryDetector: void addCountryListener(android.location.ICountryListener)>
	<android.content.IClipboard: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String)>
	<android.hardware.hdmi.IHdmiControlService: void addHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)>
	<android.hardware.location.IGeofenceHardware: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)>
	<android.content.pm.ILauncherApps: void addOnAppsChangedListener(android.content.pm.IOnAppsChangedListener)>
	<android.media.midi.IMidiManager: void unregisterListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>
	<android.print.IPrintManager: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)>
	<android.media.tv.ITvInputManager: void registerCallback(android.media.tv.ITvInputManagerCallback,int)>
	<android.os.INetworkManagementService: void registerNetworkActivityListener(android.os.INetworkActivityListener)>
	<android.os.storage.IMountService: void registerListener(android.os.storage.IMountServiceListener)>
	<android.bluetooth.IBluetoothManager: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
	<android.hardware.input.IInputManager: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>
	<android.content.pm.IPackageInstaller: void registerCallback(android.content.pm.IPackageInstallerCallback,int)>
	<android.app.trust.ITrustManager: void registerTrustListener(android.app.trust.ITrustListener)>
	<android.net.INetworkPolicyManager: void registerListener(android.net.INetworkPolicyListener)>
	<android.hardware.display.IDisplayManager: void registerCallback(android.hardware.display.IDisplayManagerCallback)>
	<android.content.pm.IPackageInstaller: void unregisterCallback(android.content.pm.IPackageInstallerCallback)>
	<android.location.ILocationManager: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)>
	<android.media.session.ISessionManager: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>
	<android.net.INetworkPolicyManager: void unregisterListener(android.net.INetworkPolicyListener)>
Illegal Parameter(23)
	<android.location.ILocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
	<android.bluetooth.IBluetoothHeadset: boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)>
	<android.os.INetworkManagementService: void unregisterNetworkActivityListener(android.os.INetworkActivityListener)>
	<android.media.IAudioService: int setFocusPropertiesForPolicy(int,android.media.audiopolicy.IAudioPolicyCallback)>
	<android.net.wifi.IWifiManager: void disableEphemeralNetwork(java.lang.String)>
	<android.bluetooth.IBluetoothHealth: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)>
	<android.bluetooth.IBluetooth: boolean createBond(android.bluetooth.BluetoothDevice,int)>
	<android.location.ILocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
	<android.location.ILocationManager: boolean isProviderEnabled(java.lang.String)>
	<android.media.IAudioService: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback)>
	<android.hardware.camera2.ICameraDeviceUser: int submitRequestList(java.util.List,boolean,android.hardware.camera2.utils.LongParcelable)>
	<android.media.session.ISession: void setPlaybackToLocal(android.media.AudioAttributes)>
	<android.media.tv.ITvInputManager: void selectTrack(android.os.IBinder,int,java.lang.String,int)>
	<android.media.midi.IMidiDeviceServer: void connectPorts(android.os.IBinder,android.os.ParcelFileDescriptor,int)>
	<android.hardware.camera2.ICameraDeviceUser: int tearDown(int)>
	<android.service.media.IMediaBrowserService: void addSubscription(java.lang.String,android.service.media.IMediaBrowserServiceCallbacks)>
	<android.bluetooth.IBluetoothGatt: void connectionParameterUpdate(int,java.lang.String,int)>
	<android.view.accessibility.IAccessibilityManager: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo)>
	<android.location.ILocationManager: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)>
	<android.media.session.ISessionController: boolean sendMediaButton(android.view.KeyEvent)>
	<android.hardware.camera2.ICameraDeviceUser: int prepare(int)>
	<android.app.INotificationManager: void setNotificationPolicy(java.lang.String,android.app.NotificationManager$Policy)>
	<android.location.ILocationManager: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>
Fake Identify(59)
	<android.app.INotificationManager: void cancelNotificationWithTag(java.lang.String,java.lang.String,int,int)>
	<android.content.pm.IPackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>
	<android.app.INotificationManager: android.app.NotificationManager$Policy getNotificationPolicy(java.lang.String)>
	<android.media.IAudioService: boolean isValidRingerMode(int)>
	<com.android.internal.app.IAppOpsService: int noteProxyOperation(int,java.lang.String,int,java.lang.String)>
	<android.hardware.fingerprint.IFingerprintService: boolean isHardwareDetected(long,java.lang.String)>
	<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.content.res.Configuration,android.view.Surface)>
	<android.content.pm.IPackageManager: boolean hasSystemFeature(java.lang.String)>
	<android.media.IAudioService: void setStreamVolume(int,int,int,java.lang.String)>
	<android.app.INotificationManager: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int[],int)>
	<android.net.wifi.IWifiManager: java.util.List getBatchedScanResults(java.lang.String)>
	<android.view.IWindowSession: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.InputChannel)>
	<android.media.IAudioService: int getStreamVolume(int)>
	<android.media.IAudioService: void setRingerModeExternal(int,java.lang.String)>
	<android.nfc.INfcCardEmulation: boolean setDefaultServiceForCategory(int,android.content.ComponentName,java.lang.String)>
	<android.app.admin.IDevicePolicyManager: int getCurrentFailedPasswordAttempts(int)>
	<android.app.usage.IUsageStatsManager: boolean isAppInactive(java.lang.String,int)>
	<android.app.INotificationManager: void cancelToast(java.lang.String,android.app.ITransientNotification)>
	<android.hardware.display.IDisplayManager: int createVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int)>
	<android.hardware.fingerprint.IFingerprintService: long getAuthenticatorId(java.lang.String)>
	<android.content.IClipboard: void setPrimaryClip(android.content.ClipData,java.lang.String)>
	<android.nfc.INfcCardEmulation: boolean setDefaultForNextTap(int,android.content.ComponentName)>
	<android.media.session.ISessionController: void setVolumeTo(int,int,java.lang.String)>
	<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>
	<android.content.pm.IPackageManager: boolean performDexOptIfNeeded(java.lang.String,java.lang.String)>
	<android.nfc.INfcCardEmulation: boolean registerAidGroupForService(int,android.content.ComponentName,android.nfc.cardemulation.AidGroup)>
	<android.app.INotificationManager: void enqueueToast(java.lang.String,android.app.ITransientNotification,int)>
	<android.nfc.INfcCardEmulation: boolean isDefaultServiceForAid(int,android.content.ComponentName,java.lang.String)>
	<android.nfc.INfcCardEmulation: java.util.List getServices(int,java.lang.String)>
	<android.nfc.INfcAdapter: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface(java.lang.String)>
	<android.app.INotificationManager: android.content.pm.ParceledListSlice getAppActiveNotifications(java.lang.String,int)>
	<android.hardware.fingerprint.IFingerprintService: void cancelAuthentication(android.os.IBinder,java.lang.String)>
	<android.media.IMediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>
	<android.app.IWallpaperManager: boolean isWallpaperSupported(java.lang.String)>
	<android.media.IAudioService: void setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String,java.lang.String)>
	<android.app.admin.IDevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName,int)>
	<android.security.IKeystoreService: int isEmpty(int)>
	<android.media.IAudioService: int getStreamMaxVolume(int)>
	<android.content.pm.IPackageManager: java.lang.String[] getPackagesForUid(int)>
	<android.media.session.ISessionController: void adjustVolume(int,int,java.lang.String)>
	<android.hardware.fingerprint.IFingerprintService: boolean hasEnrolledFingerprints(int,java.lang.String)>
	<android.security.IKeystoreService: int lock(int)>
	<android.print.IPrintManager: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>
	<android.media.IAudioService: void adjustStreamVolume(int,int,int,java.lang.String)>
	<android.nfc.INfcCardEmulation: boolean removeAidGroupForService(int,android.content.ComponentName,java.lang.String)>
	<android.app.INotificationManager: void setInterruptionFilter(java.lang.String,int)>
	<android.content.IRestrictionsManager: android.os.Bundle getApplicationRestrictions(java.lang.String)>
	<com.android.internal.app.IVoiceInteractor: boolean[] supportsCommands(java.lang.String,java.lang.String[])>
	<android.nfc.INfcCardEmulation: boolean isDefaultServiceForCategory(int,android.content.ComponentName,java.lang.String)>
	<android.app.admin.IDevicePolicyManager: android.content.ComponentName getProfileOwner(int)>
	<android.app.INotificationManager: void cancelAllNotifications(java.lang.String,int)>
	<android.hardware.fingerprint.IFingerprintService: java.util.List getEnrolledFingerprints(int,java.lang.String)>
	<android.view.accessibility.IAccessibilityManager: int addClient(android.view.accessibility.IAccessibilityManagerClient,int)>
	<android.nfc.INfcCardEmulation: android.nfc.cardemulation.AidGroup getAidGroupForService(int,android.content.ComponentName,java.lang.String)>
	<android.security.IKeystoreService: int getState(int)>
	<android.media.IMediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>
	<android.app.IAlarmManager: android.app.AlarmManager$AlarmClockInfo getNextAlarmClock(int)>
	<android.app.admin.IDevicePolicyManager: boolean getScreenCaptureDisabled(android.content.ComponentName,int)>
	<android.app.INotificationManager: boolean isNotificationPolicyAccessGranted(java.lang.String)>
Fake Status(19)
	<com.android.internal.app.IVoiceInteractionManagerService: void showSession(android.service.voice.IVoiceInteractionService,android.os.Bundle,int)>
	<android.hardware.camera2.ICameraDeviceUser: int endConfigure(boolean)>
	<android.media.tv.ITvInputManager: void createOverlayView(android.os.IBinder,android.os.IBinder,android.graphics.Rect,int)>
	<android.view.accessibility.IAccessibilityManager: boolean sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>
	<android.net.wifi.IRttManager: android.net.wifi.RttManager$RttCapabilities getRttCapabilities()>
	<android.nfc.INfcTag: android.nfc.Tag rediscover(int)>
	<android.hardware.camera2.ICameraDeviceUser: int waitUntilIdle()>
	<android.hardware.camera2.ICameraDeviceUser: int createInputStream(int,int,int)>
	<android.bluetooth.IBluetooth: java.lang.String getAddress()>
	<com.android.internal.app.IVoiceInteractionManagerService: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int)>
	<com.android.internal.app.IVoiceInteractionManagerService: boolean hideSessionFromSession(android.os.IBinder)>
	<android.view.IWindowId: void registerFocusObserver(android.view.IWindowFocusObserver)>
	<android.view.accessibility.IAccessibilityManager: void interrupt(int)>
	<android.service.trust.ITrustAgentServiceCallback: void grantTrust(java.lang.CharSequence,long,int)>
	<com.android.internal.app.IVoiceInteractionManagerService: void finish(android.os.IBinder)>
	<android.hardware.camera2.ICameraDeviceUser: int createStream(android.hardware.camera2.params.OutputConfiguration)>
	<android.nfc.INfcAdapter: void setForegroundDispatch(android.app.PendingIntent,android.content.IntentFilter[],android.nfc.TechListParcel)>
	<android.app.IUiAutomationConnection: void disconnect()>
	<android.view.IWindowId: void unregisterFocusObserver(android.view.IWindowFocusObserver)>
System Environment Evaluation(10)
	<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>
	<android.media.IMediaRouterService: void unregisterClient(android.media.IMediaRouterClient)>
	<android.service.wallpaper.IWallpaperConnection: void engineShown(android.service.wallpaper.IWallpaperEngine)>
	<android.media.IMediaRouterService: android.media.MediaRouterClientState getState(android.media.IMediaRouterClient)>
	<android.app.IWallpaperManager: android.os.ParcelFileDescriptor getWallpaper(android.app.IWallpaperManagerCallback,android.os.Bundle)>
	<android.hardware.display.IDisplayManager: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>
	<android.media.IAudioService: void setBluetoothA2dpOn(boolean)>
	<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>
	<android.media.IAudioService: android.media.AudioRoutesInfo startWatchingRoutes(android.media.IAudioRoutesObserver)>
	<com.android.internal.app.IAppOpsService: android.os.IBinder getToken(android.os.IBinder)>
