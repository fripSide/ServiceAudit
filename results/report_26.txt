Fake Identify(71)
	<android.app.slice.ISliceManager: void grantSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>
	<android.app.usage.IUsageStatsManager: android.app.usage.UsageEvents queryEventsForPackage(long,long,java.lang.String)>
	<android.content.pm.IShortcutService: android.content.pm.ParceledListSlice getManifestShortcuts(java.lang.String,int)>
	<android.media.IAudioService: boolean isValidRingerMode(int)>
	<com.android.internal.app.IAppOpsService: int noteProxyOperation(int,java.lang.String,int,java.lang.String)>
	<android.content.pm.IShortcutService: android.content.Intent createShortcutResultIntent(java.lang.String,android.content.pm.ShortcutInfo,int)>
	<android.app.usage.IUsageStatsManager: void unregisterAppUsageObserver(int,java.lang.String)>
	<android.content.pm.ILauncherApps: boolean isActivityEnabled(java.lang.String,android.content.ComponentName,android.os.UserHandle)>
	<android.content.pm.IShortcutService: int getMaxShortcutCountPerActivity(java.lang.String,int)>
	<android.media.session.ISessionManager: void dispatchVolumeKeyEvent(java.lang.String,boolean,android.view.KeyEvent,int,boolean)>
	<android.content.pm.IShortcutService: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>
	<android.content.pm.ILauncherApps: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,java.lang.String,int,android.os.UserHandle)>
	<android.app.slice.ISliceManager: void revokeSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>
	<android.content.pm.IShortcutService: boolean updateShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>
	<android.content.pm.IShortcutService: android.content.pm.ParceledListSlice getDynamicShortcuts(java.lang.String,int)>
	<android.media.IAudioService: int getStreamVolume(int)>
	<android.app.admin.IDevicePolicyManager: boolean generateKeyPair(android.content.ComponentName,java.lang.String,java.lang.String,android.security.keystore.ParcelableKeyGenParameterSpec,int,android.security.keymaster.KeymasterCertificateChain)>
	<android.content.pm.IShortcutService: void removeAllDynamicShortcuts(java.lang.String,int)>
	<android.os.storage.IStorageManager: void mkdirs(java.lang.String,java.lang.String)>
	<android.media.IAudioService: void setRingerModeExternal(int,java.lang.String)>
	<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>
	<android.app.IWallpaperManager: boolean isSetWallpaperAllowed(java.lang.String)>
	<android.net.INetworkStatsService: android.net.INetworkStatsSession openSessionForUsageStats(int,java.lang.String)>
	<android.app.usage.IUsageStatsManager: android.content.pm.ParceledListSlice getAppStandbyBuckets(java.lang.String,int)>
	<android.content.IClipboard: void setPrimaryClip(android.content.ClipData,java.lang.String)>
	<android.app.usage.IStorageStatsManager: long getTotalBytes(java.lang.String,java.lang.String)>
	<android.media.session.ISessionManager: void dispatchMediaKeyEvent(java.lang.String,boolean,android.view.KeyEvent,boolean)>
	<android.content.pm.IPackageManager: boolean canRequestPackageInstalls(java.lang.String,int)>
	<android.content.pm.ILauncherApps: boolean isPackageEnabled(java.lang.String,java.lang.String,android.os.UserHandle)>
	<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>
	<android.media.session.ISessionManager: boolean isTrusted(java.lang.String,int,int)>
	<android.content.pm.IShortcutService: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>
	<android.content.IClipboard: void clearPrimaryClip(java.lang.String)>
	<android.content.pm.IPackageManager: boolean isPackageSuspendedForUser(java.lang.String,int)>
	<android.content.pm.ILauncherApps: android.content.pm.ParceledListSlice getLauncherActivities(java.lang.String,java.lang.String,android.os.UserHandle)>
	<android.media.session.ISessionManager: void removeSessionTokensListener(android.media.ISessionTokensListener,java.lang.String)>
	<android.app.backup.IBackupManager: void dataChanged(java.lang.String)>
	<android.content.pm.IPackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,java.lang.String,int)>
	<android.media.IMediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>
	<android.content.pm.IShortcutService: boolean setDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>
	<android.app.IWallpaperManager: boolean isWallpaperSupported(java.lang.String)>
	<android.content.pm.IShortcutService: void reportShortcutUsed(java.lang.String,java.lang.String,int)>
	<android.view.autofill.IAutoFillManager: boolean isServiceEnabled(int,java.lang.String)>
	<android.media.IAudioService: void setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String,java.lang.String)>
	<android.content.pm.IShortcutService: void enableShortcuts(java.lang.String,java.util.List,int)>
	<android.app.admin.IDevicePolicyManager: boolean setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.lang.String,byte[],byte[],boolean)>
	<android.app.usage.IUsageStatsManager: int getAppStandbyBucket(java.lang.String,java.lang.String,int)>
	<android.content.pm.ILauncherApps: android.content.pm.ActivityInfo resolveActivity(java.lang.String,android.content.ComponentName,android.os.UserHandle)>
	<android.content.pm.ILauncherApps: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
	<android.media.IAudioService: int getStreamMaxVolume(int)>
	<android.content.pm.IPackageManager: java.lang.String[] getPackagesForUid(int)>
	<android.media.session.ISessionManager: void dispatchAdjustVolume(java.lang.String,int,int,int)>
	<android.media.session.ISessionManager: java.util.List getSessionTokens(boolean,boolean,java.lang.String)>
	<android.content.pm.IPackageManager: byte[] getInstantAppCookie(java.lang.String,int)>
	<android.content.pm.IShortcutService: boolean addDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>
	<android.content.pm.IShortcutService: android.content.pm.ParceledListSlice getPinnedShortcuts(java.lang.String,int)>
	<android.content.pm.IShortcutService: int getIconMaxDimensions(java.lang.String,int)>
	<android.app.slice.ISliceManager: android.net.Uri[] getPinnedSlices(java.lang.String)>
	<android.content.pm.ILauncherApps: void showAppDetailsAsUser(android.app.IApplicationThread,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
	<android.content.IRestrictionsManager: android.os.Bundle getApplicationRestrictions(java.lang.String)>
	<android.media.IAudioService: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>
	<android.content.pm.IShortcutService: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>
	<android.content.pm.ILauncherApps: android.content.pm.ParceledListSlice getShortcutConfigActivities(java.lang.String,java.lang.String,android.os.UserHandle)>
	<android.app.usage.IUsageStatsManager: void registerAppUsageObserver(int,java.lang.String[],long,android.app.PendingIntent,java.lang.String)>
	<android.os.IUserManager: android.content.pm.UserInfo getUserInfo(int)>
	<android.content.pm.IShortcutService: int getRemainingCallCount(java.lang.String,int)>
	<android.content.pm.IShortcutService: long getRateLimitResetTime(java.lang.String,int)>
	<android.media.IMediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>
	<android.hardware.display.IDisplayManager: int createVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int,java.lang.String)>
	<android.content.pm.IPackageManager: boolean setInstantAppCookie(java.lang.String,byte[],int)>
	<android.app.slice.ISliceManager: boolean hasSliceAccess(java.lang.String)>
IPC Flooding(36)
	<android.net.wifi.IWifiManager: void registerSoftApCallback(android.os.IBinder,android.net.wifi.ISoftApCallback,int)>
	<android.media.projection.IMediaProjectionManager: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)>
	<android.bluetooth.IBluetoothManager: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
	<android.hardware.location.IContextHubService: int registerCallback(android.hardware.location.IContextHubCallback)>
	<android.media.midi.IMidiManager: void registerListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>
	<android.net.IEthernetManager: void addListener(android.net.IEthernetServiceListener)>
	<android.content.pm.IPackageManager: void addOnPermissionsChangeListener(android.content.pm.IOnPermissionsChangeListener)>
	<android.media.session.ISessionManager: void setOnVolumeKeyLongPressListener(android.media.session.IOnVolumeKeyLongPressListener)>
	<android.print.IPrintManager: void addPrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>
	<android.location.ILocationManager: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String)>
	<android.hardware.input.IInputManager: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>
	<android.print.IPrintManager: void addPrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>
	<android.location.ICountryDetector: void addCountryListener(android.location.ICountryListener)>
	<android.content.IClipboard: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String)>
	<android.hardware.hdmi.IHdmiControlService: void addHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)>
	<android.os.storage.IStorageManager: void registerListener(android.os.storage.IStorageEventListener)>
	<android.content.pm.ILauncherApps: void addOnAppsChangedListener(java.lang.String,android.content.pm.IOnAppsChangedListener)>
	<android.print.IPrintManager: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)>
	<android.media.tv.ITvInputManager: void registerCallback(android.media.tv.ITvInputManagerCallback,int)>
	<android.hardware.fingerprint.IFingerprintService: void addLockoutResetCallback(android.hardware.fingerprint.IFingerprintServiceLockoutResetCallback)>
	<android.os.INetworkManagementService: void registerNetworkActivityListener(android.os.INetworkActivityListener)>
	<android.app.IWallpaperManager: void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int)>
	<android.app.IActivityManager: void registerTaskStackListener(android.app.ITaskStackListener)>
	<android.content.pm.IPackageManager: void registerMoveCallback(android.content.pm.IPackageMoveObserver)>
	<android.media.IAudioService: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)>
	<android.app.IWallpaperManager: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)>
	<android.media.session.ISessionManager: void setCallback(android.media.session.ICallback)>
	<android.media.session.ISessionManager: void addSessionTokensListener(android.media.ISessionTokensListener,int,java.lang.String)>
	<android.hardware.radio.IRadioService: android.hardware.radio.ICloseHandle addAnnouncementListener(int[],android.hardware.radio.IAnnouncementListener)>
	<android.media.IAudioService: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)>
	<android.hardware.input.IInputManager: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>
	<android.net.INetworkPolicyManager: void registerListener(android.net.INetworkPolicyListener)>
	<android.hardware.display.IDisplayManager: void registerCallback(android.hardware.display.IDisplayManagerCallback)>
	<android.media.session.ISessionManager: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>
	<android.media.session.ISessionManager: void setOnMediaKeyListener(android.media.session.IOnMediaKeyListener)>
	<android.net.sip.ISipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)>
Fake Status(4)
	<android.media.IAudioService: int setFocusPropertiesForPolicy(int,android.media.audiopolicy.IAudioPolicyCallback)>
	<android.view.accessibility.IAccessibilityManager: void interrupt(int)>
	<android.view.accessibility.IAccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>
	<android.service.dreams.IDreamManager: void finishSelf(android.os.IBinder,boolean)>
Illegal Parameter(8)
	<android.app.slice.ISliceManager: int checkSlicePermission(android.net.Uri,java.lang.String,int,int,java.lang.String[])>
	<android.view.accessibility.IAccessibilityManager: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int)>
	<android.media.tv.ITvInputManager: void selectTrack(android.os.IBinder,int,java.lang.String,int)>
	<android.net.wifi.IWifiManager: void disableEphemeralNetwork(java.lang.String,java.lang.String)>
	<android.hardware.fingerprint.IFingerprintService: void authenticate(android.os.IBinder,long,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String,android.os.Bundle,android.hardware.biometrics.IBiometricPromptReceiver)>
	<android.accounts.IAccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>
	<android.os.ISystemUpdateManager: void updateSystemUpdateInfo(android.os.PersistableBundle)>
	<android.location.ILocationManager: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>
System Environment Evaluation(7)
	<android.media.IMediaRouterService: void unregisterClient(android.media.IMediaRouterClient)>
	<android.media.IMediaRouterService: android.media.MediaRouterClientState getState(android.media.IMediaRouterClient)>
	<android.media.IMediaRouterService: boolean isPlaybackActive(android.media.IMediaRouterClient)>
	<android.hardware.display.IDisplayManager: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>
	<android.media.IAudioService: void setBluetoothA2dpOn(boolean)>
	<android.media.IAudioService: android.media.AudioRoutesInfo startWatchingRoutes(android.media.IAudioRoutesObserver)>
	<com.android.internal.app.IAppOpsService: android.os.IBinder getToken(android.os.IBinder)>
