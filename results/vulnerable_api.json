{"android.hardware.hdmi.HdmiControlManager": {"interfaceName" : "android.hardware.hdmi.IHdmiControlService", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.hdmi.HdmiControlService$BinderService: void addHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)>", "serviceApi" : "<android.hardware.hdmi.IHdmiControlService: void addHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)>", "vulType" : "IPC Flooding"}]}, "android.app.ApplicationPackageManager": {"interfaceName" : "android.content.pm.IPackageManager", "vulApiList" : [{"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.PackageManagerService: byte[] getInstantAppCookie(java.lang.String,int)>", "serviceApi" : "<android.content.pm.IPackageManager: byte[] getInstantAppCookie(java.lang.String,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.PackageManagerService: boolean isPackageSuspendedForUser(java.lang.String,int)>", "serviceApi" : "<android.content.pm.IPackageManager: boolean isPackageSuspendedForUser(java.lang.String,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.pm.PackageManagerService: void registerMoveCallback(android.content.pm.IPackageMoveObserver)>", "serviceApi" : "<android.content.pm.IPackageManager: void registerMoveCallback(android.content.pm.IPackageMoveObserver)>", "vulType" : "IPC Flooding"}, {"checkingBypass" : ["myUserId Identify Checking: myUserId"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>", "serviceApi" : "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.PackageManagerService: boolean canRequestPackageInstalls(java.lang.String,int)>", "serviceApi" : "<android.content.pm.IPackageManager: boolean canRequestPackageInstalls(java.lang.String,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.PackageManagerService: boolean setInstantAppCookie(java.lang.String,byte[],int)>", "serviceApi" : "<android.content.pm.IPackageManager: boolean setInstantAppCookie(java.lang.String,byte[],int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.PackageManagerService: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,java.lang.String,int)>", "serviceApi" : "<android.content.pm.IPackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,java.lang.String,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.pm.PackageManagerService: void addOnPermissionsChangeListener(android.content.pm.IOnPermissionsChangeListener)>", "serviceApi" : "<android.content.pm.IPackageManager: void addOnPermissionsChangeListener(android.content.pm.IOnPermissionsChangeListener)>", "vulType" : "IPC Flooding"}]}, "android.app.slice.SliceManager": {"interfaceName" : "android.app.slice.ISliceManager", "vulApiList" : [{"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.slice.SliceManagerService: void revokeSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>", "serviceApi" : "<android.app.slice.ISliceManager: void revokeSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>", "vulType" : "Fake Identify"}, {"checkingBypass" : [], "enforcement" : [], "exceptionList" : ["checkSlicePermission params[1] java.lang.String: l2 -> SecurityException"], "failedValidatorList" : ["IllegalParameterValidator"], "implApi" : "<com.android.server.slice.SliceManagerService: int checkSlicePermission(android.net.Uri,java.lang.String,int,int,java.lang.String[])>", "serviceApi" : "<android.app.slice.ISliceManager: int checkSlicePermission(android.net.Uri,java.lang.String,int,int,java.lang.String[])>", "vulType" : "Illegal Parameter"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.slice.SliceManagerService: void grantSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>", "serviceApi" : "<android.app.slice.ISliceManager: void grantSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.slice.SliceManagerService: android.net.Uri[] getPinnedSlices(java.lang.String)>", "serviceApi" : "<android.app.slice.ISliceManager: android.net.Uri[] getPinnedSlices(java.lang.String)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.slice.SliceManagerService: boolean hasSliceAccess(java.lang.String)>", "serviceApi" : "<android.app.slice.ISliceManager: boolean hasSliceAccess(java.lang.String)>", "vulType" : "Fake Identify"}]}, "android.app.AppOpsManager": {"interfaceName" : "com.android.internal.app.IAppOpsService", "vulApiList" : [{"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName", "getOpPackageName identity checking: getOpPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.AppOpsService: int noteProxyOperation(int,java.lang.String,int,java.lang.String)>", "serviceApi" : "<com.android.internal.app.IAppOpsService: int noteProxyOperation(int,java.lang.String,int,java.lang.String)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.AppOpsService: android.os.IBinder getToken(android.os.IBinder)>", "serviceApi" : "<com.android.internal.app.IAppOpsService: android.os.IBinder getToken(android.os.IBinder)>", "vulType" : "System Environment Evaluation"}]}, "android.print.PrintManager": {"interfaceName" : "android.print.IPrintManager", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: void addPrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>", "serviceApi" : "<android.print.IPrintManager: void addPrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>", "vulType" : "IPC Flooding"}, {"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: void addPrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>", "serviceApi" : "<android.print.IPrintManager: void addPrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>", "vulType" : "IPC Flooding"}, {"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.print.PrintManagerService$PrintManagerImpl: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)>", "serviceApi" : "<android.print.IPrintManager: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)>", "vulType" : "IPC Flooding"}]}, "android.app.backup.BackupManager": {"interfaceName" : "android.app.backup.IBackupManager", "vulApiList" : [{"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.backup.Trampoline: void dataChanged(java.lang.String)>", "serviceApi" : "<android.app.backup.IBackupManager: void dataChanged(java.lang.String)>", "vulType" : "Fake Identify"}]}, "android.os.SystemUpdateManager": {"interfaceName" : "android.os.ISystemUpdateManager", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "exceptionList" : ["updateSystemUpdateInfo params[0] android.os.PersistableBundle: l1 -> IllegalArgumentException"], "failedValidatorList" : ["IllegalParameterValidator"], "implApi" : "<com.android.server.SystemUpdateManagerService: void updateSystemUpdateInfo(android.os.PersistableBundle)>", "serviceApi" : "<android.os.ISystemUpdateManager: void updateSystemUpdateInfo(android.os.PersistableBundle)>", "vulType" : "Illegal Parameter"}]}, "android.hardware.display.DisplayManagerGlobal": {"interfaceName" : "android.hardware.display.IDisplayManager", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.display.DisplayManagerService$BinderService: void registerCallback(android.hardware.display.IDisplayManagerCallback)>", "serviceApi" : "<android.hardware.display.IDisplayManager: void registerCallback(android.hardware.display.IDisplayManagerCallback)>", "vulType" : "IPC Flooding"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.display.DisplayManagerService$BinderService: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>", "serviceApi" : "<android.hardware.display.IDisplayManager: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>", "vulType" : "System Environment Evaluation"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.display.DisplayManagerService$BinderService: android.view.DisplayInfo getDisplayInfo(int)>", "serviceApi" : "<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "exceptionList" : ["createVirtualDisplay params[6] int: l6 -> IllegalArgumentException"], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.display.DisplayManagerService$BinderService: int createVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int,java.lang.String)>", "serviceApi" : "<android.hardware.display.IDisplayManager: int createVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int,java.lang.String)>", "vulType" : "Fake Identify"}]}, "android.media.projection.MediaProjectionManager": {"interfaceName" : "android.media.projection.IMediaProjectionManager", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.media.projection.MediaProjectionManagerService$BinderService: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)>", "serviceApi" : "<android.media.projection.IMediaProjectionManager: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)>", "vulType" : "IPC Flooding"}]}, "android.net.EthernetManager": {"interfaceName" : "android.net.IEthernetManager", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.ethernet.EthernetServiceImpl: void addListener(android.net.IEthernetServiceListener)>", "serviceApi" : "<android.net.IEthernetManager: void addListener(android.net.IEthernetServiceListener)>", "vulType" : "IPC Flooding"}]}, "android.app.ActivityView": {"interfaceName" : "android.app.IActivityManager", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.am.ActivityManagerService: void registerTaskStackListener(android.app.ITaskStackListener)>", "serviceApi" : "<android.app.IActivityManager: void registerTaskStackListener(android.app.ITaskStackListener)>", "vulType" : "IPC Flooding"}]}, "android.app.WallpaperManager": {"interfaceName" : "android.app.IWallpaperManager", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.wallpaper.WallpaperManagerService: void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int)>", "serviceApi" : "<android.app.IWallpaperManager: void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int)>", "vulType" : "IPC Flooding"}, {"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.wallpaper.WallpaperManagerService: boolean isWallpaperSupported(java.lang.String)>", "serviceApi" : "<android.app.IWallpaperManager: boolean isWallpaperSupported(java.lang.String)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.wallpaper.WallpaperManagerService: boolean isSetWallpaperAllowed(java.lang.String)>", "serviceApi" : "<android.app.IWallpaperManager: boolean isSetWallpaperAllowed(java.lang.String)>", "vulType" : "Fake Identify"}, {"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.wallpaper.WallpaperManagerService: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)>", "serviceApi" : "<android.app.IWallpaperManager: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)>", "vulType" : "IPC Flooding"}]}, "android.media.AudioManager": {"interfaceName" : "android.media.IAudioService", "vulApiList" : [{"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.audio.AudioService: void setRingerModeExternal(int,java.lang.String)>", "serviceApi" : "<android.media.IAudioService: void setRingerModeExternal(int,java.lang.String)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.audio.AudioService: void setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String,java.lang.String)>", "serviceApi" : "<android.media.IAudioService: void setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String,java.lang.String)>", "vulType" : "Fake Identify"}, {"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.audio.AudioService: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)>", "serviceApi" : "<android.media.IAudioService: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)>", "vulType" : "IPC Flooding"}, {"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.audio.AudioService: boolean isValidRingerMode(int)>", "serviceApi" : "<android.media.IAudioService: boolean isValidRingerMode(int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.audio.AudioService: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)>", "serviceApi" : "<android.media.IAudioService: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)>", "vulType" : "IPC Flooding"}, {"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.audio.AudioService: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>", "serviceApi" : "<android.media.IAudioService: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>", "vulType" : "Fake Identify"}]}, "android.view.autofill.AutofillManager": {"interfaceName" : "android.view.autofill.IAutoFillManager", "vulApiList" : [{"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: boolean isServiceEnabled(int,java.lang.String)>", "serviceApi" : "<android.view.autofill.IAutoFillManager: boolean isServiceEnabled(int,java.lang.String)>", "vulType" : "Fake Identify"}]}, "android.app.UiAutomationConnection": {"interfaceName" : "android.view.accessibility.IAccessibilityManager", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "exceptionList" : ["registerUiTestAutomationServiceLocked params[0] android.accessibilityservice.IAccessibilityServiceClient: l1 -> IllegalArgumentException"], "failedValidatorList" : ["IllegalParameterValidator"], "implApi" : "<com.android.server.accessibility.AccessibilityManagerService: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int)>", "serviceApi" : "<android.view.accessibility.IAccessibilityManager: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int)>", "vulType" : "Illegal Parameter"}]}, "android.view.accessibility.AccessibilityManager": {"interfaceName" : "android.view.accessibility.IAccessibilityManager", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["MethodStatusValidator"], "implApi" : "<com.android.server.accessibility.AccessibilityManagerService: void interrupt(int)>", "serviceApi" : "<android.view.accessibility.IAccessibilityManager: void interrupt(int)>", "vulType" : "Fake Status"}, {"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["MethodStatusValidator"], "implApi" : "<com.android.server.accessibility.AccessibilityManagerService: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>", "serviceApi" : "<android.view.accessibility.IAccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>", "vulType" : "Fake Status"}]}, "android.app.usage.StorageStatsManager": {"interfaceName" : "android.app.usage.IStorageStatsManager", "vulApiList" : [{"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.usage.StorageStatsService: long getTotalBytes(java.lang.String,java.lang.String)>", "serviceApi" : "<android.app.usage.IStorageStatsManager: long getTotalBytes(java.lang.String,java.lang.String)>", "vulType" : "Fake Identify"}]}, "android.hardware.radio.RadioManager": {"interfaceName" : "android.hardware.radio.IRadioService", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.broadcastradio.BroadcastRadioService$ServiceImpl: android.hardware.radio.ICloseHandle addAnnouncementListener(int[],android.hardware.radio.IAnnouncementListener)>", "serviceApi" : "<android.hardware.radio.IRadioService: android.hardware.radio.ICloseHandle addAnnouncementListener(int[],android.hardware.radio.IAnnouncementListener)>", "vulType" : "IPC Flooding"}]}, "android.app.admin.DevicePolicyManager": {"interfaceName" : "android.app.admin.IDevicePolicyManager", "vulApiList" : [{"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.devicepolicy.BaseIDevicePolicyManager: boolean generateKeyPair(android.content.ComponentName,java.lang.String,java.lang.String,android.security.keystore.ParcelableKeyGenParameterSpec,int,android.security.keymaster.KeymasterCertificateChain)>", "serviceApi" : "<android.app.admin.IDevicePolicyManager: boolean generateKeyPair(android.content.ComponentName,java.lang.String,java.lang.String,android.security.keystore.ParcelableKeyGenParameterSpec,int,android.security.keymaster.KeymasterCertificateChain)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.devicepolicy.BaseIDevicePolicyManager: boolean setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.lang.String,byte[],byte[],boolean)>", "serviceApi" : "<android.app.admin.IDevicePolicyManager: boolean setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.lang.String,byte[],byte[],boolean)>", "vulType" : "Fake Identify"}]}, "android.service.dreams.DreamService": {"interfaceName" : "android.service.dreams.IDreamManager", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["MethodStatusValidator"], "implApi" : "<com.android.server.dreams.DreamManagerService$BinderService: void finishSelf(android.os.IBinder,boolean)>", "serviceApi" : "<android.service.dreams.IDreamManager: void finishSelf(android.os.IBinder,boolean)>", "vulType" : "Fake Status"}]}, "android.hardware.input.InputManager": {"interfaceName" : "android.hardware.input.IInputManager", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.input.InputManagerService: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>", "serviceApi" : "<android.hardware.input.IInputManager: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>", "vulType" : "IPC Flooding"}, {"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.input.InputManagerService: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>", "serviceApi" : "<android.hardware.input.IInputManager: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>", "vulType" : "IPC Flooding"}]}, "android.content.ClipboardManager": {"interfaceName" : "android.content.IClipboard", "vulApiList" : [{"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.clipboard.ClipboardService$ClipboardImpl: void clearPrimaryClip(java.lang.String)>", "serviceApi" : "<android.content.IClipboard: void clearPrimaryClip(java.lang.String)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.clipboard.ClipboardService$ClipboardImpl: void setPrimaryClip(android.content.ClipData,java.lang.String)>", "serviceApi" : "<android.content.IClipboard: void setPrimaryClip(android.content.ClipData,java.lang.String)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName"], "enforcement" : ["getCallingUserId CallerCheckingEnforcement"], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.clipboard.ClipboardService$ClipboardImpl: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String)>", "serviceApi" : "<android.content.IClipboard: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String)>", "vulType" : "IPC Flooding"}]}, "android.location.CountryDetector": {"interfaceName" : "android.location.ICountryDetector", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.CountryDetectorService: void addCountryListener(android.location.ICountryListener)>", "serviceApi" : "<android.location.ICountryDetector: void addCountryListener(android.location.ICountryListener)>", "vulType" : "IPC Flooding"}]}, "android.net.sip.SipManager": {"interfaceName" : "android.net.sip.ISipService", "vulApiList" : [{"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName"], "enforcement" : ["enforceCallingOrSelfPermission CallerCheckingEnforcement"], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.sip.SipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)>", "serviceApi" : "<android.net.sip.ISipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)>", "vulType" : "IPC Flooding"}]}, "android.os.UserManager": {"interfaceName" : "android.os.IUserManager", "vulApiList" : [{"checkingBypass" : ["myUserId Identify Checking: myUserId"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.UserManagerService: android.content.pm.UserInfo getUserInfo(int)>", "serviceApi" : "<android.os.IUserManager: android.content.pm.UserInfo getUserInfo(int)>", "vulType" : "Fake Identify"}]}, "android.net.ConnectivityManager": {"interfaceName" : "android.os.INetworkManagementService", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.NetworkManagementService: void registerNetworkActivityListener(android.os.INetworkActivityListener)>", "serviceApi" : "<android.os.INetworkManagementService: void registerNetworkActivityListener(android.os.INetworkActivityListener)>", "vulType" : "IPC Flooding"}]}, "android.accounts.AccountManager": {"interfaceName" : "android.accounts.IAccountManager", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "exceptionList" : ["addAccountExplicitly params[0] android.accounts.Account: l1 -> IllegalArgumentException"], "failedValidatorList" : ["IllegalParameterValidator"], "implApi" : "<com.android.server.accounts.AccountManagerService: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>", "serviceApi" : "<android.accounts.IAccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>", "vulType" : "Illegal Parameter"}]}, "android.media.midi.MidiManager": {"interfaceName" : "android.media.midi.IMidiManager", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.midi.MidiService: void registerListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>", "serviceApi" : "<android.media.midi.IMidiManager: void registerListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>", "vulType" : "IPC Flooding"}]}, "android.os.storage.StorageManager": {"interfaceName" : "android.os.storage.IStorageManager", "vulApiList" : [{"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.StorageManagerService: void mkdirs(java.lang.String,java.lang.String)>", "serviceApi" : "<android.os.storage.IStorageManager: void mkdirs(java.lang.String,java.lang.String)>", "vulType" : "Fake Identify"}, {"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.StorageManagerService: void registerListener(android.os.storage.IStorageEventListener)>", "serviceApi" : "<android.os.storage.IStorageManager: void registerListener(android.os.storage.IStorageEventListener)>", "vulType" : "IPC Flooding"}]}, "android.media.tv.TvInputManager$Session": {"interfaceName" : "android.media.tv.ITvInputManager", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "exceptionList" : ["selectTrack params[1] int: l1 -> IllegalArgumentException"], "failedValidatorList" : ["IllegalParameterValidator"], "implApi" : "<com.android.server.tv.TvInputManagerService$BinderService: void selectTrack(android.os.IBinder,int,java.lang.String,int)>", "serviceApi" : "<android.media.tv.ITvInputManager: void selectTrack(android.os.IBinder,int,java.lang.String,int)>", "vulType" : "Illegal Parameter"}]}, "android.app.usage.NetworkStatsManager": {"interfaceName" : "android.net.INetworkStatsService", "vulApiList" : [{"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.net.NetworkStatsService: android.net.INetworkStatsSession openSessionForUsageStats(int,java.lang.String)>", "serviceApi" : "<android.net.INetworkStatsService: android.net.INetworkStatsSession openSessionForUsageStats(int,java.lang.String)>", "vulType" : "Fake Identify"}]}, "android.hardware.location.ContextHubManager": {"interfaceName" : "android.hardware.location.IContextHubService", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.location.ContextHubService: int registerCallback(android.hardware.location.IContextHubCallback)>", "serviceApi" : "<android.hardware.location.IContextHubService: int registerCallback(android.hardware.location.IContextHubCallback)>", "vulType" : "IPC Flooding"}]}, "android.bluetooth.BluetoothAdapter": {"interfaceName" : "android.bluetooth.IBluetoothManager", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.BluetoothManagerService: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>", "serviceApi" : "<android.bluetooth.IBluetoothManager: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>", "vulType" : "IPC Flooding"}]}, "android.app.ActivityThread": {"interfaceName" : "android.content.pm.IPackageManager", "vulApiList" : [{"checkingBypass" : ["myUserId Identify Checking: myUserId", "myUserId Identify Checking: myUserId"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>", "serviceApi" : "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName", "myUserId Identify Checking: myUserId"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.PackageManagerService: java.lang.String[] getPackagesForUid(int)>", "serviceApi" : "<android.content.pm.IPackageManager: java.lang.String[] getPackagesForUid(int)>", "vulType" : "Fake Identify"}]}, "android.net.NetworkPolicyManager": {"interfaceName" : "android.net.INetworkPolicyManager", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.net.NetworkPolicyManagerService: void registerListener(android.net.INetworkPolicyListener)>", "serviceApi" : "<android.net.INetworkPolicyManager: void registerListener(android.net.INetworkPolicyListener)>", "vulType" : "IPC Flooding"}]}, "android.content.RestrictionsManager": {"interfaceName" : "android.content.IRestrictionsManager", "vulApiList" : [{"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.restrictions.RestrictionsManagerService$RestrictionsManagerImpl: android.os.Bundle getApplicationRestrictions(java.lang.String)>", "serviceApi" : "<android.content.IRestrictionsManager: android.os.Bundle getApplicationRestrictions(java.lang.String)>", "vulType" : "Fake Identify"}]}, "android.hardware.fingerprint.FingerprintManager": {"interfaceName" : "android.hardware.fingerprint.IFingerprintService", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper: void addLockoutResetCallback(android.hardware.fingerprint.IFingerprintServiceLockoutResetCallback)>", "serviceApi" : "<android.hardware.fingerprint.IFingerprintService: void addLockoutResetCallback(android.hardware.fingerprint.IFingerprintServiceLockoutResetCallback)>", "vulType" : "IPC Flooding"}, {"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName"], "enforcement" : ["getCallingUserId CallerCheckingEnforcement"], "exceptionList" : ["authenticate params[5] android.hardware.biometrics.IBiometricPromptReceiver: l5 -> IllegalArgumentException"], "failedValidatorList" : ["IllegalParameterValidator"], "implApi" : "<com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper: void authenticate(android.os.IBinder,long,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String,android.os.Bundle,android.hardware.biometrics.IBiometricPromptReceiver)>", "serviceApi" : "<android.hardware.fingerprint.IFingerprintService: void authenticate(android.os.IBinder,long,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String,android.os.Bundle,android.hardware.biometrics.IBiometricPromptReceiver)>", "vulType" : "Illegal Parameter"}]}, "android.content.pm.ShortcutManager": {"interfaceName" : "android.content.pm.IShortcutService", "vulApiList" : [{"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.ShortcutService: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>", "serviceApi" : "<android.content.pm.IShortcutService: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.ShortcutService: void removeAllDynamicShortcuts(java.lang.String,int)>", "serviceApi" : "<android.content.pm.IShortcutService: void removeAllDynamicShortcuts(java.lang.String,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.ShortcutService: android.content.pm.ParceledListSlice getManifestShortcuts(java.lang.String,int)>", "serviceApi" : "<android.content.pm.IShortcutService: android.content.pm.ParceledListSlice getManifestShortcuts(java.lang.String,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.ShortcutService: boolean addDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>", "serviceApi" : "<android.content.pm.IShortcutService: boolean addDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.ShortcutService: android.content.pm.ParceledListSlice getPinnedShortcuts(java.lang.String,int)>", "serviceApi" : "<android.content.pm.IShortcutService: android.content.pm.ParceledListSlice getPinnedShortcuts(java.lang.String,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.ShortcutService: int getIconMaxDimensions(java.lang.String,int)>", "serviceApi" : "<android.content.pm.IShortcutService: int getIconMaxDimensions(java.lang.String,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.ShortcutService: android.content.Intent createShortcutResultIntent(java.lang.String,android.content.pm.ShortcutInfo,int)>", "serviceApi" : "<android.content.pm.IShortcutService: android.content.Intent createShortcutResultIntent(java.lang.String,android.content.pm.ShortcutInfo,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.ShortcutService: int getMaxShortcutCountPerActivity(java.lang.String,int)>", "serviceApi" : "<android.content.pm.IShortcutService: int getMaxShortcutCountPerActivity(java.lang.String,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.ShortcutService: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>", "serviceApi" : "<android.content.pm.IShortcutService: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.ShortcutService: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>", "serviceApi" : "<android.content.pm.IShortcutService: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.ShortcutService: boolean setDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>", "serviceApi" : "<android.content.pm.IShortcutService: boolean setDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.ShortcutService: void reportShortcutUsed(java.lang.String,java.lang.String,int)>", "serviceApi" : "<android.content.pm.IShortcutService: void reportShortcutUsed(java.lang.String,java.lang.String,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.ShortcutService: boolean updateShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>", "serviceApi" : "<android.content.pm.IShortcutService: boolean updateShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.ShortcutService: void enableShortcuts(java.lang.String,java.util.List,int)>", "serviceApi" : "<android.content.pm.IShortcutService: void enableShortcuts(java.lang.String,java.util.List,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.ShortcutService: android.content.pm.ParceledListSlice getDynamicShortcuts(java.lang.String,int)>", "serviceApi" : "<android.content.pm.IShortcutService: android.content.pm.ParceledListSlice getDynamicShortcuts(java.lang.String,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.ShortcutService: int getRemainingCallCount(java.lang.String,int)>", "serviceApi" : "<android.content.pm.IShortcutService: int getRemainingCallCount(java.lang.String,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.ShortcutService: long getRateLimitResetTime(java.lang.String,int)>", "serviceApi" : "<android.content.pm.IShortcutService: long getRateLimitResetTime(java.lang.String,int)>", "vulType" : "Fake Identify"}]}, "android.location.Geocoder": {"interfaceName" : "android.location.ILocationManager", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "exceptionList" : ["getFromLocationName params[0] java.lang.String: l1 -> IllegalArgumentException"], "failedValidatorList" : ["IllegalParameterValidator"], "implApi" : "<com.android.server.LocationManagerService: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>", "serviceApi" : "<android.location.ILocationManager: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>", "vulType" : "Illegal Parameter"}]}, "android.app.usage.UsageStatsManager": {"interfaceName" : "android.app.usage.IUsageStatsManager", "vulApiList" : [{"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.usage.UsageStatsService$BinderService: android.content.pm.ParceledListSlice getAppStandbyBuckets(java.lang.String,int)>", "serviceApi" : "<android.app.usage.IUsageStatsManager: android.content.pm.ParceledListSlice getAppStandbyBuckets(java.lang.String,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.usage.UsageStatsService$BinderService: android.app.usage.UsageEvents queryEventsForPackage(long,long,java.lang.String)>", "serviceApi" : "<android.app.usage.IUsageStatsManager: android.app.usage.UsageEvents queryEventsForPackage(long,long,java.lang.String)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.usage.UsageStatsService$BinderService: void registerAppUsageObserver(int,java.lang.String[],long,android.app.PendingIntent,java.lang.String)>", "serviceApi" : "<android.app.usage.IUsageStatsManager: void registerAppUsageObserver(int,java.lang.String[],long,android.app.PendingIntent,java.lang.String)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.usage.UsageStatsService$BinderService: int getAppStandbyBucket(java.lang.String,java.lang.String,int)>", "serviceApi" : "<android.app.usage.IUsageStatsManager: int getAppStandbyBucket(java.lang.String,java.lang.String,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.usage.UsageStatsService$BinderService: void unregisterAppUsageObserver(int,java.lang.String)>", "serviceApi" : "<android.app.usage.IUsageStatsManager: void unregisterAppUsageObserver(int,java.lang.String)>", "vulType" : "Fake Identify"}]}, "android.content.pm.LauncherApps": {"interfaceName" : "android.content.pm.ILauncherApps", "vulApiList" : [{"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,java.lang.String,int,android.os.UserHandle)>", "serviceApi" : "<android.content.pm.ILauncherApps: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,java.lang.String,int,android.os.UserHandle)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ParceledListSlice getShortcutConfigActivities(java.lang.String,java.lang.String,android.os.UserHandle)>", "serviceApi" : "<android.content.pm.ILauncherApps: android.content.pm.ParceledListSlice getShortcutConfigActivities(java.lang.String,java.lang.String,android.os.UserHandle)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ActivityInfo resolveActivity(java.lang.String,android.content.ComponentName,android.os.UserHandle)>", "serviceApi" : "<android.content.pm.ILauncherApps: android.content.pm.ActivityInfo resolveActivity(java.lang.String,android.content.ComponentName,android.os.UserHandle)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ParceledListSlice getLauncherActivities(java.lang.String,java.lang.String,android.os.UserHandle)>", "serviceApi" : "<android.content.pm.ILauncherApps: android.content.pm.ParceledListSlice getLauncherActivities(java.lang.String,java.lang.String,android.os.UserHandle)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void showAppDetailsAsUser(android.app.IApplicationThread,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>", "serviceApi" : "<android.content.pm.ILauncherApps: void showAppDetailsAsUser(android.app.IApplicationThread,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>", "serviceApi" : "<android.content.pm.ILauncherApps: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean isPackageEnabled(java.lang.String,java.lang.String,android.os.UserHandle)>", "serviceApi" : "<android.content.pm.ILauncherApps: boolean isPackageEnabled(java.lang.String,java.lang.String,android.os.UserHandle)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : ["getCallingUserId CallerCheckingEnforcement"], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void addOnAppsChangedListener(java.lang.String,android.content.pm.IOnAppsChangedListener)>", "serviceApi" : "<android.content.pm.ILauncherApps: void addOnAppsChangedListener(java.lang.String,android.content.pm.IOnAppsChangedListener)>", "vulType" : "IPC Flooding"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean isActivityEnabled(java.lang.String,android.content.ComponentName,android.os.UserHandle)>", "serviceApi" : "<android.content.pm.ILauncherApps: boolean isActivityEnabled(java.lang.String,android.content.ComponentName,android.os.UserHandle)>", "vulType" : "Fake Identify"}]}, "android.net.wifi.WifiManager": {"interfaceName" : "android.net.wifi.IWifiManager", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.wifi.WifiServiceImpl: void registerSoftApCallback(android.os.IBinder,android.net.wifi.ISoftApCallback,int)>", "serviceApi" : "<android.net.wifi.IWifiManager: void registerSoftApCallback(android.os.IBinder,android.net.wifi.ISoftApCallback,int)>", "vulType" : "IPC Flooding"}, {"checkingBypass" : ["getOpPackageName identity checking: getOpPackageName"], "enforcement" : ["enforceCallingOrSelfPermission CallerCheckingEnforcement", "android.permission.ACCESS_WIFI_STATE PScout Permission"], "exceptionList" : ["disableEphemeralNetwork params[0] java.lang.String: l1 -> IllegalArgumentException"], "failedValidatorList" : ["IllegalParameterValidator"], "implApi" : "<com.android.server.wifi.WifiServiceImpl: void disableEphemeralNetwork(java.lang.String,java.lang.String)>", "serviceApi" : "<android.net.wifi.IWifiManager: void disableEphemeralNetwork(java.lang.String,java.lang.String)>", "vulType" : "Illegal Parameter"}]}, "android.hardware.display.DisplayManager": {"interfaceName" : "android.hardware.display.IDisplayManager", "vulApiList" : [{"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.display.DisplayManagerService$BinderService: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>", "serviceApi" : "<android.hardware.display.IDisplayManager: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>", "vulType" : "System Environment Evaluation"}, {"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.display.DisplayManagerService$BinderService: void registerCallback(android.hardware.display.IDisplayManagerCallback)>", "serviceApi" : "<android.hardware.display.IDisplayManager: void registerCallback(android.hardware.display.IDisplayManagerCallback)>", "vulType" : "IPC Flooding"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.display.DisplayManagerService$BinderService: android.view.DisplayInfo getDisplayInfo(int)>", "serviceApi" : "<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "exceptionList" : ["createVirtualDisplay params[6] int: l6 -> IllegalArgumentException"], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.display.DisplayManagerService$BinderService: int createVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int,java.lang.String)>", "serviceApi" : "<android.hardware.display.IDisplayManager: int createVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int,java.lang.String)>", "vulType" : "Fake Identify"}]}, "android.media.MediaRouter": {"interfaceName" : "android.media.IMediaRouterService", "vulApiList" : [{"checkingBypass" : ["myUserId Identify Checking: myUserId"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.media.MediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>", "serviceApi" : "<android.media.IMediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["myUserId Identify Checking: myUserId"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.media.MediaRouterService: void unregisterClient(android.media.IMediaRouterClient)>", "serviceApi" : "<android.media.IMediaRouterService: void unregisterClient(android.media.IMediaRouterClient)>", "vulType" : "System Environment Evaluation"}, {"checkingBypass" : ["myUserId Identify Checking: myUserId"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.media.MediaRouterService: android.media.MediaRouterClientState getState(android.media.IMediaRouterClient)>", "serviceApi" : "<android.media.IMediaRouterService: android.media.MediaRouterClientState getState(android.media.IMediaRouterClient)>", "vulType" : "System Environment Evaluation"}, {"checkingBypass" : ["myUserId Identify Checking: myUserId"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.media.MediaRouterService: boolean isPlaybackActive(android.media.IMediaRouterClient)>", "serviceApi" : "<android.media.IMediaRouterService: boolean isPlaybackActive(android.media.IMediaRouterClient)>", "vulType" : "System Environment Evaluation"}, {"checkingBypass" : ["myUserId Identify Checking: myUserId"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.media.MediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>", "serviceApi" : "<android.media.IMediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["myUserId Identify Checking: myUserId"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.audio.AudioService: void setBluetoothA2dpOn(boolean)>", "serviceApi" : "<android.media.IAudioService: void setBluetoothA2dpOn(boolean)>", "vulType" : "System Environment Evaluation"}, {"checkingBypass" : ["myUserId Identify Checking: myUserId"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.audio.AudioService: android.media.AudioRoutesInfo startWatchingRoutes(android.media.IAudioRoutesObserver)>", "serviceApi" : "<android.media.IAudioService: android.media.AudioRoutesInfo startWatchingRoutes(android.media.IAudioRoutesObserver)>", "vulType" : "System Environment Evaluation"}, {"checkingBypass" : ["myUserId Identify Checking: myUserId"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.audio.AudioService: int getStreamVolume(int)>", "serviceApi" : "<android.media.IAudioService: int getStreamVolume(int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["myUserId Identify Checking: myUserId"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.audio.AudioService: int getStreamMaxVolume(int)>", "serviceApi" : "<android.media.IAudioService: int getStreamMaxVolume(int)>", "vulType" : "Fake Identify"}]}, "android.media.tv.TvInputManager": {"interfaceName" : "android.media.tv.ITvInputManager", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.tv.TvInputManagerService$BinderService: void registerCallback(android.media.tv.ITvInputManagerCallback,int)>", "serviceApi" : "<android.media.tv.ITvInputManager: void registerCallback(android.media.tv.ITvInputManagerCallback,int)>", "vulType" : "IPC Flooding"}]}, "android.media.session.MediaSessionManager": {"interfaceName" : "android.media.session.ISessionManager", "vulApiList" : [{"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator", "IpcFloodValidator"], "implApi" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void addSessionTokensListener(android.media.ISessionTokensListener,int,java.lang.String)>", "serviceApi" : "<android.media.session.ISessionManager: void addSessionTokensListener(android.media.ISessionTokensListener,int,java.lang.String)>", "vulType" : "IPC Flooding"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void dispatchAdjustVolume(java.lang.String,int,int,int)>", "serviceApi" : "<android.media.session.ISessionManager: void dispatchAdjustVolume(java.lang.String,int,int,int)>", "vulType" : "Fake Identify"}, {"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void setCallback(android.media.session.ICallback)>", "serviceApi" : "<android.media.session.ISessionManager: void setCallback(android.media.session.ICallback)>", "vulType" : "IPC Flooding"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: java.util.List getSessionTokens(boolean,boolean,java.lang.String)>", "serviceApi" : "<android.media.session.ISessionManager: java.util.List getSessionTokens(boolean,boolean,java.lang.String)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void dispatchMediaKeyEvent(java.lang.String,boolean,android.view.KeyEvent,boolean)>", "serviceApi" : "<android.media.session.ISessionManager: void dispatchMediaKeyEvent(java.lang.String,boolean,android.view.KeyEvent,boolean)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void removeSessionTokensListener(android.media.ISessionTokensListener,java.lang.String)>", "serviceApi" : "<android.media.session.ISessionManager: void removeSessionTokensListener(android.media.ISessionTokensListener,java.lang.String)>", "vulType" : "Fake Identify"}, {"checkingBypass" : ["myUserId Identify Checking: myUserId"], "enforcement" : ["enforcePackageName CallerCheckingEnforcement", "android.permission.READ_PROFILE PScout Permission"], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>", "serviceApi" : "<android.media.session.ISessionManager: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>", "vulType" : "IPC Flooding"}, {"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void setOnMediaKeyListener(android.media.session.IOnMediaKeyListener)>", "serviceApi" : "<android.media.session.ISessionManager: void setOnMediaKeyListener(android.media.session.IOnMediaKeyListener)>", "vulType" : "IPC Flooding"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void dispatchVolumeKeyEvent(java.lang.String,boolean,android.view.KeyEvent,int,boolean)>", "serviceApi" : "<android.media.session.ISessionManager: void dispatchVolumeKeyEvent(java.lang.String,boolean,android.view.KeyEvent,int,boolean)>", "vulType" : "Fake Identify"}, {"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: void setOnVolumeKeyLongPressListener(android.media.session.IOnVolumeKeyLongPressListener)>", "serviceApi" : "<android.media.session.ISessionManager: void setOnVolumeKeyLongPressListener(android.media.session.IOnVolumeKeyLongPressListener)>", "vulType" : "IPC Flooding"}, {"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : [], "failedValidatorList" : ["InconsistentParamsCheckingValidator"], "implApi" : "<com.android.server.media.MediaSessionService$SessionManagerImpl: boolean isTrusted(java.lang.String,int,int)>", "serviceApi" : "<android.media.session.ISessionManager: boolean isTrusted(java.lang.String,int,int)>", "vulType" : "Fake Identify"}]}, "android.location.LocationManager": {"interfaceName" : "android.location.ILocationManager", "vulApiList" : [{"checkingBypass" : ["getPackageName identity checking: getPackageName"], "enforcement" : ["checkOp CallerCheckingEnforcement"], "failedValidatorList" : ["IpcFloodValidator"], "implApi" : "<com.android.server.LocationManagerService: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String)>", "serviceApi" : "<android.location.ILocationManager: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String)>", "vulType" : "IPC Flooding"}]}, "android.media.audiopolicy.AudioPolicy": {"interfaceName" : "android.media.IAudioService", "vulApiList" : [{"checkingBypass" : [], "enforcement" : [], "failedValidatorList" : ["MethodStatusValidator"], "implApi" : "<com.android.server.audio.AudioService: int setFocusPropertiesForPolicy(int,android.media.audiopolicy.IAudioPolicyCallback)>", "serviceApi" : "<android.media.IAudioService: int setFocusPropertiesForPolicy(int,android.media.audiopolicy.IAudioPolicyCallback)>", "vulType" : "Fake Status"}]}}