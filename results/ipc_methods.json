[
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)>"
  },
  {
    "helperCls": "android.speech.SpeechRecognizer",
    "implCls": "android.speech.IRecognitionService",
    "inf": "android.speech.IRecognitionService",
    "mtd": "<android.speech.IRecognitionService: void cancel(android.speech.IRecognitionListener)>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: void cancelEnrollment(android.os.IBinder)>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: int getMaxShortcutCountPerActivity(java.lang.String,int)>"
  },
  {
    "helperCls": "android.os.SystemVibrator",
    "implCls": "com.android.server.VibratorService",
    "inf": "android.os.IVibratorService",
    "mtd": "<android.os.IVibratorService: boolean hasAmplitudeControl()>"
  },
  {
    "helperCls": "android.net.wifi.aware.WifiAwareManager",
    "implCls": "com.android.server.wifi.aware.WifiAwareServiceImpl",
    "inf": "android.net.wifi.aware.IWifiAwareManager",
    "mtd": "<android.net.wifi.aware.IWifiAwareManager: void connect(android.os.IBinder,java.lang.String,android.net.wifi.aware.IWifiAwareEventCallback,android.net.wifi.aware.ConfigRequest,boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: boolean isPlaybackActive(android.media.IMediaRouterClient)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean isUserUnlocked(int)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: java.util.List getOpsForPackage(int,java.lang.String,int[])>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean removeUserEvenWhenDisallowed(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isAdminActive(android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.print.PrintManager",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: void removePrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.net.NetworkPolicyManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: int[] getUidsWithPolicy(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.content.ComponentName getDeviceOwnerComponent(boolean)>"
  },
  {
    "helperCls": "android.telephony.SubscriptionManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: android.telephony.SubscriptionPlan[] getSubscriptionPlans(int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.backup.BackupManager",
    "implCls": "com.android.server.backup.Trampoline",
    "inf": "android.app.backup.IBackupManager",
    "mtd": "<android.app.backup.IBackupManager: java.lang.String getCurrentTransport()>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void setInTouchMode(boolean)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: void setInputMethod(android.os.IBinder,java.lang.String)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void closeSystemDialogs()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionInitiated(android.telephony.ims.ImsCallProfile)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHealth",
    "implCls": "android.bluetooth.IBluetoothHealth",
    "inf": "android.bluetooth.IBluetoothHealth",
    "mtd": "<android.bluetooth.IBluetoothHealth: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.UiAutomationConnection",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: android.view.WindowContentFrameStats getWindowContentFrameStats(android.os.IBinder)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionResumeFailed(android.telephony.ims.ImsReasonInfo)>"
  },
  {
    "helperCls": "android.app.usage.NetworkStatsManager",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: void unregisterUsageRequest(android.net.DataUsageRequest)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionHoldFailed(android.telephony.ims.ImsReasonInfo)>"
  },
  {
    "helperCls": "android.net.metrics.IpConnectivityLog",
    "implCls": "com.android.server.connectivity.IpConnectivityMetrics$Impl",
    "inf": "android.net.IIpConnectivityMetrics",
    "mtd": "<android.net.IIpConnectivityMetrics: int logEvent(android.net.ConnectivityMetricsEvent)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setSecurityLoggingEnabled(android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.net.IpSecManager$UdpEncapsulationSocket",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: android.net.IpSecUdpEncapResponse openUdpEncapsulationSocket(int,android.os.IBinder)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean hasBaseUserRestriction(java.lang.String,int)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: void tryPointerSpeed(int)>"
  },
  {
    "helperCls": "android.service.persistentdata.PersistentDataBlockManager",
    "implCls": "android.service.persistentdata.IPersistentDataBlockService",
    "inf": "android.service.persistentdata.IPersistentDataBlockService",
    "mtd": "<android.service.persistentdata.IPersistentDataBlockService: byte[] read()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: android.bluetooth.IBluetoothSocketManager getSocketManager()>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.app.usage.NetworkStatsManager",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: android.net.INetworkStatsSession openSessionForUsageStats(int,java.lang.String)>"
  },
  {
    "helperCls": "android.net.ip.IpClient",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void unregisterObserver(android.net.INetworkManagementEventObserver)>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: void setActiveUser(int)>"
  },
  {
    "helperCls": "android.app.ActivityOptions",
    "implCls": "android.os.IRemoteCallback",
    "inf": "android.os.IRemoteCallback",
    "mtd": "<android.os.IRemoteCallback: void sendResult(android.os.Bundle)>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void finishSelf(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void finishSelf(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.media.projection.MediaProjectionManager",
    "implCls": "com.android.server.media.projection.MediaProjectionManagerService$BinderService",
    "inf": "android.media.projection.IMediaProjectionManager",
    "mtd": "<android.media.projection.IMediaProjectionManager: android.media.projection.MediaProjectionInfo getActiveProjectionInfo()>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean isQuietModeEnabled(int)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void connectWifiDisplay(java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int addOverrideApn(android.content.ComponentName,android.telephony.data.ApnSetting)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: int getState()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean removeBond(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void hide()>"
  },
  {
    "helperCls": "android.nfc.cardemulation.CardEmulation",
    "implCls": "android.nfc.INfcCardEmulation",
    "inf": "android.nfc.INfcCardEmulation",
    "mtd": "<android.nfc.INfcCardEmulation: boolean registerAidGroupForService(int,android.content.ComponentName,android.nfc.cardemulation.AidGroup)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.CardEmulation",
    "implCls": "android.nfc.INfcCardEmulation",
    "inf": "android.nfc.INfcCardEmulation",
    "mtd": "<android.nfc.INfcCardEmulation: boolean registerAidGroupForService(int,android.content.ComponentName,android.nfc.cardemulation.AidGroup)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.os.RecoverySystem",
    "implCls": "com.android.server.RecoverySystemService$BinderService",
    "inf": "android.os.IRecoverySystem",
    "mtd": "<android.os.IRecoverySystem: boolean setupBcb(java.lang.String)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionMergeStarted(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.app.KeyguardManager",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: boolean isKeyguardSecure()>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: void dispatchMediaKeyEvent(java.lang.String,boolean,android.view.KeyEvent,boolean)>"
  },
  {
    "helperCls": "android.app.UiAutomation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: void revokeRuntimePermission(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void setUserRestriction(int,boolean,android.os.IBinder,int,java.lang.String[])>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: boolean startScoUsingVirtualVoiceCall()>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "android.app.IInputForwarder",
    "inf": "android.app.IInputForwarder",
    "mtd": "<android.app.IInputForwarder: boolean forwardEvent(android.view.InputEvent)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputContext",
    "inf": "com.android.internal.view.IInputContext",
    "mtd": "<com.android.internal.view.IInputContext: void finishComposingText()>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void stopDtmf()>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.content.pm.ParceledListSlice getBrightnessEvents(java.lang.String)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: void unregisterCallbackListener(android.media.session.ISessionControllerCallback)>"
  },
  {
    "helperCls": "android.app.backup.BackupManager",
    "implCls": "com.android.server.backup.Trampoline",
    "inf": "android.app.backup.IBackupManager",
    "mtd": "<android.app.backup.IBackupManager: void updateTransportAttributes(android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.String)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean outOfMemory(android.view.IWindow)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: android.os.Bundle getAppWidgetOptions(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.StatsManager",
    "implCls": "android.os.IStatsManager",
    "inf": "android.os.IStatsManager",
    "mtd": "<android.os.IStatsManager: void addConfiguration(long,byte[],java.lang.String)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: java.lang.String[] getMobileIfaces()>"
  },
  {
    "helperCls": "android.provider.Settings$Secure",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void respondToRttUpgradeRequest(java.lang.String,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void respondToRttUpgradeRequest(java.lang.String,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.net.EthernetManager",
    "implCls": "com.android.server.ethernet.EthernetServiceImpl",
    "inf": "android.net.IEthernetManager",
    "mtd": "<android.net.IEthernetManager: void removeListener(android.net.IEthernetServiceListener)>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: void unregisterTaskStackListener(android.app.ITaskStackListener)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()>"
  },
  {
    "helperCls": "android.content.RestrictionsManager",
    "implCls": "com.android.server.restrictions.RestrictionsManagerService$RestrictionsManagerImpl",
    "inf": "android.content.IRestrictionsManager",
    "mtd": "<android.content.IRestrictionsManager: void requestPermission(java.lang.String,java.lang.String,java.lang.String,android.os.PersistableBundle)>"
  },
  {
    "helperCls": "android.provider.Settings$Secure",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void grantRuntimePermission(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean removeUser(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: boolean isEnabled()>"
  },
  {
    "helperCls": "android.os.ServiceManager",
    "implCls": "android.os.IServiceManager",
    "inf": "android.os.IServiceManager",
    "mtd": "<android.os.IServiceManager: android.os.IBinder getService(java.lang.String)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean outOfMemory(android.view.IWindow)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.content.ComponentName getDeviceOwnerComponent(boolean)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: void setTouchCalibrationForInputDevice(java.lang.String,int,android.hardware.input.TouchCalibration)>"
  },
  {
    "helperCls": "android.bluetooth.le.AdvertisingSet",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void setPeriodicAdvertisingParameters(int,android.bluetooth.le.PeriodicAdvertisingParameters)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean setApplicationHiddenSettingAsUser(java.lang.String,boolean,int)>"
  },
  {
    "helperCls": "android.view.textclassifier.SystemTextClassifier",
    "implCls": "com.android.server.textclassifier.TextClassificationManagerService",
    "inf": "android.service.textclassifier.ITextClassifierService",
    "mtd": "<android.service.textclassifier.ITextClassifierService: void onClassifyText(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassification$Request,android.service.textclassifier.ITextClassificationCallback)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void extendToConference(java.lang.String[])>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.content.pm.UserInfo getUserInfo(int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void registerMoveCallback(android.content.pm.IPackageMoveObserver)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: boolean isOperationActive(int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.Camera",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanCommissioningSession",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void closeCommissioningSession()>"
  },
  {
    "helperCls": "android.content.ClipboardManager",
    "implCls": "com.android.server.clipboard.ClipboardService$ClipboardImpl",
    "inf": "android.content.IClipboard",
    "mtd": "<android.content.IClipboard: android.content.ClipData getPrimaryClip(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void leConnectionUpdate(int,java.lang.String,int,int,int,int,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: android.os.Bundle getCurrentAgFeatures(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setSystemUpdatePolicy(android.content.ComponentName,android.app.admin.SystemUpdatePolicy)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.media.midi.MidiManager",
    "implCls": "com.android.server.midi.MidiService",
    "inf": "android.media.midi.IMidiManager",
    "mtd": "<android.media.midi.IMidiManager: void unregisterListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>"
  },
  {
    "helperCls": "android.hardware.location.GeofenceHardware",
    "implCls": "android.hardware.location.IGeofenceHardware",
    "inf": "android.hardware.location.IGeofenceHardware",
    "mtd": "<android.hardware.location.IGeofenceHardware: int[] getMonitoringTypes()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dp",
    "implCls": "android.bluetooth.IBluetoothA2dp",
    "inf": "android.bluetooth.IBluetoothA2dp",
    "mtd": "<android.bluetooth.IBluetoothA2dp: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InputChannel)>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: boolean setDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setUninstallBlocked(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.hardware.location.GeofenceHardwareImpl",
    "implCls": "android.location.IGpsGeofenceHardware",
    "inf": "android.location.IGpsGeofenceHardware",
    "mtd": "<android.location.IGpsGeofenceHardware: boolean resumeHardwareGeofence(int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHearingAid",
    "implCls": "android.bluetooth.IBluetoothHearingAid",
    "inf": "android.bluetooth.IBluetoothHearingAid",
    "mtd": "<android.bluetooth.IBluetoothHearingAid: java.util.List getDevicesMatchingConnectionStates(int[])>"
  },
  {
    "helperCls": "android.service.autofill.SaveCallback",
    "implCls": "android.service.autofill.ISaveCallback",
    "inf": "android.service.autofill.ISaveCallback",
    "mtd": "<android.service.autofill.ISaveCallback: void onSuccess(android.content.IntentSender)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void setUserData(android.service.autofill.UserData)>"
  },
  {
    "helperCls": "android.app.slice.SliceManager",
    "implCls": "com.android.server.slice.SliceManagerService",
    "inf": "android.app.slice.ISliceManager",
    "mtd": "<android.app.slice.ISliceManager: void revokeSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: int getState()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHearingAid",
    "implCls": "android.bluetooth.IBluetoothHearingAid",
    "inf": "android.bluetooth.IBluetoothHearingAid",
    "mtd": "<android.bluetooth.IBluetoothHearingAid: void setVolume(int)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: byte[] get(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.os.SystemVibrator",
    "implCls": "com.android.server.VibratorService",
    "inf": "android.os.IVibratorService",
    "mtd": "<android.os.IVibratorService: boolean hasVibrator()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getAdapterConnectionState()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void setReaderMode(android.os.IBinder,android.nfc.IAppCallback,int,android.os.Bundle)>"
  },
  {
    "helperCls": "android.app.backup.BackupManager",
    "implCls": "com.android.server.backup.Trampoline",
    "inf": "android.app.backup.IBackupManager",
    "mtd": "<android.app.backup.IBackupManager: android.content.Intent getConfigurationIntent(java.lang.String)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: boolean hasNamedWallpaper(java.lang.String)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: long getUserUnlockRealtime()>"
  },
  {
    "helperCls": "android.app.UiAutomation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: void grantRuntimePermission(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void finishSelf(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void finishSelf(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.app.UiAutomation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: void grantRuntimePermission(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean requestBugreport(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void hide()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMap",
    "implCls": "android.bluetooth.IBluetoothMap",
    "inf": "android.bluetooth.IBluetoothMap",
    "mtd": "<android.bluetooth.IBluetoothMap: java.util.List getConnectedDevices()>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcDta getNfcDtaInterface(java.lang.String)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void partitionPublic(java.lang.String)>"
  },
  {
    "helperCls": "android.os.PowerManager",
    "implCls": "com.android.server.power.PowerManagerService$BinderService",
    "inf": "android.os.IPowerManager",
    "mtd": "<android.os.IPowerManager: boolean isLightDeviceIdleMode()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: long getSupportedProfiles()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputContext",
    "inf": "com.android.internal.view.IInputContext",
    "mtd": "<com.android.internal.view.IInputContext: void finishComposingText()>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: boolean injectLocation(android.location.Location)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isOffloadedFilteringSupported()>"
  },
  {
    "helperCls": "android.media.Ringtone",
    "implCls": "android.media.IRingtonePlayer",
    "inf": "android.media.IRingtonePlayer",
    "mtd": "<android.media.IRingtonePlayer: void setPlaybackProperties(android.os.IBinder,float,boolean)>"
  },
  {
    "helperCls": "android.hardware.usb.UsbManager",
    "implCls": "com.android.server.usb.UsbService",
    "inf": "android.hardware.usb.IUsbManager",
    "mtd": "<android.hardware.usb.IUsbManager: android.os.ParcelFileDescriptor openDevice(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: boolean setPrintJobState(android.print.PrintJobId,int,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: int updateBleAppCount(android.os.IBinder,boolean,java.lang.String)>"
  },
  {
    "helperCls": "android.app.UiModeManager",
    "implCls": "android.app.IUiModeManager$Stub",
    "inf": "android.app.IUiModeManager",
    "mtd": "<android.app.IUiModeManager: boolean isUiModeLocked()>"
  },
  {
    "helperCls": "android.app.VrManager",
    "implCls": "android.service.vr.IVrManager",
    "inf": "android.service.vr.IVrManager",
    "mtd": "<android.service.vr.IVrManager: void unregisterPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>"
  },
  {
    "helperCls": "android.net.wifi.aware.WifiAwareManager",
    "implCls": "com.android.server.wifi.aware.WifiAwareServiceImpl",
    "inf": "android.net.wifi.aware.IWifiAwareManager",
    "mtd": "<android.net.wifi.aware.IWifiAwareManager: void connect(android.os.IBinder,java.lang.String,android.net.wifi.aware.IWifiAwareEventCallback,android.net.wifi.aware.ConfigRequest,boolean)>"
  },
  {
    "helperCls": "android.widget.Toast",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: void enqueueToast(java.lang.String,android.app.ITransientNotification,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: java.lang.String[] getSystemSharedLibraryNames()>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>"
  },
  {
    "helperCls": "android.media.midi.MidiOutputPort",
    "implCls": "android.media.midi.IMidiDeviceServer",
    "inf": "android.media.midi.IMidiDeviceServer",
    "mtd": "<android.media.midi.IMidiDeviceServer: void closePort(android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void reportPasswordChanged(int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.Network getActiveNetworkForUid(int,boolean)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: android.content.ComponentName getAutofillServiceComponentName()>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: void setGlobalProxy(android.net.ProxyInfo)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean isUpgrade()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: java.util.List getScanResults(java.lang.String)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionRttModifyRequestReceived(android.telephony.ims.ImsCallProfile)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: void destroySession2(android.os.Bundle)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void partitionPrivate(java.lang.String)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: java.lang.String getName()>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: com.android.ims.internal.IImsVideoCallProvider getVideoCallProvider()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean setInstantAppCookie(java.lang.String,byte[],int)>"
  },
  {
    "helperCls": "android.app.VrManager",
    "implCls": "android.service.vr.IVrManager",
    "inf": "android.service.vr.IVrManager",
    "mtd": "<android.service.vr.IVrManager: void setVr2dDisplayProperties(android.app.Vr2dDisplayProperties)>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: void authenticate(android.os.IBinder,long,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String,android.os.Bundle,android.hardware.biometrics.IBiometricPromptReceiver)>"
  },
  {
    "helperCls": "android.app.Instrumentation",
    "implCls": "android.app.IInstrumentationWatcher",
    "inf": "android.app.IInstrumentationWatcher",
    "mtd": "<android.app.IInstrumentationWatcher: void instrumentationStatus(android.content.ComponentName,int,android.os.Bundle)>"
  },
  {
    "helperCls": "android.hardware.location.GeofenceHardware",
    "implCls": "android.hardware.location.IGeofenceHardware",
    "inf": "android.hardware.location.IGeofenceHardware",
    "mtd": "<android.hardware.location.IGeofenceHardware: boolean pauseGeofence(int,int)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void sendTvInputNotifyIntent(android.content.Intent,int)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller$Session",
    "implCls": "android.content.pm.IPackageInstallerSession",
    "inf": "android.content.pm.IPackageInstallerSession",
    "mtd": "<android.content.pm.IPackageInstallerSession: void setClientProgress(float)>"
  },
  {
    "helperCls": "android.media.soundtrigger.SoundTriggerManager",
    "implCls": "com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub",
    "inf": "com.android.internal.app.ISoundTriggerService",
    "mtd": "<com.android.internal.app.ISoundTriggerService: int unloadSoundModel(android.os.ParcelUuid)>"
  },
  {
    "helperCls": "android.os.PowerManager",
    "implCls": "com.android.server.power.PowerManagerService$BinderService",
    "inf": "android.os.IPowerManager",
    "mtd": "<android.os.IPowerManager: void userActivity(long,int,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean hasGrantedPolicy(android.content.ComponentName,int,int)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: void notifyAppWidgetViewDataChanged(java.lang.String,int[],int)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: android.content.pm.ParceledListSlice getPinnedShortcuts(java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanScanner",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void startEnergyScan(java.util.Map,android.net.lowpan.ILowpanEnergyScanCallback)>"
  },
  {
    "helperCls": "android.app.usage.UsageStatsManager",
    "implCls": "com.android.server.usage.UsageStatsService$BinderService",
    "inf": "android.app.usage.IUsageStatsManager",
    "mtd": "<android.app.usage.IUsageStatsManager: void whitelistAppTemporarily(java.lang.String,long,int)>"
  },
  {
    "helperCls": "android.service.quicksettings.TileService",
    "implCls": "android.service.quicksettings.IQSService",
    "inf": "android.service.quicksettings.IQSService",
    "mtd": "<android.service.quicksettings.IQSService: void updateStatusIcon(android.os.IBinder,android.graphics.drawable.Icon,java.lang.String)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsUtListener",
    "implCls": "com.android.ims.internal.IImsUtListener",
    "inf": "com.android.ims.internal.IImsUtListener",
    "mtd": "<com.android.ims.internal.IImsUtListener: void utConfigurationCallForwardQueried(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsCallForwardInfo[])>"
  },
  {
    "helperCls": "android.media.midi.MidiDevice$MidiConnection",
    "implCls": "android.media.midi.IMidiDeviceServer",
    "inf": "android.media.midi.IMidiDeviceServer",
    "mtd": "<android.media.midi.IMidiDeviceServer: void closePort(android.os.IBinder)>"
  },
  {
    "helperCls": "android.media.midi.MidiDevice$MidiConnection",
    "implCls": "android.media.midi.IMidiDeviceServer",
    "inf": "android.media.midi.IMidiDeviceServer",
    "mtd": "<android.media.midi.IMidiDeviceServer: void closePort(android.os.IBinder)>"
  },
  {
    "helperCls": "android.hardware.usb.UsbManager",
    "implCls": "com.android.server.usb.UsbService",
    "inf": "android.hardware.usb.IUsbManager",
    "mtd": "<android.hardware.usb.IUsbManager: boolean isFunctionEnabled(java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int getUidForSharedUser(java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void verifyNfcPermission()>"
  },
  {
    "helperCls": "android.app.backup.RestoreSession",
    "implCls": "android.app.backup.IRestoreSession",
    "inf": "android.app.backup.IRestoreSession",
    "mtd": "<android.app.backup.IRestoreSession: void endRestoreSession()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int getSupportedFeatures()>"
  },
  {
    "helperCls": "android.hardware.location.GeofenceHardwareImpl",
    "implCls": "android.location.IFusedGeofenceHardware",
    "inf": "android.location.IFusedGeofenceHardware",
    "mtd": "<android.location.IFusedGeofenceHardware: void addGeofences(android.hardware.location.GeofenceHardwareRequestParcelable[])>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean createBond(android.bluetooth.BluetoothDevice,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothSap",
    "implCls": "android.bluetooth.IBluetoothSap",
    "inf": "android.bluetooth.IBluetoothSap",
    "mtd": "<android.bluetooth.IBluetoothSap: int getState()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getBondState(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: void reportShortcutUsed(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.AlarmManager",
    "implCls": "android.app.IAlarmManager",
    "inf": "android.app.IAlarmManager",
    "mtd": "<android.app.IAlarmManager: void remove(android.app.PendingIntent,android.app.IAlarmListener)>"
  },
  {
    "helperCls": "android.content.pm.AppsQueryHelper",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionInviteParticipantsRequestFailed(android.telephony.ims.ImsReasonInfo)>"
  },
  {
    "helperCls": "android.app.JobSchedulerImpl",
    "implCls": "com.android.server.job.JobSchedulerService$JobSchedulerStub",
    "inf": "android.app.job.IJobScheduler",
    "mtd": "<android.app.job.IJobScheduler: java.util.List getAllPendingJobs()>"
  },
  {
    "helperCls": "android.telephony.SubscriptionManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: android.telephony.SubscriptionPlan[] getSubscriptionPlans(int,java.lang.String)>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void finishSelf(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: android.net.Network getCurrentNetwork()>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isMasterMute()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothPbapClient",
    "implCls": "android.bluetooth.IBluetoothPbapClient",
    "inf": "android.bluetooth.IBluetoothPbapClient",
    "mtd": "<android.bluetooth.IBluetoothPbapClient: int getPriority(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean getCrossProfileContactsSearchDisabledForUser(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dp",
    "implCls": "android.bluetooth.IBluetoothA2dp",
    "inf": "android.bluetooth.IBluetoothA2dp",
    "mtd": "<android.bluetooth.IBluetoothA2dp: void enableOptionalCodecs(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: int getGnssBatchSize(java.lang.String)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: void updateAppWidgetOptions(java.lang.String,int,android.os.Bundle)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void unmount(java.lang.String)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int checkPackage(int,java.lang.String)>"
  },
  {
    "helperCls": "android.net.sip.SipSession",
    "implCls": "android.net.sip.ISipSession",
    "inf": "android.net.sip.ISipSession",
    "mtd": "<android.net.sip.ISipSession: int getState()>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.os.PersistableBundle getSeedAccountOptions()>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "android.view.autofill.IAutoFillManagerClient",
    "inf": "android.view.autofill.IAutoFillManagerClient",
    "mtd": "<android.view.autofill.IAutoFillManagerClient: void setSessionFinished(int)>"
  },
  {
    "helperCls": "android.provider.Settings$Secure",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.speech.RecognitionService$Callback",
    "implCls": "android.speech.IRecognitionListener",
    "inf": "android.speech.IRecognitionListener",
    "mtd": "<android.speech.IRecognitionListener: void onEndOfSpeech()>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean isUserNameSet(int)>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.Session",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int noteOperation(int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: android.media.tv.ITvInputHardware acquireTvInputHardware(int,android.media.tv.ITvInputHardwareCallback,android.media.tv.TvInputInfo,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isEnabled()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.hardware.camera2.impl.ICameraDeviceUserWrapper",
    "implCls": "android.hardware.camera2.ICameraDeviceUser",
    "inf": "android.hardware.camera2.ICameraDeviceUser",
    "mtd": "<android.hardware.camera2.ICameraDeviceUser: void endConfigure(int,android.hardware.camera2.impl.CameraMetadataNative)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ChangedPackages getChangedPackages(int,int)>"
  },
  {
    "helperCls": "android.bluetooth.le.AdvertisingSet",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void setScanResponseData(int,android.bluetooth.le.AdvertiseData)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: android.view.InputDevice getInputDevice(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean,int)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void rejectCall(java.lang.String,boolean,java.lang.String)>"
  },
  {
    "helperCls": "android.app.StatsManager",
    "implCls": "android.os.IStatsManager",
    "inf": "android.os.IStatsManager",
    "mtd": "<android.os.IStatsManager: byte[] getData(long,java.lang.String)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: void cancelAllNotifications(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean setPermittedCrossProfileNotificationListeners(android.content.ComponentName,java.util.List)>"
  },
  {
    "helperCls": "android.bluetooth.le.AdvertisingSet",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void setPeriodicAdvertisingData(int,android.bluetooth.le.AdvertiseData)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionConferenceExtendReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void updateSession(int,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,int,int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>"
  },
  {
    "helperCls": "android.app.AlarmManager",
    "implCls": "android.app.IAlarmManager",
    "inf": "android.app.IAlarmManager",
    "mtd": "<android.app.IAlarmManager: long getNextWakeFromIdleTime()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.os.IncidentManager",
    "implCls": "android.os.IIncidentManager",
    "inf": "android.os.IIncidentManager",
    "mtd": "<android.os.IIncidentManager: void reportIncident(android.os.IncidentReportArgs)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int getSupportedFeatures()>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: java.util.List getCallCapablePhoneAccounts(boolean,java.lang.String)>"
  },
  {
    "helperCls": "android.view.textservice.TextServicesManager",
    "implCls": "com.android.server.TextServicesManagerService",
    "inf": "com.android.internal.textservice.ITextServicesManager",
    "mtd": "<com.android.internal.textservice.ITextServicesManager: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(java.lang.String)>"
  },
  {
    "helperCls": "android.media.Ringtone",
    "implCls": "android.media.IRingtonePlayer",
    "inf": "android.media.IRingtonePlayer",
    "mtd": "<android.media.IRingtonePlayer: void setPlaybackProperties(android.os.IBinder,float,boolean)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsUtListener",
    "implCls": "com.android.ims.internal.IImsUtListener",
    "inf": "com.android.ims.internal.IImsUtListener",
    "mtd": "<com.android.ims.internal.IImsUtListener: void utConfigurationQueried(com.android.ims.internal.IImsUt,int,android.os.Bundle)>"
  },
  {
    "helperCls": "android.app.UiAutomation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: android.view.WindowAnimationFrameStats getWindowAnimationFrameStats()>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void setMode(int,int,java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothManager",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionHeld(android.telephony.ims.ImsCallProfile)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: java.lang.String getSeedAccountName()>"
  },
  {
    "helperCls": "android.se.omapi.Session",
    "implCls": "android.se.omapi.ISecureElementSession",
    "inf": "android.se.omapi.ISecureElementSession",
    "mtd": "<android.se.omapi.ISecureElementSession: byte[] getAtr()>"
  },
  {
    "helperCls": "android.app.VrManager",
    "implCls": "android.service.vr.IVrManager",
    "inf": "android.service.vr.IVrManager",
    "mtd": "<android.service.vr.IVrManager: void registerListener(android.service.vr.IVrStateCallbacks)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void wipeDataWithReason(int,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.media.session.MediaSession",
    "implCls": "android.media.session.ISession",
    "inf": "android.media.session.ISession",
    "mtd": "<android.media.session.ISession: void setActive(boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isOffloadedFilteringSupported()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isOffloadedFilteringSupported()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void lockNow(int,boolean)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: void updateStatusIcon(android.os.IBinder,java.lang.String,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: void clearAccounts(java.lang.String)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setBluetoothA2dpOn(boolean)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: boolean isPlaybackActive(android.media.IMediaRouterClient)>"
  },
  {
    "helperCls": "android.hardware.SerialManager",
    "implCls": "com.android.server.SerialService",
    "inf": "android.hardware.ISerialManager",
    "mtd": "<android.hardware.ISerialManager: java.lang.String[] getSerialPorts()>"
  },
  {
    "helperCls": "android.service.trust.TrustAgentService",
    "implCls": "android.service.trust.ITrustAgentServiceCallback",
    "inf": "android.service.trust.ITrustAgentServiceCallback",
    "mtd": "<android.service.trust.ITrustAgentServiceCallback: void grantTrust(java.lang.CharSequence,long,int)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller$Session",
    "implCls": "android.content.pm.IPackageInstallerSession",
    "inf": "android.content.pm.IPackageInstallerSession",
    "mtd": "<android.content.pm.IPackageInstallerSession: void write(java.lang.String,long,long,android.os.ParcelFileDescriptor)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: boolean removeAutomaticZenRule(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHearingAid",
    "implCls": "android.bluetooth.IBluetoothHearingAid",
    "inf": "android.bluetooth.IBluetoothHearingAid",
    "mtd": "<android.bluetooth.IBluetoothHearingAid: long getHiSyncId(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void updateSession(int,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,int,int)>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean setDefaultBrowserPackageName(java.lang.String,int)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void wallpaperOffsetsComplete(android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int startOperation(android.os.IBinder,int,int,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "inf": "com.android.internal.app.IVoiceInteractionManagerService",
    "mtd": "<com.android.internal.app.IVoiceInteractionManagerService: void finish(android.os.IBinder)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetHost",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: android.widget.RemoteViews getAppWidgetViews(java.lang.String,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.os.health.SystemHealthManager",
    "implCls": "com.android.server.am.BatteryStatsService",
    "inf": "com.android.internal.app.IBatteryStats",
    "mtd": "<com.android.internal.app.IBatteryStats: android.os.health.HealthStatsParceler takeUidSnapshot(int)>"
  },
  {
    "helperCls": "android.print.PrinterDiscoverySession",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: void stopPrinterDiscovery(android.print.IPrinterDiscoveryObserver,int)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void setMode(int,int,java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.hardware.location.ContextHubManager",
    "implCls": "com.android.server.location.ContextHubService",
    "inf": "android.hardware.location.IContextHubService",
    "mtd": "<android.hardware.location.IContextHubService: android.hardware.location.ContextHubInfo getContextHubInfo(int)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.ParcelFileDescriptor openProxyFileDescriptor(int,int,int)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionUpdateReceived(android.telephony.ims.ImsCallProfile)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: void addSessionTokensListener(android.media.ISessionTokensListener,int,java.lang.String)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: boolean isFieldClassificationEnabled()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: void registerSuggestionSpansForNotification(android.text.style.SuggestionSpan[])>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: android.os.IBinder getToken(android.os.IBinder)>"
  },
  {
    "helperCls": "android.os.DeviceIdleManager",
    "implCls": "com.android.server.DeviceIdleController$BinderService",
    "inf": "android.os.IDeviceIdleController",
    "mtd": "<android.os.IDeviceIdleController: java.lang.String[] getSystemPowerWhitelistExceptIdle()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void toggleSoftInput(int,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.os._$$Lambda$StrictMode$AndroidBlockGuardPolicy$9nBulCQKaMajrWr41SB7f7YRT1I",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: void showStrictModeViolation(boolean)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: boolean requestPinAppWidget(java.lang.String,android.content.ComponentName,android.os.Bundle,android.content.IntentSender)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionMergeFailed(android.telephony.ims.ImsReasonInfo)>"
  },
  {
    "helperCls": "android.net.ip.InterfaceController",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)>"
  },
  {
    "helperCls": "android.hardware.location.GeofenceHardwareImpl",
    "implCls": "android.location.IFusedGeofenceHardware",
    "inf": "android.location.IFusedGeofenceHardware",
    "mtd": "<android.location.IFusedGeofenceHardware: boolean isSupported()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: java.util.List getActiveRecordingConfigurations()>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isInputMethodPermittedByAdmin(android.content.ComponentName,java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: boolean setWifiEnabled(java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: void dispatchMediaKeyEvent(java.lang.String,boolean,android.view.KeyEvent,boolean)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Session",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void timeShiftResume(android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.printservice.PrintDocument",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: void writePrintJobData(android.os.ParcelFileDescriptor,android.print.PrintJobId)>"
  },
  {
    "helperCls": "android.hardware.ConsumerIrManager",
    "implCls": "com.android.server.ConsumerIrService",
    "inf": "android.hardware.IConsumerIrService",
    "mtd": "<android.hardware.IConsumerIrService: void transmit(java.lang.String,int,int[])>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean removeUser(android.content.ComponentName,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: void setZenMode(int,android.net.Uri,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setOrganizationColorForUser(int,int)>"
  },
  {
    "helperCls": "android.print.PrintManager",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: android.graphics.drawable.Icon getCustomPrinterIcon(android.print.PrinterId,int)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int setBluetoothA2dpDeviceConnectionStateSuppressNoisyIntent(android.bluetooth.BluetoothDevice,int,int,boolean,int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMapClient",
    "implCls": "android.bluetooth.IBluetoothMapClient",
    "inf": "android.bluetooth.IBluetoothMapClient",
    "mtd": "<android.bluetooth.IBluetoothMapClient: java.util.List getDevicesMatchingConnectionStates(int[])>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGattServer",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void unregisterServer(int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: void setNotificationListenerAccessGranted(android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int startOperation(android.os.IBinder,int,int,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setKeepUninstalledPackages(android.content.ComponentName,java.lang.String,java.util.List)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: boolean connectAudio()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: void setInputMethod(android.os.IBinder,java.lang.String)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetHost",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: android.os.Bundle getAppWidgetOptions(java.lang.String,int)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void startConference(java.lang.String[],android.telephony.ims.ImsCallProfile)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidDevice",
    "implCls": "android.bluetooth.IBluetoothHidDevice",
    "inf": "android.bluetooth.IBluetoothHidDevice",
    "mtd": "<android.bluetooth.IBluetoothHidDevice: java.lang.String getUserAppName()>"
  },
  {
    "helperCls": "android.net.NetworkPolicyManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: void addUidPolicy(int,int)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>"
  },
  {
    "helperCls": "android.net.ip.IpClient",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void disableIpv6(java.lang.String)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean isUserUnlocked(int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean isPackageSuspendedForUser(java.lang.String,int)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: boolean isNetworkSupported(int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void finishSelf(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: boolean isCommissioned()>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: java.lang.String[] getMobileIfaces()>"
  },
  {
    "helperCls": "android.telecom.RemoteConference",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void disconnect(java.lang.String,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: android.os.IBinder getToken(android.os.IBinder)>"
  },
  {
    "helperCls": "android.os.UpdateEngine",
    "implCls": "android.os.IUpdateEngine",
    "inf": "android.os.IUpdateEngine",
    "mtd": "<android.os.IUpdateEngine: void applyPayload(java.lang.String,long,long,java.lang.String[])>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: boolean isConfirmationPromptSupported()>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.Session",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: java.lang.String[] getTetherableUsbRegexs()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void setAppCallback(android.nfc.IAppCallback)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.CardEmulation",
    "implCls": "android.nfc.INfcCardEmulation",
    "inf": "android.nfc.INfcCardEmulation",
    "mtd": "<android.nfc.INfcCardEmulation: java.util.List getServices(int,java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.CardEmulation",
    "implCls": "android.nfc.INfcCardEmulation",
    "inf": "android.nfc.INfcCardEmulation",
    "mtd": "<android.nfc.INfcCardEmulation: java.util.List getServices(int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: void unregisterWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int)>"
  },
  {
    "helperCls": "android.telecom.VideoCallImpl",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void addVideoCallback(android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.VrManager",
    "implCls": "android.service.vr.IVrManager",
    "inf": "android.service.vr.IVrManager",
    "mtd": "<android.service.vr.IVrManager: void setAndBindCompositor(java.lang.String)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void answerCall(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetHost",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: void deleteHost(java.lang.String,int)>"
  },
  {
    "helperCls": "android.hardware.radio.RadioManager",
    "implCls": "com.android.server.broadcastradio.BroadcastRadioService$ServiceImpl",
    "inf": "android.hardware.radio.IRadioService",
    "mtd": "<android.hardware.radio.IRadioService: android.hardware.radio.ICloseHandle addAnnouncementListener(int[],android.hardware.radio.IAnnouncementListener)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: android.bluetooth.IBluetoothSocketManager getSocketManager()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.util.List getPermittedAccessibilityServicesForUser(int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.app.AlarmManager",
    "implCls": "android.app.IAlarmManager",
    "inf": "android.app.IAlarmManager",
    "mtd": "<android.app.IAlarmManager: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>"
  },
  {
    "helperCls": "android.security.keystore.recovery.RecoveryController",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: java.lang.String getKey(java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.os.Bundle getApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: int addAccessibilityInteractionConnection(android.view.IWindow,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: void phoneStateChanged(int,int,int,java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.net.IpSecManager",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: android.net.IpSecUdpEncapResponse openUdpEncapsulationSocket(int,android.os.IBinder)>"
  },
  {
    "helperCls": "android.telephony.ims.stub.ImsRegistrationImplBase",
    "implCls": "android.telephony.ims.aidl.IImsRegistration",
    "inf": "android.telephony.ims.aidl.IImsRegistration",
    "mtd": "<android.telephony.ims.aidl.IImsRegistration: void removeRegistrationCallback(android.telephony.ims.aidl.IImsRegistrationCallback)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean removeCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: java.lang.String getDefaultBrowserPackageName(int)>"
  },
  {
    "helperCls": "android.os.PowerManager",
    "implCls": "com.android.server.power.PowerManagerService$BinderService",
    "inf": "android.os.IPowerManager",
    "mtd": "<android.os.IPowerManager: boolean isPowerSaveMode()>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: android.bluetooth.IBluetoothSocketManager getSocketManager()>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int updateOrRestartSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,int,int,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean sdpSearch(android.bluetooth.BluetoothDevice,android.os.ParcelUuid)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getInstalledPackages(int,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void toggleSoftInput(int,int)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void hide()>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int unlock(int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: void cancelMissedCallsNotification(java.lang.String)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: void incrementOperationCount(int,int,int)>"
  },
  {
    "helperCls": "android.hardware.camera2.impl.ICameraDeviceUserWrapper",
    "implCls": "android.hardware.camera2.ICameraDeviceUser",
    "inf": "android.hardware.camera2.ICameraDeviceUser",
    "mtd": "<android.hardware.camera2.ICameraDeviceUser: int createStream(android.hardware.camera2.params.OutputConfiguration)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void setAppCallback(android.nfc.IAppCallback)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: boolean getAudioRouteAllowed(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: android.os.Messenger getWifiServiceMessenger(java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getInstalledApplications(int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMapClient",
    "implCls": "android.bluetooth.IBluetoothMapClient",
    "inf": "android.bluetooth.IBluetoothMapClient",
    "mtd": "<android.bluetooth.IBluetoothMapClient: boolean setPriority(android.bluetooth.BluetoothDevice,int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: boolean isPlaybackActive(android.media.IMediaRouterClient)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: java.lang.CharSequence getHarmfulAppWarning(java.lang.String,int)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: android.security.keymaster.OperationResult update(android.os.IBinder,android.security.keymaster.KeymasterArguments,byte[])>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: boolean disable(java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: boolean startShortcut(java.lang.String,java.lang.String,java.lang.String,android.graphics.Rect,android.os.Bundle,int)>"
  },
  {
    "helperCls": "android.hardware.camera2.impl.ICameraDeviceUserWrapper",
    "implCls": "android.hardware.camera2.ICameraDeviceUser",
    "inf": "android.hardware.camera2.ICameraDeviceUser",
    "mtd": "<android.hardware.camera2.ICameraDeviceUser: long flush()>"
  },
  {
    "helperCls": "android.net.wifi.aware.WifiAwareManager",
    "implCls": "com.android.server.wifi.aware.WifiAwareServiceImpl",
    "inf": "android.net.wifi.aware.IWifiAwareManager",
    "mtd": "<android.net.wifi.aware.IWifiAwareManager: void disconnect(int,android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setBackupServiceEnabled(android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.util.List getKeepUninstalledPackages(android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isHdmiSystemAudioSupported()>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int noteProxyOperation(int,java.lang.String,int,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: boolean holdCall(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: void showInCallScreen(boolean,java.lang.String)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean outOfMemory(android.view.IWindow)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.lang.String[] setPackagesSuspended(android.content.ComponentName,java.lang.String,java.lang.String[],boolean)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: java.lang.String getSharedSystemSharedLibraryPackageName()>"
  },
  {
    "helperCls": "android.os.BatteryManager",
    "implCls": "com.android.server.am.BatteryStatsService",
    "inf": "com.android.internal.app.IBatteryStats",
    "mtd": "<com.android.internal.app.IBatteryStats: long computeChargeTimeRemaining()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getCurrentFailedPasswordAttempts(int,boolean)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "android.view.autofill.IAutoFillManagerClient",
    "inf": "android.view.autofill.IAutoFillManagerClient",
    "mtd": "<android.view.autofill.IAutoFillManagerClient: void notifyNoFillUi(int,android.view.autofill.AutofillId,int)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void registerCallback(android.media.tv.ITvInputManagerCallback,int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void updateSession(int,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,int,int)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: long getmtime(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void adjustStreamVolume(int,int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: int getMaxShortcutCountPerActivity(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void setParentalControlsEnabled(boolean,int)>"
  },
  {
    "helperCls": "android.os.UpdateEngine",
    "implCls": "android.os.IUpdateEngine",
    "inf": "android.os.IUpdateEngine",
    "mtd": "<android.os.IUpdateEngine: boolean unbind(android.os.IUpdateEngineCallback)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void stopLocalOnlyHotspot()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void writeCharacteristic(int,java.lang.String,int,int,int,byte[])>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.service.wallpaper.IWallpaperConnection",
    "inf": "android.service.wallpaper.IWallpaperConnection",
    "mtd": "<android.service.wallpaper.IWallpaperConnection: void onWallpaperColorsChanged(android.app.WallpaperColors)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void updateSession(int,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,int,int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: java.lang.String[] getTetheredDhcpRanges()>"
  },
  {
    "helperCls": "android.app.backup.RestoreSession",
    "implCls": "android.app.backup.IRestoreSession",
    "inf": "android.app.backup.IRestoreSession",
    "mtd": "<android.app.backup.IRestoreSession: int restoreAll(long,android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.os.BatteryManager",
    "implCls": "com.android.server.am.BatteryStatsService",
    "inf": "com.android.internal.app.IBatteryStats",
    "mtd": "<com.android.internal.app.IBatteryStats: boolean isCharging()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.lang.String[] getLockTaskPackages(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkInfo getActiveNetworkInfoForUid(int,boolean)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void unholdCall(java.lang.String)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: long getUidStats(int,int)>"
  },
  {
    "helperCls": "android.app.StatsManager",
    "implCls": "android.os.IStatsManager",
    "inf": "android.os.IStatsManager",
    "mtd": "<android.os.IStatsManager: void removeDataFetchOperation(long,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isLe2MPhySupported()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int getSupportedFeatures()>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: java.lang.String getTag()>"
  },
  {
    "helperCls": "android.telephony.ims.feature.MmTelFeature",
    "implCls": "android.telephony.ims.aidl.IImsMmTelListener",
    "inf": "android.telephony.ims.aidl.IImsMmTelListener",
    "mtd": "<android.telephony.ims.aidl.IImsMmTelListener: void onIncomingCall(com.android.ims.internal.IImsCallSession,android.os.Bundle)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: int[] getProfileIds(int,boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void addCrossProfileIntentFilter(android.content.ComponentName,android.content.IntentFilter,int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.content.pm.UserInfo getProfileParent(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setLockTaskFeatures(android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.print.PrintManager$PrintDocumentAdapterDelegate",
    "implCls": "android.print.IPrintDocumentAdapterObserver",
    "inf": "android.print.IPrintDocumentAdapterObserver",
    "mtd": "<android.print.IPrintDocumentAdapterObserver: void onDestroy()>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.ProxyInfo getProxyForNetwork(android.net.Network)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void deflectCall(java.lang.String,android.net.Uri)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.ComponentName getInstantAppResolverSettingsComponent()>"
  },
  {
    "helperCls": "android.nfc.dta.NfcDta",
    "implCls": "android.nfc.INfcDta",
    "inf": "android.nfc.INfcDta",
    "mtd": "<android.nfc.INfcDta: void enableDta()>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: java.lang.String[] getMobileIfaces()>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: boolean requestPinAppWidget(java.lang.String,android.content.ComponentName,android.os.Bundle,android.content.IntentSender)>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void finishSelf(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void finishSelf(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void updateSession(int,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,int,int)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetHost",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: android.os.Bundle getAppWidgetOptions(java.lang.String,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.media.session.MediaSession",
    "implCls": "android.media.session.ISession",
    "inf": "android.media.session.ISession",
    "mtd": "<android.media.session.ISession: void setExtras(android.os.Bundle)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void remove(android.view.IWindow)>"
  },
  {
    "helperCls": "android.hardware.location.GeofenceHardware",
    "implCls": "android.hardware.location.IGeofenceHardware",
    "inf": "android.hardware.location.IGeofenceHardware",
    "mtd": "<android.hardware.location.IGeofenceHardware: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void setHasCallback(int,int,boolean)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: boolean isWallpaperSupported(java.lang.String)>"
  },
  {
    "helperCls": "android.telecom.VideoCallImpl",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void setZoom(float)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.hardware.Camera",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>"
  },
  {
    "helperCls": "android.app.UiModeManager",
    "implCls": "android.app.IUiModeManager$Stub",
    "inf": "android.app.IUiModeManager",
    "mtd": "<android.app.IUiModeManager: void enableCarMode(int)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionRemoveParticipantsRequestDelivered()>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getRemoteClass(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void sendCallEvent(java.lang.String,java.lang.String,int,android.os.Bundle)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getOrganizationColorForUser(int)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void remove(android.view.IWindow)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: long getTotalStats(int)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void sendRttModifyRequest(android.telephony.ims.ImsCallProfile)>"
  },
  {
    "helperCls": "android.os.UpdateEngine",
    "implCls": "android.os.IUpdateEngine",
    "inf": "android.os.IUpdateEngine",
    "mtd": "<android.os.IUpdateEngine: boolean bind(android.os.IUpdateEngineCallback)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void stopWatchLocalOnlyHotspot()>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothPbapClient",
    "implCls": "android.bluetooth.IBluetoothPbapClient",
    "inf": "android.bluetooth.IBluetoothPbapClient",
    "mtd": "<android.bluetooth.IBluetoothPbapClient: int getConnectionState(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dp",
    "implCls": "android.bluetooth.IBluetoothA2dp",
    "inf": "android.bluetooth.IBluetoothA2dp",
    "mtd": "<android.bluetooth.IBluetoothA2dp: boolean isAvrcpAbsoluteVolumeSupported()>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: java.lang.String getDefaultFieldClassificationAlgorithm()>"
  },
  {
    "helperCls": "android.net.NetworkWatchlistManager",
    "implCls": "com.android.server.net.watchlist.NetworkWatchlistService",
    "inf": "com.android.internal.net.INetworkWatchlistManager",
    "mtd": "<com.android.internal.net.INetworkWatchlistManager: byte[] getWatchlistConfigHash()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>"
  },
  {
    "helperCls": "android.media.soundtrigger.SoundTriggerManager",
    "implCls": "com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub",
    "inf": "com.android.internal.app.ISoundTriggerService",
    "mtd": "<com.android.internal.app.ISoundTriggerService: int loadGenericSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)>"
  },
  {
    "helperCls": "android.app.KeyguardManager",
    "implCls": "android.app.trust.ITrustManager",
    "inf": "android.app.trust.ITrustManager",
    "mtd": "<android.app.trust.ITrustManager: boolean isDeviceSecure(int)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller$Session",
    "implCls": "android.content.pm.IPackageInstallerSession",
    "inf": "android.content.pm.IPackageInstallerSession",
    "mtd": "<android.content.pm.IPackageInstallerSession: void transfer(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void clientSetPreferredPhy(int,java.lang.String,int,int,int)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int startOperation(android.os.IBinder,int,int,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.hardware.camera2.impl.ICameraDeviceUserWrapper",
    "implCls": "android.hardware.camera2.ICameraDeviceUser",
    "inf": "android.hardware.camera2.ICameraDeviceUser",
    "mtd": "<android.hardware.camera2.ICameraDeviceUser: void prepare(int)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration,int,java.lang.String)>"
  },
  {
    "helperCls": "android.telecom.RemoteConference",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void swapConference(java.lang.String,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: void removeAllDynamicShortcuts(java.lang.String,int)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: java.util.List getSessions(android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionHandover(int,int,android.telephony.ims.ImsReasonInfo)>"
  },
  {
    "helperCls": "android.security.keystore.recovery.RecoveryController",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: java.util.Map getRecoveryStatus()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int installExistingPackageAsUser(java.lang.String,int,int,int)>"
  },
  {
    "helperCls": "android.app.usage.UsageStatsManager",
    "implCls": "com.android.server.usage.UsageStatsService$BinderService",
    "inf": "android.app.usage.IUsageStatsManager",
    "mtd": "<android.app.usage.IUsageStatsManager: void setAppStandbyBuckets(android.content.pm.ParceledListSlice,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getProfileWithMinimumFailedPasswordsForWipe(int,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void readRemoteRssi(int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: long getRequiredStrongAuthTimeout(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void stopWifiDisplayScan()>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void setUserRestriction(int,boolean,android.os.IBinder,int,java.lang.String[])>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void notifyUserOfApBandConversion(java.lang.String)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void setTransparentRegion(android.view.IWindow,android.graphics.Region)>"
  },
  {
    "helperCls": "android.service.autofill.SaveCallback",
    "implCls": "android.service.autofill.ISaveCallback",
    "inf": "android.service.autofill.ISaveCallback",
    "mtd": "<android.service.autofill.ISaveCallback: void onSuccess(android.content.IntentSender)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean installKeyPair(android.content.ComponentName,java.lang.String,byte[],byte[],byte[],java.lang.String,boolean,boolean)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: android.app.PendingIntent getLaunchPendingIntent()>"
  },
  {
    "helperCls": "android.service.oemlock.OemLockManager",
    "implCls": "android.service.oemlock.IOemLockService",
    "inf": "android.service.oemlock.IOemLockService",
    "mtd": "<android.service.oemlock.IOemLockService: boolean isOemUnlockAllowedByCarrier()>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller",
    "implCls": "android.content.pm.IPackageInstaller",
    "inf": "android.content.pm.IPackageInstaller",
    "mtd": "<android.content.pm.IPackageInstaller: void unregisterCallback(android.content.pm.IPackageInstallerCallback)>"
  },
  {
    "helperCls": "android.hardware.Camera",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int checkAudioOperation(int,int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputContext",
    "inf": "com.android.internal.view.IInputContext",
    "mtd": "<com.android.internal.view.IInputContext: void finishComposingText()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.VolumeInfo[] getVolumes(int)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: boolean startShortcut(java.lang.String,java.lang.String,java.lang.String,android.graphics.Rect,android.os.Bundle,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void updateSession(int,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean setBluetoothClass(android.bluetooth.BluetoothClass)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: boolean disconnect(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: void clearWallpaper(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: long getPasswordExpiration(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: int getLastTetherError(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: java.lang.String grant(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAvrcpController",
    "implCls": "android.bluetooth.IBluetoothAvrcpController",
    "inf": "android.bluetooth.IBluetoothAvrcpController",
    "mtd": "<android.bluetooth.IBluetoothAvrcpController: java.util.List getConnectedDevices()>"
  },
  {
    "helperCls": "android.app.ActivityManager$AppTask",
    "implCls": "android.app.IAppTask",
    "inf": "android.app.IAppTask",
    "mtd": "<android.app.IAppTask: void moveToFront()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient,int)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isProvisioningAllowed(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: void showStrictModeViolation(boolean)>"
  },
  {
    "helperCls": "android.app.slice.SliceManager",
    "implCls": "com.android.server.slice.SliceManagerService",
    "inf": "android.app.slice.ISliceManager",
    "mtd": "<android.app.slice.ISliceManager: void pinSlice(java.lang.String,android.net.Uri,android.app.slice.SliceSpec[],android.os.IBinder)>"
  },
  {
    "helperCls": "android.telecom.VideoCallImpl",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void sendSessionModifyResponse(android.telecom.VideoProfile)>"
  },
  {
    "helperCls": "android.se.omapi.Reader",
    "implCls": "android.se.omapi.ISecureElementReader",
    "inf": "android.se.omapi.ISecureElementReader",
    "mtd": "<android.se.omapi.ISecureElementReader: android.se.omapi.ISecureElementSession openSession()>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void setInTouchMode(boolean)>"
  },
  {
    "helperCls": "android.media.session.MediaSession",
    "implCls": "android.media.session.ISession",
    "inf": "android.media.session.ISession",
    "mtd": "<android.media.session.ISession: void setQueueTitle(java.lang.CharSequence)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: void enableInputDevice(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isUninstallInQueue(java.lang.String)>"
  },
  {
    "helperCls": "android.net.NetworkScoreManager",
    "implCls": "com.android.server.NetworkScoreService",
    "inf": "android.net.INetworkScoreService",
    "mtd": "<android.net.INetworkScoreService: boolean clearScores()>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: void removeSessionsListener(android.media.session.IActiveSessionsListener)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean switchToNextInputMethod(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.media.MediaScannerConnection",
    "implCls": "android.media.IMediaScannerService",
    "inf": "android.media.IMediaScannerService",
    "mtd": "<android.media.IMediaScannerService: void requestScanFile(java.lang.String,java.lang.String,android.media.IMediaScannerListener)>"
  },
  {
    "helperCls": "android.provider.Settings$Secure",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.hardware.Camera",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>"
  },
  {
    "helperCls": "android.app.KeyguardManager",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setMasterVolumeMuted(android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: java.util.List getSessionTokens(boolean,boolean,java.lang.String)>"
  },
  {
    "helperCls": "android.app.StatsManager",
    "implCls": "android.os.IStatsManager",
    "inf": "android.os.IStatsManager",
    "mtd": "<android.os.IStatsManager: void unsetBroadcastSubscriber(long,long,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void wipeDataWithReason(int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void finishSession(int,int)>"
  },
  {
    "helperCls": "android.app.slice.SliceManager",
    "implCls": "com.android.server.slice.SliceManagerService",
    "inf": "android.app.slice.ISliceManager",
    "mtd": "<android.app.slice.ISliceManager: int checkSlicePermission(android.net.Uri,java.lang.String,int,int,java.lang.String[])>"
  },
  {
    "helperCls": "android.hardware.location.ContextHubManager",
    "implCls": "com.android.server.location.ContextHubService",
    "inf": "android.hardware.location.IContextHubService",
    "mtd": "<android.hardware.location.IContextHubService: void disableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>"
  },
  {
    "helperCls": "android.net.NetworkWatchlistManager",
    "implCls": "com.android.server.net.watchlist.NetworkWatchlistService",
    "inf": "com.android.internal.net.INetworkWatchlistManager",
    "mtd": "<com.android.internal.net.INetworkWatchlistManager: void reloadWatchlist()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: boolean setPriority(android.bluetooth.BluetoothDevice,int)>"
  },
  {
    "helperCls": "android.app.usage.StorageStatsManager",
    "implCls": "com.android.server.usage.StorageStatsService",
    "inf": "android.app.usage.IStorageStatsManager",
    "mtd": "<android.app.usage.IStorageStatsManager: boolean isQuotaSupported(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: boolean isHardwareDetected(long,java.lang.String)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int importKey(java.lang.String,android.security.keymaster.KeymasterArguments,int,byte[],int,int,android.security.keymaster.KeyCharacteristics)>"
  },
  {
    "helperCls": "android.nfc.dta.NfcDta",
    "implCls": "android.nfc.INfcDta",
    "inf": "android.nfc.INfcDta",
    "mtd": "<android.nfc.INfcDta: void disableDta()>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: int getCredentialOwnerProfile(int)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.util.MergedConfiguration,android.view.Surface)>"
  },
  {
    "helperCls": "android.app.UiAutomationConnection",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: int getDefaultDisplayRotation()>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: void rename(int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.UiAutomation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: boolean injectInputEvent(android.view.InputEvent,boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setPermissionPolicy(android.content.ComponentName,java.lang.String,int)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void setVirtualDisplaySurface(android.hardware.display.IVirtualDisplayCallback,android.view.Surface)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothManager",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.service.voice.AlwaysOnHotwordDetector",
    "implCls": "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "inf": "com.android.internal.app.IVoiceInteractionManagerService",
    "mtd": "<com.android.internal.app.IVoiceInteractionManagerService: int stopRecognition(android.service.voice.IVoiceInteractionService,int,android.hardware.soundtrigger.IRecognitionStatusCallback)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void deflect(java.lang.String)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: boolean isEnabled()>"
  },
  {
    "helperCls": "android.net.EthernetManager",
    "implCls": "com.android.server.ethernet.EthernetServiceImpl",
    "inf": "android.net.IEthernetManager",
    "mtd": "<android.net.IEthernetManager: void addListener(android.net.IEthernetServiceListener)>"
  },
  {
    "helperCls": "android.app.trust.TrustManager",
    "implCls": "android.app.trust.ITrustManager",
    "inf": "android.app.trust.ITrustManager",
    "mtd": "<android.app.trust.ITrustManager: void clearAllFingerprints()>"
  },
  {
    "helperCls": "android.os.PowerManager",
    "implCls": "com.android.server.power.PowerManagerService$BinderService",
    "inf": "android.os.IPowerManager",
    "mtd": "<android.os.IPowerManager: void goToSleep(long,int,int)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: android.accounts.Account[] getAccounts(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: java.lang.CharSequence getQueueTitle()>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: java.util.List getAvailableTvStreamConfigList(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void registerCallback(android.hardware.display.IDisplayManagerCallback)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: int[] getDisplayIds()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.VolumeInfo[] getVolumes(int)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void startBluetoothSco(android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.content.ComponentName getProfileOwner(int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.telephony.SubscriptionManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: android.telephony.SubscriptionPlan[] getSubscriptionPlans(int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int)>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: void cancelAuthentication(android.os.IBinder,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: android.hardware.input.KeyboardLayout[] getKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean setKeyguardDisabled(android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.content.pm.UserInfo getPrimaryUser()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setPasswordHistoryLength(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void enableSystemApp(android.content.ComponentName,java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.location.ContextHubManager",
    "implCls": "com.android.server.location.ContextHubService",
    "inf": "android.hardware.location.IContextHubService",
    "mtd": "<android.hardware.location.IContextHubService: int[] getContextHubHandles()>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.ProxyInfo getProxyForNetwork(android.net.Network)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int ungrant(java.lang.String,int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setBluetoothA2dpOn(boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: android.bluetooth.IBluetoothSocketManager getSocketManager()>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int attestDeviceIds(android.security.keymaster.KeymasterArguments,android.security.keymaster.KeymasterCertificateChain)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.content.pm.AppsQueryHelper",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getInstalledApplications(int,int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getStreamMaxVolume(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.lang.String getAlwaysOnVpnPackage(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.content.pm.AppsQueryHelper",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.view.textservice.TextServicesManager",
    "implCls": "com.android.server.TextServicesManagerService",
    "inf": "com.android.internal.textservice.ITextServicesManager",
    "mtd": "<com.android.internal.textservice.ITextServicesManager: boolean isSpellCheckerEnabled()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.util.List getActiveAdmins(int)>"
  },
  {
    "helperCls": "android.speech.RecognitionService$Callback",
    "implCls": "android.speech.IRecognitionListener",
    "inf": "android.speech.IRecognitionListener",
    "mtd": "<android.speech.IRecognitionListener: void onBufferReceived(byte[])>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>"
  },
  {
    "helperCls": "android.net.sip.SipManager",
    "implCls": "com.android.server.sip.SipService",
    "inf": "android.net.sip.ISipService",
    "mtd": "<android.net.sip.ISipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void allocateBytes(java.lang.String,long,int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void endReliableWrite(int,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: java.lang.String[] getLinkAddresses()>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: void acceptRingingCallWithVideoState(java.lang.String,int)>"
  },
  {
    "helperCls": "android.hardware.usb.UsbManager",
    "implCls": "com.android.server.usb.UsbService",
    "inf": "android.hardware.usb.IUsbManager",
    "mtd": "<android.hardware.usb.IUsbManager: long getCurrentFunctions()>"
  },
  {
    "helperCls": "android.hardware.camera2.impl.ICameraDeviceUserWrapper",
    "implCls": "android.hardware.camera2.ICameraDeviceUser",
    "inf": "android.hardware.camera2.ICameraDeviceUser",
    "mtd": "<android.hardware.camera2.ICameraDeviceUser: void waitUntilIdle()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: boolean startSoftAp(android.net.wifi.WifiConfiguration)>"
  },
  {
    "helperCls": "android.net.IpSecManager$SecurityParameterIndex",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: void releaseSecurityParameterIndex(int)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothScoOn()>"
  },
  {
    "helperCls": "android.database.BulkCursorToCursorAdaptor",
    "implCls": "android.database.IBulkCursor",
    "inf": "android.database.IBulkCursor",
    "mtd": "<android.database.IBulkCursor: void close()>"
  },
  {
    "helperCls": "android.net.IpSecManager",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: android.net.IpSecTunnelInterfaceResponse createTunnelInterface(java.lang.String,java.lang.String,android.net.Network,android.os.IBinder,java.lang.String)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int noteProxyOperation(int,java.lang.String,int,java.lang.String)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,java.lang.String,int,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: int getState()>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: android.content.pm.ParceledListSlice getManifestShortcuts(java.lang.String,int)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: int getGnssYearOfHardware()>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void stopRtt(java.lang.String,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: java.lang.String getCallId()>"
  },
  {
    "helperCls": "android.telecom.VideoCallImpl",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void setPreviewSurface(android.view.Surface)>"
  },
  {
    "helperCls": "android.media.browse.MediaBrowser",
    "implCls": "android.service.media.IMediaBrowserService",
    "inf": "android.service.media.IMediaBrowserService",
    "mtd": "<android.service.media.IMediaBrowserService: void addSubscriptionDeprecated(java.lang.String,android.service.media.IMediaBrowserServiceCallbacks)>"
  },
  {
    "helperCls": "android.app.backup.RestoreSession",
    "implCls": "android.app.backup.IRestoreSession",
    "inf": "android.app.backup.IRestoreSession",
    "mtd": "<android.app.backup.IRestoreSession: int restoreSome(long,android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor,java.lang.String[])>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.media.soundtrigger.SoundTriggerManager",
    "implCls": "com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub",
    "inf": "com.android.internal.app.ISoundTriggerService",
    "mtd": "<com.android.internal.app.ISoundTriggerService: android.hardware.soundtrigger.SoundTrigger$GenericSoundModel getSoundModel(android.os.ParcelUuid)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsUtListener",
    "implCls": "com.android.ims.internal.IImsUtListener",
    "inf": "com.android.ims.internal.IImsUtListener",
    "mtd": "<com.android.ims.internal.IImsUtListener: void utConfigurationUpdateFailed(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsReasonInfo)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGattServer",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void addService(int,android.bluetooth.BluetoothGattService)>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection$VideoProvider",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void requestCameraCapabilities()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean switchToPreviousInputMethod(android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isActivePasswordSufficient(int,boolean)>"
  },
  {
    "helperCls": "android.telecom.RemoteConference",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void hold(java.lang.String,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.media.Ringtone",
    "implCls": "android.media.IRingtonePlayer",
    "inf": "android.media.IRingtonePlayer",
    "mtd": "<android.media.IRingtonePlayer: void setPlaybackProperties(android.os.IBinder,float,boolean)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: java.lang.String getCaptivePortalServerUrl()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: java.util.List getConnectedDevices()>"
  },
  {
    "helperCls": "android.app.StatsManager",
    "implCls": "android.os.IStatsManager",
    "inf": "android.os.IStatsManager",
    "mtd": "<android.os.IStatsManager: void setBroadcastSubscriber(long,long,android.os.IBinder,java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.nfc.cardemulation.NfcFCardEmulation",
    "implCls": "android.nfc.INfcFCardEmulation",
    "inf": "android.nfc.INfcFCardEmulation",
    "mtd": "<android.nfc.INfcFCardEmulation: java.lang.String getNfcid2ForService(int,android.content.ComponentName)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.NfcFCardEmulation",
    "implCls": "android.nfc.INfcFCardEmulation",
    "inf": "android.nfc.INfcFCardEmulation",
    "mtd": "<android.nfc.INfcFCardEmulation: java.lang.String getNfcid2ForService(int,android.content.ComponentName)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean setName(java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void clearDeviceOwner(java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.AlarmManager",
    "implCls": "android.app.IAlarmManager",
    "inf": "android.app.IAlarmManager",
    "mtd": "<android.app.IAlarmManager: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean hasUserRestriction(java.lang.String,int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean hasUserRestriction(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void notifyPendingSystemUpdate(android.app.admin.SystemUpdateInfo)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: java.lang.String[] list(java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dpSink",
    "implCls": "android.bluetooth.IBluetoothA2dpSink",
    "inf": "android.bluetooth.IBluetoothA2dpSink",
    "mtd": "<android.bluetooth.IBluetoothA2dpSink: android.bluetooth.BluetoothAudioConfig getAudioConfig(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothSap",
    "implCls": "android.bluetooth.IBluetoothSap",
    "inf": "android.bluetooth.IBluetoothSap",
    "mtd": "<android.bluetooth.IBluetoothSap: int getState()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void addNfcUnlockHandler(android.nfc.INfcUnlockHandler,int[])>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: java.lang.String getUserAccount(int)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: java.util.List getInstalledAccessibilityServiceList(int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean isInputMethodPickerShownForTest()>"
  },
  {
    "helperCls": "android.print.PrinterDiscoverySession",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: void stopPrinterStateTracking(android.print.PrinterId,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.net.metrics.IpConnectivityLog",
    "implCls": "com.android.server.connectivity.IpConnectivityMetrics$Impl",
    "inf": "android.net.IIpConnectivityMetrics",
    "mtd": "<android.net.IIpConnectivityMetrics: int logEvent(android.net.ConnectivityMetricsEvent)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothPbap",
    "implCls": "android.bluetooth.IBluetoothPbap",
    "inf": "android.bluetooth.IBluetoothPbap",
    "mtd": "<android.bluetooth.IBluetoothPbap: java.util.List getConnectedDevices()>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: void registerCallbackListener(java.lang.String,android.media.session.ISessionControllerCallback)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.lang.String getProfileOwnerName(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getLongSupportMessageForUser(android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: boolean isNotificationListenerAccessGranted(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller",
    "implCls": "android.content.pm.IPackageInstaller",
    "inf": "android.content.pm.IPackageInstaller",
    "mtd": "<android.content.pm.IPackageInstaller: void unregisterCallback(android.content.pm.IPackageInstallerCallback)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void mute(boolean)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: boolean disableNetwork(int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void removeOnPermissionsChangeListener(android.content.pm.IOnPermissionsChangeListener)>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void startRtt(java.lang.String,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentReceivers(android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMapClient",
    "implCls": "android.bluetooth.IBluetoothMapClient",
    "inf": "android.bluetooth.IBluetoothMapClient",
    "mtd": "<android.bluetooth.IBluetoothMapClient: int getConnectionState(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.hardware.location.GeofenceHardwareImpl",
    "implCls": "android.location.IGpsGeofenceHardware",
    "inf": "android.location.IGpsGeofenceHardware",
    "mtd": "<android.location.IGpsGeofenceHardware: boolean isHardwareGeofenceSupported()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: java.lang.String[] getPackagesForUid(int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: java.lang.String[] getPackagesForUid(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.net.NetworkScoreManager",
    "implCls": "com.android.server.NetworkScoreService",
    "inf": "android.net.INetworkScoreService",
    "mtd": "<android.net.INetworkScoreService: void disableScoring()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: boolean isBleScanAlwaysAvailable()>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.StatsManager",
    "implCls": "android.os.IStatsManager",
    "inf": "android.os.IStatsManager",
    "mtd": "<android.os.IStatsManager: void setDataFetchOperation(long,android.os.IBinder,java.lang.String)>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: void showStrictModeViolation(boolean)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.os.Bundle getUserRestrictions(int)>"
  },
  {
    "helperCls": "android.print.PrintManager",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int,int)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.hardware.display.BrightnessConfiguration getBrightnessConfigurationForUser(int)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.content.pm.UserInfo getUserInfo(int)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void addOnMeshPrefix(android.net.IpPrefix,int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: boolean requestRouteToHostAddress(int,byte[])>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean markGuestForDeletion(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setPasswordMinimumLength(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.NfcFCardEmulation",
    "implCls": "android.nfc.INfcFCardEmulation",
    "inf": "android.nfc.INfcFCardEmulation",
    "mtd": "<android.nfc.INfcFCardEmulation: java.lang.String getSystemCodeForService(int,android.content.ComponentName)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.NfcFCardEmulation",
    "implCls": "android.nfc.INfcFCardEmulation",
    "inf": "android.nfc.INfcFCardEmulation",
    "mtd": "<android.nfc.INfcFCardEmulation: java.lang.String getSystemCodeForService(int,android.content.ComponentName)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int getSupportedFeatures()>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: void removeSessionTokensListener(android.media.ISessionTokensListener,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothManager",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.security.keystore.recovery.RecoveryController",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: java.lang.String generateKey(java.lang.String)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void queryPasspointIcon(long,java.lang.String)>"
  },
  {
    "helperCls": "android.os.HardwarePropertiesManager",
    "implCls": "com.android.server.HardwarePropertiesManagerService",
    "inf": "android.os.IHardwarePropertiesManager",
    "mtd": "<android.os.IHardwarePropertiesManager: float[] getDeviceTemperatures(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: boolean isNotificationPolicyAccessGrantedForPackage(java.lang.String)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.media.browse.MediaBrowser",
    "implCls": "android.service.media.IMediaBrowserService",
    "inf": "android.service.media.IMediaBrowserService",
    "mtd": "<android.service.media.IMediaBrowserService: void addSubscription(java.lang.String,android.os.IBinder,android.os.Bundle,android.service.media.IMediaBrowserServiceCallbacks)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: boolean isPlaybackActive(android.media.IMediaRouterClient)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void finishInput()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputContext",
    "inf": "com.android.internal.view.IInputContext",
    "mtd": "<com.android.internal.view.IInputContext: void finishComposingText()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAvrcpController",
    "implCls": "android.bluetooth.IBluetoothAvrcpController",
    "inf": "android.bluetooth.IBluetoothAvrcpController",
    "mtd": "<android.bluetooth.IBluetoothAvrcpController: java.util.List getDevicesMatchingConnectionStates(int[])>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: java.util.List getDvbDeviceList()>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean isRestricted()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void clearCrossProfileIntentFilters(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: boolean sendDTMF(android.bluetooth.BluetoothDevice,byte)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.util.List getAffiliationIds(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean clearResetPasswordToken(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.le.PeriodicAdvertisingManager",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.app.usage.NetworkStatsManager",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: android.net.INetworkStatsSession openSessionForUsageStats(int,java.lang.String)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: android.content.pm.ParceledListSlice getInstalledProvidersForProfile(int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.UiAutomation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: void disconnect()>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void updateSession(int,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,int,int)>"
  },
  {
    "helperCls": "android.telephony.SubscriptionManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: java.lang.String getSubscriptionPlansOwner(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dp",
    "implCls": "android.bluetooth.IBluetoothA2dp",
    "inf": "android.bluetooth.IBluetoothA2dp",
    "mtd": "<android.bluetooth.IBluetoothA2dp: android.bluetooth.BluetoothCodecStatus getCodecStatus(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.SearchManager",
    "implCls": "com.android.server.search.SearchManagerService",
    "inf": "android.app.ISearchManager",
    "mtd": "<android.app.ISearchManager: java.util.List getSearchablesInGlobalSearch()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void registerForNotification(int,java.lang.String,int,boolean)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: boolean removeAutomaticZenRules(java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: boolean isNdefPushEnabled()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputContext",
    "inf": "com.android.internal.view.IInputContext",
    "mtd": "<com.android.internal.view.IInputContext: void finishComposingText()>"
  },
  {
    "helperCls": "android.hardware.location.GeofenceHardwareImpl",
    "implCls": "android.location.IFusedGeofenceHardware",
    "inf": "android.location.IFusedGeofenceHardware",
    "mtd": "<android.location.IFusedGeofenceHardware: boolean isSupported()>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: void requestPointerCapture(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: boolean isBleScanAlwaysAvailable()>"
  },
  {
    "helperCls": "android.service.voice.AlwaysOnHotwordDetector",
    "implCls": "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "inf": "com.android.internal.app.IVoiceInteractionManagerService",
    "mtd": "<com.android.internal.app.IVoiceInteractionManagerService: int stopRecognition(android.service.voice.IVoiceInteractionService,int,android.hardware.soundtrigger.IRecognitionStatusCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMap",
    "implCls": "android.bluetooth.IBluetoothMap",
    "inf": "android.bluetooth.IBluetoothMap",
    "mtd": "<android.bluetooth.IBluetoothMap: int getState()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: android.bluetooth.BluetoothClass getBluetoothClass()>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: android.security.keymaster.ExportResult exportKey(java.lang.String,int,android.security.keymaster.KeymasterBlob,android.security.keymaster.KeymasterBlob,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>"
  },
  {
    "helperCls": "android.os.DropBoxManager",
    "implCls": "com.android.internal.os.IDropBoxManagerService$Stub",
    "inf": "com.android.internal.os.IDropBoxManagerService",
    "mtd": "<com.android.internal.os.IDropBoxManagerService: void add(android.os.DropBoxManager$Entry)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.os.DropBoxManager",
    "implCls": "com.android.internal.os.IDropBoxManagerService$Stub",
    "inf": "com.android.internal.os.IDropBoxManagerService",
    "mtd": "<com.android.internal.os.IDropBoxManagerService: void add(android.os.DropBoxManager$Entry)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>"
  },
  {
    "helperCls": "android.app.UiAutomationConnection",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: android.os.IBinder getWindowToken(int,int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setBluetoothA2dpOn(boolean)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.Network getNetworkForType(int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: void setImeWindowStatus(android.os.IBinder,android.os.IBinder,int,int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.app.VrManager",
    "implCls": "android.service.vr.IVrManager",
    "inf": "android.service.vr.IVrManager",
    "mtd": "<android.service.vr.IVrManager: void setVrInputMethod(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.location.Geocoder",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int,int)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: android.telephony.ims.ImsCallProfile getCallProfile()>"
  },
  {
    "helperCls": "android.net.wifi.p2p.WifiP2pManager",
    "implCls": "com.android.server.wifi.p2p.WifiP2pServiceImpl",
    "inf": "android.net.wifi.p2p.IWifiP2pManager",
    "mtd": "<android.net.wifi.p2p.IWifiP2pManager: void close(android.os.IBinder)>"
  },
  {
    "helperCls": "android.os.RecoverySystem",
    "implCls": "com.android.server.RecoverySystemService$BinderService",
    "inf": "android.os.IRecoverySystem",
    "mtd": "<android.os.IRecoverySystem: boolean uncrypt(java.lang.String,android.os.IRecoverySystemProgressListener)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: void setDimensionHints(int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.content.pm.UserInfo createProfileForUser(java.lang.String,int,int,java.lang.String[])>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: boolean isWallpaperSupported(java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration,int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputContext",
    "inf": "com.android.internal.view.IInputContext",
    "mtd": "<com.android.internal.view.IInputContext: void finishComposingText()>"
  },
  {
    "helperCls": "android.security.keystore.recovery.RecoveryController",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: void initRecoveryServiceWithSigFile(java.lang.String,byte[],byte[])>"
  },
  {
    "helperCls": "android.hardware.location.ContextHubManager",
    "implCls": "com.android.server.location.ContextHubService",
    "inf": "android.hardware.location.IContextHubService",
    "mtd": "<android.hardware.location.IContextHubService: int[] findNanoAppOnHub(int,android.hardware.location.NanoAppFilter)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: boolean matchesCallFilter(android.os.Bundle)>"
  },
  {
    "helperCls": "android.app.usage.StorageStatsManager",
    "implCls": "com.android.server.usage.StorageStatsService",
    "inf": "android.app.usage.IStorageStatsManager",
    "mtd": "<android.app.usage.IStorageStatsManager: long getTotalBytes(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.location.GeofenceHardwareImpl",
    "implCls": "android.location.IFusedGeofenceHardware",
    "inf": "android.location.IFusedGeofenceHardware",
    "mtd": "<android.location.IFusedGeofenceHardware: void pauseMonitoringGeofence(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothPbap",
    "implCls": "android.bluetooth.IBluetoothPbap",
    "inf": "android.bluetooth.IBluetoothPbap",
    "mtd": "<android.bluetooth.IBluetoothPbap: int getConnectionState(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller$Session",
    "implCls": "android.content.pm.IPackageInstallerSession",
    "inf": "android.content.pm.IPackageInstallerSession",
    "mtd": "<android.content.pm.IPackageInstallerSession: void abandon()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void partitionPublic(java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void forgetWifiDisplay(java.lang.String)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: java.lang.String getPackageName()>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.content.pm.dex.ArtManager",
    "implCls": "android.content.pm.dex.IArtManager",
    "inf": "android.content.pm.dex.IArtManager",
    "mtd": "<android.content.pm.dex.IArtManager: boolean isRuntimeProfilingEnabled(int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.DragAndDropPermissions",
    "implCls": "com.android.internal.view.IDragAndDropPermissions",
    "inf": "com.android.internal.view.IDragAndDropPermissions",
    "mtd": "<com.android.internal.view.IDragAndDropPermissions: void take(android.os.IBinder)>"
  },
  {
    "helperCls": "android.os.RecoverySystem",
    "implCls": "com.android.server.RecoverySystemService$BinderService",
    "inf": "android.os.IRecoverySystem",
    "mtd": "<android.os.IRecoverySystem: boolean clearBcb()>"
  },
  {
    "helperCls": "android.location.CountryDetector",
    "implCls": "com.android.server.CountryDetectorService",
    "inf": "android.location.ICountryDetector",
    "mtd": "<android.location.ICountryDetector: android.location.Country detectCountry()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.DiskInfo[] getDisks()>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int checkAudioOperation(int,int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: java.lang.String getDefaultDialerPackage()>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.Session",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void remove(android.view.IWindow)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: void setBindAppWidgetPermission(java.lang.String,int,boolean)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int insert(java.lang.String,byte[],int,int)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void disconnect(java.lang.String)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void cancelSession(int,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: int getWallpaperIdForUser(int,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void clearCrossProfileIntentFilters(int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.usage.NetworkStats",
    "implCls": "android.net.INetworkStatsSession",
    "inf": "android.net.INetworkStatsSession",
    "mtd": "<android.net.INetworkStatsSession: android.net.NetworkStatsHistory getHistoryIntervalForUid(android.net.NetworkTemplate,int,int,int,int,long,long)>"
  },
  {
    "helperCls": "android.media.browse.MediaBrowser",
    "implCls": "android.service.media.IMediaBrowserService",
    "inf": "android.service.media.IMediaBrowserService",
    "mtd": "<android.service.media.IMediaBrowserService: void removeSubscriptionDeprecated(java.lang.String,android.service.media.IMediaBrowserServiceCallbacks)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.util.MergedConfiguration,android.view.Surface)>"
  },
  {
    "helperCls": "android.net.nsd.NsdManager",
    "implCls": "com.android.server.NsdService",
    "inf": "android.net.nsd.INsdManager",
    "mtd": "<android.net.nsd.INsdManager: android.os.Messenger getMessenger()>"
  },
  {
    "helperCls": "android.hardware.location.GeofenceHardware",
    "implCls": "android.hardware.location.IGeofenceHardware",
    "inf": "android.hardware.location.IGeofenceHardware",
    "mtd": "<android.hardware.location.IGeofenceHardware: boolean addCircularFence(int,android.hardware.location.GeofenceHardwareRequestParcelable,android.hardware.location.IGeofenceHardwareCallback)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: android.os.ParcelFileDescriptor getShortcutIconFd(java.lang.String,java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void startWifiDisplayScan()>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: void setUserRestriction(java.lang.String,boolean,int)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void clearTestProviderStatus(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: int getIconMaxDimensions(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: android.content.pm.ParceledListSlice getLauncherActivities(java.lang.String,java.lang.String,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.print.PrintManager",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: java.util.List getPrintServiceRecommendations(int)>"
  },
  {
    "helperCls": "android.hardware.location.ContextHubManager",
    "implCls": "com.android.server.location.ContextHubService",
    "inf": "android.hardware.location.IContextHubService",
    "mtd": "<android.hardware.location.IContextHubService: int loadNanoApp(int,android.hardware.location.NanoApp)>"
  },
  {
    "helperCls": "android.hardware.camera2.impl.ICameraDeviceUserWrapper",
    "implCls": "android.hardware.camera2.ICameraDeviceUser",
    "inf": "android.hardware.camera2.ICameraDeviceUser",
    "mtd": "<android.hardware.camera2.ICameraDeviceUser: void deleteStream(int)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: java.util.List getEnabledAccessibilityServiceList(int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.hardware.Camera",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: boolean updateShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean hasSigningCertificate(java.lang.String,byte[],int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setEndUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>"
  },
  {
    "helperCls": "android.hardware.hdmi.HdmiControlManager",
    "implCls": "com.android.server.hdmi.HdmiControlService$BinderService",
    "inf": "android.hardware.hdmi.IHdmiControlService",
    "mtd": "<android.hardware.hdmi.IHdmiControlService: void addHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.app.usage.UsageStatsManager",
    "implCls": "com.android.server.usage.UsageStatsService$BinderService",
    "inf": "android.app.usage.IUsageStatsManager",
    "mtd": "<android.app.usage.IUsageStatsManager: void onCarrierPrivilegedAppsChanged()>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void forgetVolume(java.lang.String)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: android.os.ParcelFileDescriptor getShortcutIconFd(java.lang.String,java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller$Session",
    "implCls": "android.content.pm.IPackageInstallerSession",
    "inf": "android.content.pm.IPackageInstallerSession",
    "mtd": "<android.content.pm.IPackageInstallerSession: void close()>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: android.media.tv.TvInputInfo getTvInputInfo(java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: android.net.lowpan.LowpanCredential getLowpanCredential()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothSap",
    "implCls": "android.bluetooth.IBluetoothSap",
    "inf": "android.bluetooth.IBluetoothSap",
    "mtd": "<android.bluetooth.IBluetoothSap: int getState()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: android.bluetooth.IBluetoothSocketManager getSocketManager()>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: android.content.pm.ParceledListSlice getShortcutConfigActivities(java.lang.String,java.lang.String,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.app.usage.StorageStatsManager",
    "implCls": "com.android.server.usage.StorageStatsService",
    "inf": "android.app.usage.IStorageStatsManager",
    "mtd": "<android.app.usage.IStorageStatsManager: android.app.usage.StorageStats queryStatsForUid(java.lang.String,int,java.lang.String)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void setMute(boolean)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.VolumeInfo[] getVolumes(int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputContext",
    "inf": "com.android.internal.view.IInputContext",
    "mtd": "<com.android.internal.view.IInputContext: void finishComposingText()>"
  },
  {
    "helperCls": "android.app.usage.UsageStatsManager",
    "implCls": "com.android.server.usage.UsageStatsService$BinderService",
    "inf": "android.app.usage.IUsageStatsManager",
    "mtd": "<android.app.usage.IUsageStatsManager: void setAppInactive(java.lang.String,boolean,int)>"
  },
  {
    "helperCls": "android.media.Ringtone",
    "implCls": "android.media.IRingtonePlayer",
    "inf": "android.media.IRingtonePlayer",
    "mtd": "<android.media.IRingtonePlayer: void stop(android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.AlarmManager",
    "implCls": "android.app.IAlarmManager",
    "inf": "android.app.IAlarmManager",
    "mtd": "<android.app.IAlarmManager: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidHost",
    "implCls": "android.bluetooth.IBluetoothHidHost",
    "inf": "android.bluetooth.IBluetoothHidHost",
    "mtd": "<android.bluetooth.IBluetoothHidHost: java.util.List getDevicesMatchingConnectionStates(int[])>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: void releaseNetworkRequest(android.net.NetworkRequest)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: android.os.ParcelUuid[] getUuids()>"
  },
  {
    "helperCls": "android.media.session.MediaSession",
    "implCls": "android.media.session.ISession",
    "inf": "android.media.session.ISession",
    "mtd": "<android.media.session.ISession: void setCurrentVolume(int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMapClient",
    "implCls": "android.bluetooth.IBluetoothMapClient",
    "inf": "android.bluetooth.IBluetoothMapClient",
    "mtd": "<android.bluetooth.IBluetoothMapClient: boolean isConnected(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int addAuthToken(byte[])>"
  },
  {
    "helperCls": "android.os.RecoverySystem",
    "implCls": "com.android.server.RecoverySystemService$BinderService",
    "inf": "android.os.IRecoverySystem",
    "mtd": "<android.os.IRecoverySystem: void rebootRecoveryWithCommand(java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setUserIcon(android.content.ComponentName,android.graphics.Bitmap)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.os.PowerManager",
    "implCls": "com.android.server.power.PowerManagerService$BinderService",
    "inf": "android.os.IPowerManager",
    "mtd": "<android.os.IPowerManager: boolean isInteractive()>"
  },
  {
    "helperCls": "android.net.wifi.aware.WifiAwareManager",
    "implCls": "com.android.server.wifi.aware.WifiAwareServiceImpl",
    "inf": "android.net.wifi.aware.IWifiAwareManager",
    "mtd": "<android.net.wifi.aware.IWifiAwareManager: void connect(android.os.IBinder,java.lang.String,android.net.wifi.aware.IWifiAwareEventCallback,android.net.wifi.aware.ConfigRequest,boolean)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: void setNotificationPolicy(java.lang.String,android.app.NotificationManager$Policy)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: android.content.pm.ParceledListSlice getDynamicShortcuts(java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: int getRestrictBackgroundByCaller()>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int importKey(java.lang.String,android.security.keymaster.KeymasterArguments,int,byte[],int,int,android.security.keymaster.KeyCharacteristics)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean getScreenCaptureDisabled(android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.VolumeInfo[] getVolumes(int)>"
  },
  {
    "helperCls": "android.speech.SpeechRecognizer",
    "implCls": "android.speech.IRecognitionService",
    "inf": "android.speech.IRecognitionService",
    "mtd": "<android.speech.IRecognitionService: void cancel(android.speech.IRecognitionListener)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputContext",
    "inf": "com.android.internal.view.IInputContext",
    "mtd": "<com.android.internal.view.IInputContext: void finishComposingText()>"
  },
  {
    "helperCls": "android.app.backup.RestoreSession",
    "implCls": "android.app.backup.IRestoreSession",
    "inf": "android.app.backup.IRestoreSession",
    "mtd": "<android.app.backup.IRestoreSession: int restoreSome(long,android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor,java.lang.String[])>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId)>"
  },
  {
    "helperCls": "android.database.BulkCursorToCursorAdaptor",
    "implCls": "android.database.IBulkCursor",
    "inf": "android.database.IBulkCursor",
    "mtd": "<android.database.IBulkCursor: android.database.CursorWindow getWindow(int)>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void playDtmfTone(java.lang.String,char,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.hardware.ConsumerIrManager",
    "implCls": "com.android.server.ConsumerIrService",
    "inf": "android.hardware.IConsumerIrService",
    "mtd": "<android.hardware.IConsumerIrService: int[] getCarrierFrequencies()>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: android.os.IBinder getToken(android.os.IBinder)>"
  },
  {
    "helperCls": "android.net.ip.IpClient",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.util.MergedConfiguration,android.view.Surface)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: void registerCallbackListener(java.lang.String,android.media.session.ISessionControllerCallback)>"
  },
  {
    "helperCls": "android.net.metrics.IpConnectivityLog",
    "implCls": "com.android.server.connectivity.IpConnectivityMetrics$Impl",
    "inf": "android.net.IIpConnectivityMetrics",
    "mtd": "<android.net.IIpConnectivityMetrics: int logEvent(android.net.ConnectivityMetricsEvent)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setBluetoothA2dpOn(boolean)>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void onCallAudioStateChanged(java.lang.String,android.telecom.CallAudioState,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void terminate(int)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: boolean sendMediaButton(java.lang.String,android.media.session.ISessionControllerCallback,boolean,android.view.KeyEvent)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void disableOwnedAutofillServices(int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void reportDropResult(android.view.IWindow,boolean)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void mountObb(java.lang.String,java.lang.String,java.lang.String,android.os.storage.IObbActionListener,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getDeviceOwnerOrganizationName()>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: java.lang.String[] getBackgroundThrottlingWhitelist()>"
  },
  {
    "helperCls": "android.net.ip.InterfaceController",
    "implCls": "android.net.INetd",
    "inf": "android.net.INetd",
    "mtd": "<android.net.INetd: void interfaceAddAddress(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void resumeWifiDisplay()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void discoverServiceByUuid(int,java.lang.String,android.os.ParcelUuid)>"
  },
  {
    "helperCls": "android.se.omapi.Session",
    "implCls": "android.se.omapi.ISecureElementSession",
    "inf": "android.se.omapi.ISecureElementSession",
    "mtd": "<android.se.omapi.ISecureElementSession: android.se.omapi.ISecureElementChannel openLogicalChannel(byte[],byte,android.se.omapi.ISecureElementListener)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: void dispatchVolumeKeyEvent(java.lang.String,boolean,android.view.KeyEvent,int,boolean)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.net.NetworkScoreManager",
    "implCls": "com.android.server.NetworkScoreService",
    "inf": "android.net.INetworkScoreService",
    "mtd": "<android.net.INetworkScoreService: void registerNetworkScoreCache(int,android.net.INetworkScoreCache,int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: boolean isPlaybackActive(android.media.IMediaRouterClient)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: java.lang.String getPackageName()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dp",
    "implCls": "android.bluetooth.IBluetoothA2dp",
    "inf": "android.bluetooth.IBluetoothA2dp",
    "mtd": "<android.bluetooth.IBluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void stopDtmfTone(java.lang.String)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean outOfMemory(android.view.IWindow)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: android.net.lowpan.LowpanChannelInfo[] getSupportedChannels()>"
  },
  {
    "helperCls": "android.content.ClipboardManager",
    "implCls": "com.android.server.clipboard.ClipboardService$ClipboardImpl",
    "inf": "android.content.IClipboard",
    "mtd": "<android.content.IClipboard: android.content.ClipData getPrimaryClip(java.lang.String)>"
  },
  {
    "helperCls": "android.media.midi.MidiDeviceServer",
    "implCls": "com.android.server.midi.MidiService",
    "inf": "android.media.midi.IMidiManager",
    "mtd": "<android.media.midi.IMidiManager: void setDeviceStatus(android.media.midi.IMidiDeviceServer,android.media.midi.MidiDeviceStatus)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothPbap",
    "implCls": "android.bluetooth.IBluetoothPbap",
    "inf": "android.bluetooth.IBluetoothPbap",
    "mtd": "<android.bluetooth.IBluetoothPbap: int getConnectionState(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>"
  },
  {
    "helperCls": "android.net.wifi.WifiScanner",
    "implCls": "com.android.server.wifi.scanner.WifiScanningServiceImpl",
    "inf": "android.net.wifi.IWifiScanner",
    "mtd": "<android.net.wifi.IWifiScanner: android.os.Bundle getAvailableChannels(int)>"
  },
  {
    "helperCls": "android.os.PowerManager",
    "implCls": "com.android.server.power.PowerManagerService$BinderService",
    "inf": "android.os.IPowerManager",
    "mtd": "<android.os.IPowerManager: void shutdown(boolean,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHealth",
    "implCls": "android.bluetooth.IBluetoothHealth",
    "inf": "android.bluetooth.IBluetoothHealth",
    "mtd": "<android.bluetooth.IBluetoothHealth: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>"
  },
  {
    "helperCls": "android.net.ip.InterfaceController",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void enableIpv6(java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: int getState()>"
  },
  {
    "helperCls": "android.app.slice.SliceManager",
    "implCls": "com.android.server.slice.SliceManagerService",
    "inf": "android.app.slice.ISliceManager",
    "mtd": "<android.app.slice.ISliceManager: android.net.Uri[] getPinnedSlices(java.lang.String)>"
  },
  {
    "helperCls": "android.service.trust.TrustAgentService",
    "implCls": "android.service.trust.ITrustAgentServiceCallback",
    "inf": "android.service.trust.ITrustAgentServiceCallback",
    "mtd": "<android.service.trust.ITrustAgentServiceCallback: void revokeTrust()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void verifyNfcPermission()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>"
  },
  {
    "helperCls": "android.net.NetworkPolicyManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: void factoryReset(java.lang.String)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionService",
    "implCls": "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "inf": "com.android.internal.app.IVoiceInteractionManagerService",
    "mtd": "<com.android.internal.app.IVoiceInteractionManagerService: int getDisabledShowContext()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.VolumeInfo[] getVolumes(int)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>"
  },
  {
    "helperCls": "android.hardware.usb.UsbManager",
    "implCls": "com.android.server.usb.UsbService",
    "inf": "android.hardware.usb.IUsbManager",
    "mtd": "<android.hardware.usb.IUsbManager: android.os.ParcelFileDescriptor getControlFd(long)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionService",
    "implCls": "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "inf": "com.android.internal.app.IVoiceInteractionManagerService",
    "mtd": "<com.android.internal.app.IVoiceInteractionManagerService: int stopRecognition(android.service.voice.IVoiceInteractionService,int,android.hardware.soundtrigger.IRecognitionStatusCallback)>"
  },
  {
    "helperCls": "android.hardware.camera2.impl.ICameraDeviceUserWrapper",
    "implCls": "android.hardware.camera2.ICameraDeviceUser",
    "inf": "android.hardware.camera2.ICameraDeviceUser",
    "mtd": "<android.hardware.camera2.ICameraDeviceUser: int createInputStream(int,int,int)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanScanner",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: java.lang.String getName()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: boolean isPlaybackActive(android.media.IMediaRouterClient)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanManager",
    "implCls": "android.net.lowpan.ILowpanManager",
    "inf": "android.net.lowpan.ILowpanManager",
    "mtd": "<android.net.lowpan.ILowpanManager: void addListener(android.net.lowpan.ILowpanManagerListener)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void setSaturationLevel(float)>"
  },
  {
    "helperCls": "android.os.HardwarePropertiesManager",
    "implCls": "com.android.server.HardwarePropertiesManagerService",
    "inf": "android.os.IHardwarePropertiesManager",
    "mtd": "<android.os.IHardwarePropertiesManager: float[] getFanSpeeds(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getConnectionState(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>"
  },
  {
    "helperCls": "android.app.ActivityManager$AppTask",
    "implCls": "android.app.IAppTask",
    "inf": "android.app.IAppTask",
    "mtd": "<android.app.IAppTask: int startActivity(android.os.IBinder,java.lang.String,android.content.Intent,java.lang.String,android.os.Bundle)>"
  },
  {
    "helperCls": "android.os.UpdateEngine",
    "implCls": "android.os.IUpdateEngine",
    "inf": "android.os.IUpdateEngine",
    "mtd": "<android.os.IUpdateEngine: void suspend()>"
  },
  {
    "helperCls": "android.util.StatsLog",
    "implCls": "android.os.IStatsManager",
    "inf": "android.os.IStatsManager",
    "mtd": "<android.os.IStatsManager: void sendAppBreadcrumbAtom(int,int)>"
  },
  {
    "helperCls": "android.provider.Settings$Secure",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: java.lang.String[] getMobileIfaces()>"
  },
  {
    "helperCls": "android.provider.Settings$Secure",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: android.os.IBinder getToken(android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.KeyguardManager",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: void dismissKeyguard(android.os.IBinder,com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.Session",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.nfc.dta.NfcDta",
    "implCls": "android.nfc.INfcDta",
    "inf": "android.nfc.INfcDta",
    "mtd": "<android.nfc.INfcDta: boolean enableServer(java.lang.String,int,int,int,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int addClient(android.view.autofill.IAutoFillManagerClient,int)>"
  },
  {
    "helperCls": "android.app.UiAutomation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: void connect(android.accessibilityservice.IAccessibilityServiceClient,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getProfileConnectionState(int)>"
  },
  {
    "helperCls": "android.telephony.ims.stub.ImsEcbmImplBase",
    "implCls": "com.android.ims.internal.IImsEcbmListener",
    "inf": "com.android.ims.internal.IImsEcbmListener",
    "mtd": "<com.android.ims.internal.IImsEcbmListener: void enteredECBM()>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getStreamMaxVolume(int)>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: android.content.Intent createShortcutResultIntent(java.lang.String,android.content.pm.ShortcutInfo,int)>"
  },
  {
    "helperCls": "android.hardware.Camera",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int checkAudioOperation(int,int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>"
  },
  {
    "helperCls": "android.content.pm.AppsQueryHelper",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[],int,int)>"
  },
  {
    "helperCls": "android.net.wifi.p2p.WifiP2pManager",
    "implCls": "com.android.server.wifi.p2p.WifiP2pServiceImpl",
    "inf": "android.net.wifi.p2p.IWifiP2pManager",
    "mtd": "<android.net.wifi.p2p.IWifiP2pManager: void close(android.os.IBinder)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.Session",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.se.omapi.Channel",
    "implCls": "android.se.omapi.ISecureElementChannel",
    "inf": "android.se.omapi.ISecureElementChannel",
    "mtd": "<android.se.omapi.ISecureElementChannel: boolean isBasicChannel()>"
  },
  {
    "helperCls": "android.media.audiopolicy.AudioPolicy",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void playerHasOpPlayAudio(int,boolean)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothPan",
    "implCls": "android.bluetooth.IBluetoothPan",
    "inf": "android.bluetooth.IBluetoothPan",
    "mtd": "<android.bluetooth.IBluetoothPan: java.util.List getDevicesMatchingConnectionStates(int[])>"
  },
  {
    "helperCls": "android.app.trust.TrustManager",
    "implCls": "android.app.trust.ITrustManager",
    "inf": "android.app.trust.ITrustManager",
    "mtd": "<android.app.trust.ITrustManager: void registerTrustListener(android.app.trust.ITrustListener)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: boolean rejectCall(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean isPackageDeviceAdminOnAnyUser(java.lang.String)>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>"
  },
  {
    "helperCls": "android.media.browse.MediaBrowser",
    "implCls": "android.service.media.IMediaBrowserService",
    "inf": "android.service.media.IMediaBrowserService",
    "mtd": "<android.service.media.IMediaBrowserService: void removeSubscription(java.lang.String,android.os.IBinder,android.service.media.IMediaBrowserServiceCallbacks)>"
  },
  {
    "helperCls": "android.media.browse.MediaBrowser",
    "implCls": "android.service.media.IMediaBrowserService",
    "inf": "android.service.media.IMediaBrowserService",
    "mtd": "<android.service.media.IMediaBrowserService: void removeSubscription(java.lang.String,android.os.IBinder,android.service.media.IMediaBrowserServiceCallbacks)>"
  },
  {
    "helperCls": "android.os.ServiceManager",
    "implCls": "android.os.IServiceManager",
    "inf": "android.os.IServiceManager",
    "mtd": "<android.os.IServiceManager: android.os.IBinder getService(java.lang.String)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean loadSoundEffects()>"
  },
  {
    "helperCls": "android.os.DropBoxManager",
    "implCls": "com.android.internal.os.IDropBoxManagerService$Stub",
    "inf": "com.android.internal.os.IDropBoxManagerService",
    "mtd": "<com.android.internal.os.IDropBoxManagerService: void add(android.os.DropBoxManager$Entry)>"
  },
  {
    "helperCls": "android.se.omapi.Channel",
    "implCls": "android.se.omapi.ISecureElementChannel",
    "inf": "android.se.omapi.ISecureElementChannel",
    "mtd": "<android.se.omapi.ISecureElementChannel: boolean selectNext()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean resetPassword(java.lang.String,int)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionUpdateFailed(android.telephony.ims.ImsReasonInfo)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: void unregisterWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.NfcFCardEmulation",
    "implCls": "android.nfc.INfcFCardEmulation",
    "inf": "android.nfc.INfcFCardEmulation",
    "mtd": "<android.nfc.INfcFCardEmulation: boolean registerSystemCodeForService(int,android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.NfcFCardEmulation",
    "implCls": "android.nfc.INfcFCardEmulation",
    "inf": "android.nfc.INfcFCardEmulation",
    "mtd": "<android.nfc.INfcFCardEmulation: boolean registerSystemCodeForService(int,android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.usb.UsbManager",
    "implCls": "com.android.server.usb.UsbService",
    "inf": "android.hardware.usb.IUsbManager",
    "mtd": "<android.hardware.usb.IUsbManager: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean createBondOutOfBand(android.bluetooth.BluetoothDevice,int,android.bluetooth.OobData)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setMicrophoneMute(boolean,java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.print.PrinterDiscoverySession",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getPasswordQuality(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.app.UiAutomationConnection",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: void thawRotation()>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: java.util.List getProviders(android.location.Criteria,boolean)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setVolumeController(android.media.IVolumeController)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void finishSession(int,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.util.List getMeteredDataDisabledPackages(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.app.trust.TrustManager",
    "implCls": "android.app.trust.ITrustManager",
    "inf": "android.app.trust.ITrustManager",
    "mtd": "<android.app.trust.ITrustManager: void reportKeyguardShowingChanged()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String,android.os.Bundle)>"
  },
  {
    "helperCls": "android.app.UiModeManager",
    "implCls": "android.app.IUiModeManager$Stub",
    "inf": "android.app.IUiModeManager",
    "mtd": "<android.app.IUiModeManager: boolean isNightModeLocked()>"
  },
  {
    "helperCls": "android.nfc.dta.NfcDta",
    "implCls": "android.nfc.INfcDta",
    "inf": "android.nfc.INfcDta",
    "mtd": "<android.nfc.INfcDta: boolean enableClient(java.lang.String,int,int,int)>"
  },
  {
    "helperCls": "android.security.keystore.recovery.RecoveryController",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: int[] getRecoverySecretTypes()>"
  },
  {
    "helperCls": "android.media.Ringtone",
    "implCls": "android.media.IRingtonePlayer",
    "inf": "android.media.IRingtonePlayer",
    "mtd": "<android.media.IRingtonePlayer: void setPlaybackProperties(android.os.IBinder,float,boolean)>"
  },
  {
    "helperCls": "android.os.UpdateLock",
    "implCls": "com.android.server.UpdateLockService",
    "inf": "android.os.IUpdateLock",
    "mtd": "<android.os.IUpdateLock: void releaseUpdateLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.Session",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void remove(android.view.IWindow)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getRingerModeExternal()>"
  },
  {
    "helperCls": "android.media.session.MediaSession",
    "implCls": "android.media.session.ISession",
    "inf": "android.media.session.ISession",
    "mtd": "<android.media.session.ISession: void setFlags(int)>"
  },
  {
    "helperCls": "android.hardware.location.ContextHubClient",
    "implCls": "android.hardware.location.IContextHubClient",
    "inf": "android.hardware.location.IContextHubClient",
    "mtd": "<android.hardware.location.IContextHubClient: int sendMessageToNanoApp(android.hardware.location.NanoAppMessage)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: java.util.List getPhoneAccountsForPackage(java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.content.pm.ParceledListSlice getAmbientBrightnessStats()>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean getForceEphemeralUsers(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionMergeComplete(com.android.ims.internal.IImsCallSession)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean hasUserRestriction(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int is_hardware_backed(java.lang.String)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: android.media.IRingtonePlayer getRingtonePlayer()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,java.lang.String,int,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void finishSession(int,int)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: void addSessionTokensListener(android.media.ISessionTokensListener,int,java.lang.String)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: boolean isPlaybackActive(android.media.IMediaRouterClient)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.Network getActiveNetwork()>"
  },
  {
    "helperCls": "android.app.UiModeManager",
    "implCls": "android.app.IUiModeManager$Stub",
    "inf": "android.app.IUiModeManager",
    "mtd": "<android.app.IUiModeManager: int getNightMode()>"
  },
  {
    "helperCls": "android.app.SearchManager",
    "implCls": "com.android.server.search.SearchManagerService",
    "inf": "android.app.ISearchManager",
    "mtd": "<android.app.ISearchManager: boolean launchLegacyAssist(java.lang.String,int,android.os.Bundle)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean setResetPasswordToken(android.content.ComponentName,byte[])>"
  },
  {
    "helperCls": "android.service.oemlock.OemLockManager",
    "implCls": "android.service.oemlock.IOemLockService",
    "inf": "android.service.oemlock.IOemLockService",
    "mtd": "<android.service.oemlock.IOemLockService: void setOemUnlockAllowedByCarrier(boolean,byte[])>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int addClient(android.view.autofill.IAutoFillManagerClient,int)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidDevice",
    "implCls": "android.bluetooth.IBluetoothHidDevice",
    "inf": "android.bluetooth.IBluetoothHidDevice",
    "mtd": "<android.bluetooth.IBluetoothHidDevice: boolean disconnect(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void mkdirs(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void stopLocalOnlyHotspot()>"
  },
  {
    "helperCls": "android.app.backup.BackupManager",
    "implCls": "com.android.server.backup.Trampoline",
    "inf": "android.app.backup.IBackupManager",
    "mtd": "<android.app.backup.IBackupManager: void backupNow()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: void updateStatusIcon(android.os.IBinder,java.lang.String,int)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: void sendCommand(java.lang.String,android.media.session.ISessionControllerCallback,java.lang.String,android.os.Bundle,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: java.lang.String[] getTetherableWifiRegexs()>"
  },
  {
    "helperCls": "android.app.usage.NetworkStatsManager",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: android.net.INetworkStatsSession openSessionForUsageStats(int,java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.location.GeofenceHardwareImpl",
    "implCls": "android.location.IGpsGeofenceHardware",
    "inf": "android.location.IGpsGeofenceHardware",
    "mtd": "<android.location.IGpsGeofenceHardware: boolean removeHardwareGeofence(int)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.content.pm.ParceledListSlice getAmbientBrightnessStats()>"
  },
  {
    "helperCls": "android.os.PowerManager",
    "implCls": "com.android.server.power.PowerManagerService$BinderService",
    "inf": "android.os.IPowerManager",
    "mtd": "<android.os.IPowerManager: void wakeUp(long,java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.os.Bundle getUserRestrictions(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.app.usage.StorageStatsManager",
    "implCls": "com.android.server.usage.StorageStatsService",
    "inf": "android.app.usage.IStorageStatsManager",
    "mtd": "<android.app.usage.IStorageStatsManager: android.app.usage.ExternalStorageStats queryExternalStatsForUser(java.lang.String,int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getBatteryLevel(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()>"
  },
  {
    "helperCls": "android.app.VrManager",
    "implCls": "android.service.vr.IVrManager",
    "inf": "android.service.vr.IVrManager",
    "mtd": "<android.service.vr.IVrManager: void unregisterListener(android.service.vr.IVrStateCallbacks)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.NfcFCardEmulation",
    "implCls": "android.nfc.INfcFCardEmulation",
    "inf": "android.nfc.INfcFCardEmulation",
    "mtd": "<android.nfc.INfcFCardEmulation: boolean setNfcid2ForService(int,android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.NfcFCardEmulation",
    "implCls": "android.nfc.INfcFCardEmulation",
    "inf": "android.nfc.INfcFCardEmulation",
    "mtd": "<android.nfc.INfcFCardEmulation: boolean setNfcid2ForService(int,android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setOrganizationColor(android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void clearTestProviderEnabled(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.app.usage.NetworkStatsManager",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: android.net.DataUsageRequest registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: void addKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>"
  },
  {
    "helperCls": "android.net.ip.IpClient",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void unregisterObserver(android.net.INetworkManagementEventObserver)>"
  },
  {
    "helperCls": "android.content.ClipboardManager",
    "implCls": "com.android.server.clipboard.ClipboardService$ClipboardImpl",
    "inf": "android.content.IClipboard",
    "mtd": "<android.content.IClipboard: boolean hasClipboardText(java.lang.String)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties,java.lang.String)>"
  },
  {
    "helperCls": "android.se.omapi.Session",
    "implCls": "android.se.omapi.ISecureElementSession",
    "inf": "android.se.omapi.ISecureElementSession",
    "mtd": "<android.se.omapi.ISecureElementSession: boolean isClosed()>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: java.lang.String getVoiceMailNumber(android.telecom.PhoneAccountHandle,java.lang.String)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int updateOrRestartSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,int,int,boolean)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isNetworkLoggingEnabled(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int getKeyCharacteristics(java.lang.String,android.security.keymaster.KeymasterBlob,android.security.keymaster.KeymasterBlob,int,android.security.keymaster.KeyCharacteristics)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: boolean setAccountVisibility(android.accounts.Account,java.lang.String,int)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: void acceptHandover(android.net.Uri,int,android.telecom.PhoneAccountHandle)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void sendUssd(java.lang.String)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionSuppServiceReceived(android.telephony.ims.ImsSuppServiceNotification)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller",
    "implCls": "android.content.pm.IPackageInstaller",
    "inf": "android.content.pm.IPackageInstaller",
    "mtd": "<android.content.pm.IPackageInstaller: void updateSessionAppLabel(int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.backup.BackupManager",
    "implCls": "com.android.server.backup.Trampoline",
    "inf": "android.app.backup.IBackupManager",
    "mtd": "<android.app.backup.IBackupManager: int requestBackup(java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>"
  },
  {
    "helperCls": "android.app.UiAutomationConnection",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void finishInput()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMapClient",
    "implCls": "android.bluetooth.IBluetoothMapClient",
    "inf": "android.bluetooth.IBluetoothMapClient",
    "mtd": "<android.bluetooth.IBluetoothMapClient: int getPriority(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: java.util.List getUsers(boolean)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void initializeMulticastFiltering()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int getIntentVerificationStatus(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void remove(android.view.IWindow)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: android.hardware.input.KeyboardLayout[] getKeyboardLayouts()>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void start(java.lang.String,android.telephony.ims.ImsCallProfile)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionInitiatedFailed(android.telephony.ims.ImsReasonInfo)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setRingerModeExternal(int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: long getLastSecurityLogRetrievalTime()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isMasterVolumeMuted(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void updateCursor(android.graphics.Rect)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setUserProvisioningState(int,int)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionTerminated(android.telephony.ims.ImsReasonInfo)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean isUserRunning(int)>"
  },
  {
    "helperCls": "android.media.midi.MidiManager",
    "implCls": "com.android.server.midi.MidiService",
    "inf": "android.media.midi.IMidiManager",
    "mtd": "<android.media.midi.IMidiManager: void registerListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.VolumeInfo[] getVolumes(int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: int getState()>"
  },
  {
    "helperCls": "android.app.UiAutomation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: android.graphics.Bitmap takeScreenshot(android.graphics.Rect,int)>"
  },
  {
    "helperCls": "android.os.PowerManager",
    "implCls": "com.android.server.DeviceIdleController$BinderService",
    "inf": "android.os.IDeviceIdleController",
    "mtd": "<android.os.IDeviceIdleController: boolean isPowerSaveWhitelistApp(java.lang.String)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean switchToPreviousInputMethod(android.os.IBinder)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void unloadSoundEffects()>"
  },
  {
    "helperCls": "android.util.StatsLog",
    "implCls": "android.os.IStatsManager",
    "inf": "android.os.IStatsManager",
    "mtd": "<android.os.IStatsManager: void sendAppBreadcrumbAtom(int,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void stopDtmfTone(java.lang.String,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: int getUserHandle(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean getCrossProfileCallerIdDisabledForUser(int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean isManagedProfile(int)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: java.lang.String getPackageName()>"
  },
  {
    "helperCls": "android.provider.Settings$Secure",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void reportSuccessfulFingerprintAttempt(int)>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: android.content.res.Configuration getConfiguration()>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void answerVideo(java.lang.String,int,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int checkOperation(int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setNetworkLoggingEnabled(android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputContext",
    "inf": "com.android.internal.view.IInputContext",
    "mtd": "<com.android.internal.view.IInputContext: void finishComposingText()>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void setTestProviderLocation(java.lang.String,android.location.Location,java.lang.String)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int getSupportedFeatures()>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void startCommissioningSession(android.net.lowpan.LowpanBeaconInfo)>"
  },
  {
    "helperCls": "android.companion.CompanionDeviceManager",
    "implCls": "com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl",
    "inf": "android.companion.ICompanionDeviceManager",
    "mtd": "<android.companion.ICompanionDeviceManager: android.app.PendingIntent requestNotificationAccess(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int installExistingPackageAsUser(java.lang.String,int,int,int)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanManager",
    "implCls": "android.net.lowpan.ILowpanManager",
    "inf": "android.net.lowpan.ILowpanManager",
    "mtd": "<android.net.lowpan.ILowpanManager: android.net.lowpan.ILowpanInterface getInterface(java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.Camera",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean hasUserRestrictionOnAnyUser(java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean hasDeviceOwner()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: void dispatchVolumeKeyEvent(java.lang.String,boolean,android.view.KeyEvent,int,boolean)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryContentProviders(java.lang.String,int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void registerCallback(android.hardware.display.IDisplayManagerCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: boolean isEnabled()>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: boolean isUp()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: void clearWallpaper(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.content.pm.AppsQueryHelper",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentServices(android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int movePrimaryStorage(java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getLongSupportMessage(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: void createNotificationChannelGroups(java.lang.String,android.content.pm.ParceledListSlice)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void flushGnssBatch(java.lang.String)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: android.os.ParcelFileDescriptor getShortcutIconFd(java.lang.String,java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.net.NetworkScoreManager",
    "implCls": "com.android.server.NetworkScoreService",
    "inf": "android.net.INetworkScoreService",
    "mtd": "<android.net.INetworkScoreService: boolean isCallerActiveScorer(int)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Hardware",
    "implCls": "android.media.tv.ITvInputHardware",
    "inf": "android.media.tv.ITvInputHardware",
    "mtd": "<android.media.tv.ITvInputHardware: void setStreamVolume(float)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: int getWidthHint()>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: boolean isGlobalPriorityActive()>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: byte[] sign(java.lang.String,byte[])>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int getWifiApEnabledState()>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: boolean updateAutomaticZenRule(java.lang.String,android.app.AutomaticZenRule)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.media.session.MediaSession",
    "implCls": "android.media.session.ISession",
    "inf": "android.media.session.ISession",
    "mtd": "<android.media.session.ISession: void setFlags(int)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: void showAppDetailsAsUser(android.app.IApplicationThread,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: int getZenMode()>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: boolean sendMediaButton(java.lang.String,android.media.session.ISessionControllerCallback,boolean,android.view.KeyEvent)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void removeClient(android.view.autofill.IAutoFillManagerClient,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.app.trust.TrustManager",
    "implCls": "android.app.trust.ITrustManager",
    "inf": "android.app.trust.ITrustManager",
    "mtd": "<android.app.trust.ITrustManager: void unregisterTrustListener(android.app.trust.ITrustListener)>"
  },
  {
    "helperCls": "android.media.soundtrigger.SoundTriggerManager",
    "implCls": "com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub",
    "inf": "com.android.internal.app.ISoundTriggerService",
    "mtd": "<com.android.internal.app.ISoundTriggerService: int loadKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)>"
  },
  {
    "helperCls": "android.net.wifi.aware.WifiAwareManager",
    "implCls": "com.android.server.wifi.aware.WifiAwareServiceImpl",
    "inf": "android.net.wifi.aware.IWifiAwareManager",
    "mtd": "<android.net.wifi.aware.IWifiAwareManager: void sendMessage(int,int,int,byte[],int,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setMaximumTimeToLock(android.content.ComponentName,long,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isEnabled()>"
  },
  {
    "helperCls": "android.hardware.camera2.impl.ICameraDeviceUserWrapper",
    "implCls": "android.hardware.camera2.ICameraDeviceUser",
    "inf": "android.hardware.camera2.ICameraDeviceUser",
    "mtd": "<android.hardware.camera2.ICameraDeviceUser: void prepare2(int,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int checkPermission(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAvrcpController",
    "implCls": "android.bluetooth.IBluetoothAvrcpController",
    "inf": "android.bluetooth.IBluetoothAvrcpController",
    "mtd": "<android.bluetooth.IBluetoothAvrcpController: android.bluetooth.BluetoothAvrcpPlayerSettings getPlayerSettings(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.net.sip.SipManager",
    "implCls": "com.android.server.sip.SipService",
    "inf": "android.net.sip.ISipService",
    "mtd": "<android.net.sip.ISipService: boolean isOpened(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: boolean areNotificationsEnabled(java.lang.String)>"
  },
  {
    "helperCls": "android.print.PrintManager",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: void removePrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: android.telecom.PhoneAccount getPhoneAccount(android.telecom.PhoneAccountHandle)>"
  },
  {
    "helperCls": "android.app.usage.UsageStatsManager",
    "implCls": "com.android.server.usage.UsageStatsService$BinderService",
    "inf": "android.app.usage.IUsageStatsManager",
    "mtd": "<android.app.usage.IUsageStatsManager: void reportChooserSelection(java.lang.String,int,java.lang.String,java.lang.String[],java.lang.String)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getRingerModeInternal()>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: int getState()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: com.android.internal.inputmethod.IInputContentUriToken createInputContentUriToken(android.os.IBinder,android.net.Uri,java.lang.String)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: void setNotificationPolicyAccessGranted(java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setVibrateSetting(int,int)>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: boolean addDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>"
  },
  {
    "helperCls": "android.view.textclassifier.SystemTextClassifier",
    "implCls": "com.android.server.textclassifier.TextClassificationManagerService",
    "inf": "android.service.textclassifier.ITextClassifierService",
    "mtd": "<android.service.textclassifier.ITextClassifierService: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: boolean isLocationEnabledForUser(int)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: void notifyAppWidgetViewDataChanged(java.lang.String,int[],int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowed(java.lang.String,int,int,java.lang.String[])>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: android.content.ComponentName getEffectsSuppressor()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>"
  },
  {
    "helperCls": "android.hardware.hdmi.HdmiControlManager",
    "implCls": "com.android.server.hdmi.HdmiControlService$BinderService",
    "inf": "android.hardware.hdmi.IHdmiControlService",
    "mtd": "<android.hardware.hdmi.IHdmiControlService: void removeHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: int[] getInputDeviceIds()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean approveCaCert(java.lang.String,int,boolean)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void setTemporaryAutoBrightnessAdjustment(float)>"
  },
  {
    "helperCls": "android.telecom.RemoteConference",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void splitFromConference(java.lang.String,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void destroy()>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void destroy()>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void destroy()>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void destroy()>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int addClient(android.view.autofill.IAutoFillManagerClient,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getShortSupportMessageForUser(android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMap",
    "implCls": "android.bluetooth.IBluetoothMap",
    "inf": "android.bluetooth.IBluetoothMap",
    "mtd": "<android.bluetooth.IBluetoothMap: java.util.List getDevicesMatchingConnectionStates(int[])>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: java.lang.String addAutomaticZenRule(android.app.AutomaticZenRule)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHearingAid",
    "implCls": "android.bluetooth.IBluetoothHearingAid",
    "inf": "android.bluetooth.IBluetoothHearingAid",
    "mtd": "<android.bluetooth.IBluetoothHearingAid: boolean connect(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: android.net.NetworkStats getDataLayerSnapshotForUid(int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: boolean isPlaybackActive(android.media.IMediaRouterClient)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: void registerCallbackListener(java.lang.String,android.media.session.ISessionControllerCallback)>"
  },
  {
    "helperCls": "android.hardware.location.ContextHubClient",
    "implCls": "android.hardware.location.IContextHubClient",
    "inf": "android.hardware.location.IContextHubClient",
    "mtd": "<android.hardware.location.IContextHubClient: void close()>"
  },
  {
    "helperCls": "android.hardware.location.ContextHubClient",
    "implCls": "android.hardware.location.IContextHubClient",
    "inf": "android.hardware.location.IContextHubClient",
    "mtd": "<android.hardware.location.IContextHubClient: void close()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean setApplicationRestrictionsManagingPackage(android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean isDemoUser(int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputContext",
    "inf": "com.android.internal.view.IInputContext",
    "mtd": "<com.android.internal.view.IInputContext: void finishComposingText()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dp",
    "implCls": "android.bluetooth.IBluetoothA2dp",
    "inf": "android.bluetooth.IBluetoothA2dp",
    "mtd": "<android.bluetooth.IBluetoothA2dp: int supportsOptionalCodecs(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: boolean setPrintJobState(android.print.PrintJobId,int,java.lang.String)>"
  },
  {
    "helperCls": "android.media.midi.MidiOutputPort",
    "implCls": "android.media.midi.IMidiDeviceServer",
    "inf": "android.media.midi.IMidiDeviceServer",
    "mtd": "<android.media.midi.IMidiDeviceServer: void closePort(android.os.IBinder)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.le.AdvertisingSet",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void setPeriodicAdvertisingEnable(int,boolean)>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.Session",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.util.MergedConfiguration,android.view.Surface)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothPbap",
    "implCls": "android.bluetooth.IBluetoothPbap",
    "inf": "android.bluetooth.IBluetoothPbap",
    "mtd": "<android.bluetooth.IBluetoothPbap: void disconnect(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanManager",
    "implCls": "android.net.lowpan.ILowpanManager",
    "inf": "android.net.lowpan.ILowpanManager",
    "mtd": "<android.net.lowpan.ILowpanManager: java.lang.String[] getInterfaceList()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: boolean disconnectAudio()>"
  },
  {
    "helperCls": "android.print.PrintManager",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: void addPrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: boolean isNotificationPolicyAccessGranted(java.lang.String)>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: android.content.res.Configuration getConfiguration()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.telecom.VideoCallImpl",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void removeVideoCallback(android.os.IBinder)>"
  },
  {
    "helperCls": "android.nfc.dta.NfcDta",
    "implCls": "android.nfc.INfcDta",
    "inf": "android.nfc.INfcDta",
    "mtd": "<android.nfc.INfcDta: void disableClient()>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Hardware",
    "implCls": "android.media.tv.ITvInputHardware",
    "inf": "android.media.tv.ITvInputHardware",
    "mtd": "<android.media.tv.ITvInputHardware: boolean setSurface(android.view.Surface,android.media.tv.TvStreamConfig)>"
  },
  {
    "helperCls": "android.print.PrintManager",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)>"
  },
  {
    "helperCls": "android.app.StatusBarManager",
    "implCls": "com.android.server.statusbar.StatusBarManagerService",
    "inf": "com.android.internal.statusbar.IStatusBarService",
    "mtd": "<com.android.internal.statusbar.IStatusBarService: void expandSettingsPanel(java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void freeStorageAndNotify(java.lang.String,long,int,android.content.pm.IPackageDataObserver)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: int getState()>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "android.view.autofill.IAutoFillManagerClient",
    "inf": "android.view.autofill.IAutoFillManagerClient",
    "mtd": "<android.view.autofill.IAutoFillManagerClient: void setTrackedViews(int,android.view.autofill.AutofillId[],boolean,boolean,android.view.autofill.AutofillId[],android.view.autofill.AutofillId)>"
  },
  {
    "helperCls": "android.app.usage.StorageStatsManager",
    "implCls": "com.android.server.usage.StorageStatsService",
    "inf": "android.app.usage.IStorageStatsManager",
    "mtd": "<android.app.usage.IStorageStatsManager: android.app.usage.StorageStats queryStatsForUser(java.lang.String,int,java.lang.String)>"
  },
  {
    "helperCls": "android.os.RecoverySystem",
    "implCls": "com.android.server.RecoverySystemService$BinderService",
    "inf": "android.os.IRecoverySystem",
    "mtd": "<android.os.IRecoverySystem: void rebootRecoveryWithCommand(java.lang.String)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.VolumeInfo[] getVolumes(int)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: java.util.List getAllMatchingWifiConfigs(android.net.wifi.ScanResult)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void disconnectCall(java.lang.String)>"
  },
  {
    "helperCls": "android.security.keystore.recovery.RecoveryController",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: android.security.keystore.recovery.KeyChainSnapshot getKeyChainSnapshot()>"
  },
  {
    "helperCls": "android.hardware.location.GeofenceHardwareImpl",
    "implCls": "android.location.IGpsGeofenceHardware",
    "inf": "android.location.IGpsGeofenceHardware",
    "mtd": "<android.location.IGpsGeofenceHardware: boolean isHardwareGeofenceSupported()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.ActivityManager$AppTask",
    "implCls": "android.app.IAppTask",
    "inf": "android.app.IAppTask",
    "mtd": "<android.app.IAppTask: void setExcludeFromRecents(boolean)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void stopWatchingActive(com.android.internal.app.IAppOpsActiveCallback)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: android.content.res.Configuration getConfiguration()>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: void remove(android.os.IBinder,int,int,int,android.hardware.fingerprint.IFingerprintServiceReceiver)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: void updateStatusIcon(android.os.IBinder,java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.VolumeRecord[] getVolumeRecords(int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.util.List getCrossProfileWidgetProviders(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getStreamMaxVolume(int)>"
  },
  {
    "helperCls": "android.content.pm.AppsQueryHelper",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getInstalledApplications(int,int)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isValidRingerMode(int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: void setUserRestriction(java.lang.String,boolean,int)>"
  },
  {
    "helperCls": "android.telephony.ims.stub.ImsSmsImplBase",
    "implCls": "android.telephony.ims.aidl.IImsSmsListener",
    "inf": "android.telephony.ims.aidl.IImsSmsListener",
    "mtd": "<android.telephony.ims.aidl.IImsSmsListener: void onSendSmsResult(int,int,int,int)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.sip.SipSession",
    "implCls": "android.net.sip.ISipSession",
    "inf": "android.net.sip.ISipSession",
    "mtd": "<android.net.sip.ISipSession: android.net.sip.SipProfile getLocalProfile()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int setStorageEncryption(android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.lang.String,byte[],byte[],boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentContentProviders(android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: int getState()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void createSession(android.media.tv.ITvInputClient,java.lang.String,boolean,int,int)>"
  },
  {
    "helperCls": "android.app.UiAutomation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: void disconnect()>"
  },
  {
    "helperCls": "android.view.textservice.TextServicesManager",
    "implCls": "com.android.server.TextServicesManagerService",
    "inf": "com.android.internal.textservice.ITextServicesManager",
    "mtd": "<com.android.internal.textservice.ITextServicesManager: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers()>"
  },
  {
    "helperCls": "android.service.autofill.SaveCallback",
    "implCls": "android.service.autofill.ISaveCallback",
    "inf": "android.service.autofill.ISaveCallback",
    "mtd": "<android.service.autofill.ISaveCallback: void onSuccess(android.content.IntentSender)>"
  },
  {
    "helperCls": "android.net.IpSecManager$UdpEncapsulationSocket",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: void closeUdpEncapsulationSocket(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.content.ComponentName getProfileOwner(int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isSecurityLoggingEnabled(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void stopTethering()>"
  },
  {
    "helperCls": "android.app.backup.RestoreSession",
    "implCls": "android.app.backup.IRestoreSession",
    "inf": "android.app.backup.IRestoreSession",
    "mtd": "<android.app.backup.IRestoreSession: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor)>"
  },
  {
    "helperCls": "android.telephony.ims.stub.ImsMultiEndpointImplBase",
    "implCls": "com.android.ims.internal.IImsExternalCallStateListener",
    "inf": "com.android.ims.internal.IImsExternalCallStateListener",
    "mtd": "<com.android.ims.internal.IImsExternalCallStateListener: void onImsExternalCallStateUpdate(java.util.List)>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int getSupportedFeatures()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "inf": "com.android.internal.app.IVoiceInteractionManagerService",
    "mtd": "<com.android.internal.app.IVoiceInteractionManagerService: boolean hideSessionFromSession(android.os.IBinder)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void setInTouchMode(boolean)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean outOfMemory(android.view.IWindow)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void endReliableWrite(int,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.app.slice.SliceManager",
    "implCls": "com.android.server.slice.SliceManagerService",
    "inf": "android.app.slice.ISliceManager",
    "mtd": "<android.app.slice.ISliceManager: void pinSlice(java.lang.String,android.net.Uri,android.app.slice.SliceSpec[],android.os.IBinder)>"
  },
  {
    "helperCls": "android.content.RestrictionsManager",
    "implCls": "com.android.server.restrictions.RestrictionsManagerService$RestrictionsManagerImpl",
    "inf": "android.content.IRestrictionsManager",
    "mtd": "<android.content.IRestrictionsManager: void notifyPermissionResponse(java.lang.String,android.os.PersistableBundle)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: boolean hasShortcutHostPermission(java.lang.String)>"
  },
  {
    "helperCls": "android.app.VrManager",
    "implCls": "android.service.vr.IVrManager",
    "inf": "android.service.vr.IVrManager",
    "mtd": "<android.service.vr.IVrManager: void setStandbyEnabled(boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.content.ComponentName getDeviceOwnerComponent(boolean)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void setVolumeNickname(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean setScanMode(int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHealth",
    "implCls": "android.bluetooth.IBluetoothHealth",
    "inf": "android.bluetooth.IBluetoothHealth",
    "mtd": "<android.bluetooth.IBluetoothHealth: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: long getUserStartRealtime()>"
  },
  {
    "helperCls": "android.print.PrintManager",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: java.util.List getPrintServices(int,int)>"
  },
  {
    "helperCls": "android.telephony.ims.feature.ImsFeature$CapabilityCallbackProxy",
    "implCls": "android.telephony.ims.aidl.IImsCapabilityCallback",
    "inf": "android.telephony.ims.aidl.IImsCapabilityCallback",
    "mtd": "<android.telephony.ims.aidl.IImsCapabilityCallback: void onChangeCapabilityConfigurationError(int,int,int)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: void setBindAppWidgetPermission(java.lang.String,int,boolean)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void reloadAudioSettings()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.util.List setMeteredDataDisabledPackages(android.content.ComponentName,java.util.List)>"
  },
  {
    "helperCls": "android.net.sip.SipSession",
    "implCls": "android.net.sip.ISipSession",
    "inf": "android.net.sip.ISipSession",
    "mtd": "<android.net.sip.ISipSession: android.net.sip.SipProfile getPeerProfile()>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getStreamMaxVolume(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean setTime(android.content.ComponentName,long)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getUiSoundsStreamType()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: void hideMySoftInput(android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: void requestActivityInfo(android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHearingAid",
    "implCls": "android.bluetooth.IBluetoothHearingAid",
    "inf": "android.bluetooth.IBluetoothHearingAid",
    "mtd": "<android.bluetooth.IBluetoothHearingAid: int getConnectionState(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionResumed(android.telephony.ims.ImsCallProfile)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: void clearLastInputMethodWindowForTransition(android.os.IBinder)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getStreamVolume(int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void abort(java.lang.String,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>"
  },
  {
    "helperCls": "android.telephony.ims.stub.ImsSmsImplBase",
    "implCls": "android.telephony.ims.aidl.IImsSmsListener",
    "inf": "android.telephony.ims.aidl.IImsSmsListener",
    "mtd": "<android.telephony.ims.aidl.IImsSmsListener: void onSendSmsResult(int,int,int,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean getCrossProfileContactsSearchDisabled(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void setForegroundDispatch(android.app.PendingIntent,android.content.IntentFilter[],android.nfc.TechListParcel)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidHost",
    "implCls": "android.bluetooth.IBluetoothHidHost",
    "inf": "android.bluetooth.IBluetoothHidHost",
    "mtd": "<android.bluetooth.IBluetoothHidHost: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void enforceCanManageCaCerts(android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.app.SearchManager",
    "implCls": "com.android.server.search.SearchManagerService",
    "inf": "android.app.ISearchManager",
    "mtd": "<android.app.ISearchManager: android.content.ComponentName getGlobalSearchActivity()>"
  },
  {
    "helperCls": "android.service.persistentdata.PersistentDataBlockManager",
    "implCls": "android.service.persistentdata.IPersistentDataBlockService",
    "inf": "android.service.persistentdata.IPersistentDataBlockService",
    "mtd": "<android.service.persistentdata.IPersistentDataBlockService: int getDataBlockSize()>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: java.lang.String[] getEnabledKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputContext",
    "inf": "com.android.internal.view.IInputContext",
    "mtd": "<com.android.internal.view.IInputContext: void finishComposingText()>"
  },
  {
    "helperCls": "android.app.KeyguardManager",
    "implCls": "android.app.trust.ITrustManager",
    "inf": "android.app.trust.ITrustManager",
    "mtd": "<android.app.trust.ITrustManager: boolean isDeviceLocked(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMap",
    "implCls": "android.bluetooth.IBluetoothMap",
    "inf": "android.bluetooth.IBluetoothMap",
    "mtd": "<android.bluetooth.IBluetoothMap: int getConnectionState(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: boolean isWallpaperSupported(java.lang.String)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setBluetoothA2dpOn(boolean)>"
  },
  {
    "helperCls": "android.os.PowerManager",
    "implCls": "com.android.server.power.PowerManagerService$BinderService",
    "inf": "android.os.IPowerManager",
    "mtd": "<android.os.IPowerManager: void userActivity(long,int,int)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: android.telecom.PhoneAccountHandle getSimCallManagerForUser(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean getStorageEncryption(android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.os.SystemUpdateManager",
    "implCls": "com.android.server.SystemUpdateManagerService",
    "inf": "android.os.ISystemUpdateManager",
    "mtd": "<android.os.ISystemUpdateManager: android.os.Bundle retrieveSystemUpdateInfo()>"
  },
  {
    "helperCls": "android.app.usage.StorageStatsManager",
    "implCls": "com.android.server.usage.StorageStatsService",
    "inf": "android.app.usage.IStorageStatsManager",
    "mtd": "<android.app.usage.IStorageStatsManager: long getFreeBytes(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: boolean isAudioOn()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isMultiAdvertisementSupported()>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: java.lang.String[] getTetherableIfaces()>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getVibrateSetting(int)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: void updateAppWidgetProviderInfo(android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: boolean isVoiceMailNumber(android.telecom.PhoneAccountHandle,java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void verifyNfcPermission()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: java.lang.String getPackageName()>"
  },
  {
    "helperCls": "android.net.NetworkScoreManager",
    "implCls": "com.android.server.NetworkScoreService",
    "inf": "android.net.INetworkScoreService",
    "mtd": "<android.net.INetworkScoreService: android.net.NetworkScorerAppData getActiveScorer()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: void setWallpaperComponentChecked(android.content.ComponentName,java.lang.String,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: void setPassword(android.accounts.Account,java.lang.String)>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId)>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothManager",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.hardware.location.ContextHubManager",
    "implCls": "com.android.server.location.ContextHubService",
    "inf": "android.hardware.location.IContextHubService",
    "mtd": "<android.hardware.location.IContextHubService: android.hardware.location.IContextHubClient createClient(android.hardware.location.IContextHubClientCallback,int)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: void acceptRingingCall(java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.usb.UsbManager",
    "implCls": "com.android.server.usb.UsbService",
    "inf": "android.hardware.usb.IUsbManager",
    "mtd": "<android.hardware.usb.IUsbManager: android.hardware.usb.UsbAccessory getCurrentAccessory()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: boolean isRatingBlocked(java.lang.String,int)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void sendTvInputNotifyIntent(android.content.Intent,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setDelegatedScopes(android.content.ComponentName,java.lang.String,java.util.List)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void attach(android.net.lowpan.LowpanProvision)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void finishSession(int,int)>"
  },
  {
    "helperCls": "android.net.IpSecManager$SecurityParameterIndex",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: android.net.IpSecSpiResponse allocateSecurityParameterIndex(java.lang.String,int,android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: java.lang.String getServicesSystemSharedLibraryPackageName()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean showSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void connectWifiDisplay(java.lang.String)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void removeExtras(java.lang.String,java.util.List)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int generateKey(java.lang.String,android.security.keymaster.KeymasterArguments,byte[],int,int,android.security.keymaster.KeyCharacteristics)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void sendRttRequest(java.lang.String)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void addBlockedRating(java.lang.String,int)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getStreamMinVolume(int)>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void onPostDialContinue(java.lang.String,boolean,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMap",
    "implCls": "android.bluetooth.IBluetoothMap",
    "inf": "android.bluetooth.IBluetoothMap",
    "mtd": "<android.bluetooth.IBluetoothMap: int getState()>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void hold(java.lang.String,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.app.usage.StorageStatsManager",
    "implCls": "com.android.server.usage.StorageStatsService",
    "inf": "android.app.usage.IStorageStatsManager",
    "mtd": "<android.app.usage.IStorageStatsManager: long getCacheBytes(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps$PinItemRequest",
    "implCls": "android.content.pm.IPinItemRequest",
    "inf": "android.content.pm.IPinItemRequest",
    "mtd": "<android.content.pm.IPinItemRequest: boolean isValid()>"
  },
  {
    "helperCls": "android.hardware.location.ContextHubManager",
    "implCls": "com.android.server.location.ContextHubService",
    "inf": "android.hardware.location.IContextHubService",
    "mtd": "<android.hardware.location.IContextHubService: java.util.List getContextHubs()>"
  },
  {
    "helperCls": "android.os.UpdateEngine",
    "implCls": "android.os.IUpdateEngine",
    "inf": "android.os.IUpdateEngine",
    "mtd": "<android.os.IUpdateEngine: boolean verifyPayloadApplicable(java.lang.String)>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void finishSelf(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void finishSelf(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void updateSession(int,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,int,int)>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: void unregisterTaskStackListener(android.app.ITaskStackListener)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: android.view.InputDevice getInputDevice(int)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsUtListener",
    "implCls": "com.android.ims.internal.IImsUtListener",
    "inf": "com.android.ims.internal.IImsUtListener",
    "mtd": "<com.android.ims.internal.IImsUtListener: void utConfigurationQueryFailed(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsReasonInfo)>"
  },
  {
    "helperCls": "android.print.PrintManager",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: void addPrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller",
    "implCls": "android.content.pm.IPackageInstaller",
    "inf": "android.content.pm.IPackageInstaller",
    "mtd": "<android.content.pm.IPackageInstaller: android.content.pm.IPackageInstallerSession openSession(int)>"
  },
  {
    "helperCls": "android.app.backup.BackupManager",
    "implCls": "com.android.server.backup.Trampoline",
    "inf": "android.app.backup.IBackupManager",
    "mtd": "<android.app.backup.IBackupManager: android.app.backup.IRestoreSession beginRestoreSession(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: boolean isProviderEnabledForUser(java.lang.String,int)>"
  },
  {
    "helperCls": "android.accounts.AccountManagerResponse",
    "implCls": "android.accounts.IAccountManagerResponse",
    "inf": "android.accounts.IAccountManagerResponse",
    "mtd": "<android.accounts.IAccountManagerResponse: void onResult(android.os.Bundle)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: void dispatchAdjustVolume(java.lang.String,int,int,int)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: android.telephony.ims.ImsCallProfile getLocalCallProfile()>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean setMessageAccessPermission(android.bluetooth.BluetoothDevice,int)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsUtListener",
    "implCls": "com.android.ims.internal.IImsUtListener",
    "inf": "com.android.ims.internal.IImsUtListener",
    "mtd": "<com.android.ims.internal.IImsUtListener: void utConfigurationUpdated(com.android.ims.internal.IImsUt,int)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.net.IpSecManager$SecurityParameterIndex",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: android.net.IpSecSpiResponse allocateSecurityParameterIndex(java.lang.String,int,android.os.IBinder)>"
  },
  {
    "helperCls": "android.provider.Settings$Secure",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMap",
    "implCls": "android.bluetooth.IBluetoothMap",
    "inf": "android.bluetooth.IBluetoothMap",
    "mtd": "<android.bluetooth.IBluetoothMap: int getState()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: boolean enableNetwork(int,boolean,java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void finishInput()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.os.PersistableBundle getSuspendedPackageAppExtras(java.lang.String,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void unregisterAudioPolicyAsync(android.media.audiopolicy.IAudioPolicyCallback)>"
  },
  {
    "helperCls": "android.se.omapi.Session",
    "implCls": "android.se.omapi.ISecureElementSession",
    "inf": "android.se.omapi.ISecureElementSession",
    "mtd": "<android.se.omapi.ISecureElementSession: android.se.omapi.ISecureElementChannel openBasicChannel(byte[],byte,android.se.omapi.ISecureElementListener)>"
  },
  {
    "helperCls": "android.net.NetworkPolicyManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: int getUidPolicy(int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void updateSession(int,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,int,int)>"
  },
  {
    "helperCls": "android.net.NetworkPolicyManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: void removeUidPolicy(int,int)>"
  },
  {
    "helperCls": "android.content.pm.CrossProfileApps",
    "implCls": "com.android.server.pm.CrossProfileAppsServiceImpl",
    "inf": "android.content.pm.ICrossProfileApps",
    "mtd": "<android.content.pm.ICrossProfileApps: java.util.List getTargetUserProfiles(java.lang.String)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: android.accounts.Account[] getSharedAccountsAsUser(int)>"
  },
  {
    "helperCls": "android.net.sip.SipManager",
    "implCls": "com.android.server.sip.SipService",
    "inf": "android.net.sip.ISipService",
    "mtd": "<android.net.sip.ISipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: java.lang.String[] getPackagesForUid(int)>"
  },
  {
    "helperCls": "android.hardware.usb.UsbManager",
    "implCls": "com.android.server.usb.UsbService",
    "inf": "android.hardware.usb.IUsbManager",
    "mtd": "<android.hardware.usb.IUsbManager: android.hardware.usb.UsbPortStatus getPortStatus(java.lang.String)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothManager",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputContext",
    "inf": "com.android.internal.view.IInputContext",
    "mtd": "<com.android.internal.view.IInputContext: void finishComposingText()>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: void setProvisioningNotificationVisible(boolean,int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: boolean disable(java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void addListener(android.net.lowpan.ILowpanInterfaceListener)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: int getInputMethodWindowVisibleHeight()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isUsingUnifiedPassword(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: android.bluetooth.IBluetoothSocketManager getSocketManager()>"
  },
  {
    "helperCls": "android.os.PowerManager",
    "implCls": "com.android.server.power.PowerManagerService$BinderService",
    "inf": "android.os.IPowerManager",
    "mtd": "<android.os.IPowerManager: void wakeUp(long,java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)>"
  },
  {
    "helperCls": "android.app.VrManager",
    "implCls": "android.service.vr.IVrManager",
    "inf": "android.service.vr.IVrManager",
    "mtd": "<android.service.vr.IVrManager: void setPersistentVrModeEnabled(boolean)>"
  },
  {
    "helperCls": "android.service.oemlock.OemLockManager",
    "implCls": "android.service.oemlock.IOemLockService",
    "inf": "android.service.oemlock.IOemLockService",
    "mtd": "<android.service.oemlock.IOemLockService: boolean isOemUnlockAllowedByUser()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: android.content.pm.ParceledListSlice getInstalledProvidersForProfile(int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: boolean hasBindAppWidgetPermission(java.lang.String,int)>"
  },
  {
    "helperCls": "android.service.persistentdata.PersistentDataBlockManager",
    "implCls": "android.service.persistentdata.IPersistentDataBlockService",
    "inf": "android.service.persistentdata.IPersistentDataBlockService",
    "mtd": "<android.service.persistentdata.IPersistentDataBlockService: void setOemUnlockEnabled(boolean)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "android.view.autofill.IAutoFillManagerClient",
    "inf": "android.view.autofill.IAutoFillManagerClient",
    "mtd": "<android.view.autofill.IAutoFillManagerClient: void setSaveUiState(int,boolean)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: void releaseNetworkRequest(android.net.NetworkRequest)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getOrganizationNameForUser(int)>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void stopDozing(android.os.IBinder)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: android.service.autofill.UserData getUserData()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void prepareUserStorage(java.lang.String,int,int,int)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Session",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void setMainSession(android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void allocateBytes(java.lang.String,long,int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "android.app.IInputForwarder",
    "inf": "android.app.IInputForwarder",
    "mtd": "<android.app.IInputForwarder: boolean forwardEvent(android.view.InputEvent)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration,java.lang.String)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "inf": "com.android.internal.app.IVoiceInteractionManagerService",
    "mtd": "<com.android.internal.app.IVoiceInteractionManagerService: void setDisabledShowContext(int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.service.wallpaper.IWallpaperConnection",
    "inf": "android.service.wallpaper.IWallpaperConnection",
    "mtd": "<android.service.wallpaper.IWallpaperConnection: void engineShown(android.service.wallpaper.IWallpaperEngine)>"
  },
  {
    "helperCls": "android.hardware.Camera",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int checkAudioOperation(int,int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void renameWifiDisplay(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.content.pm.CrossProfileApps",
    "implCls": "com.android.server.pm.CrossProfileAppsServiceImpl",
    "inf": "android.content.pm.ICrossProfileApps",
    "mtd": "<android.content.pm.ICrossProfileApps: java.util.List getTargetUserProfiles(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isAffiliatedUser()>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionMultipartyStateChanged(boolean)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.view.textservice.SpellCheckerSession",
    "implCls": "com.android.server.TextServicesManagerService",
    "inf": "com.android.internal.textservice.ITextServicesManager",
    "mtd": "<com.android.internal.textservice.ITextServicesManager: void finishSpellCheckerService(com.android.internal.textservice.ISpellCheckerSessionListener)>"
  },
  {
    "helperCls": "android.speech.SpeechRecognizer",
    "implCls": "android.speech.IRecognitionService",
    "inf": "android.speech.IRecognitionService",
    "mtd": "<android.speech.IRecognitionService: void stopListening(android.speech.IRecognitionListener)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.Network[] getAllNetworks()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isLogoutEnabled()>"
  },
  {
    "helperCls": "android.net.wifi.aware.WifiAwareManager",
    "implCls": "com.android.server.wifi.aware.WifiAwareServiceImpl",
    "inf": "android.net.wifi.aware.IWifiAwareManager",
    "mtd": "<android.net.wifi.aware.IWifiAwareManager: void subscribe(java.lang.String,int,android.net.wifi.aware.SubscribeConfig,android.net.wifi.aware.IWifiAwareDiscoverySessionCallback)>"
  },
  {
    "helperCls": "android.hardware.camera2.impl.ICameraDeviceUserWrapper",
    "implCls": "android.hardware.camera2.ICameraDeviceUser",
    "inf": "android.hardware.camera2.ICameraDeviceUser",
    "mtd": "<android.hardware.camera2.ICameraDeviceUser: void beginConfigure()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: boolean isSetWallpaperAllowed(java.lang.String)>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void startDozing(android.os.IBinder,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int setHdmiSystemAudioSupported(boolean)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int updateOrRestartSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,int,int,boolean)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.telephony.SubscriptionManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: java.lang.String getSubscriptionPlansOwner(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: android.bluetooth.IBluetoothSocketManager getSocketManager()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidDevice",
    "implCls": "android.bluetooth.IBluetoothHidDevice",
    "inf": "android.bluetooth.IBluetoothHidDevice",
    "mtd": "<android.bluetooth.IBluetoothHidDevice: boolean sendReport(android.bluetooth.BluetoothDevice,int,byte[])>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void cancelSession(int,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: void updateStatusIcon(android.os.IBinder,java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.usage.NetworkStats",
    "implCls": "android.net.INetworkStatsSession",
    "inf": "android.net.INetworkStatsSession",
    "mtd": "<android.net.INetworkStatsSession: void close()>"
  },
  {
    "helperCls": "android.app.usage.NetworkStats",
    "implCls": "android.net.INetworkStatsSession",
    "inf": "android.net.INetworkStatsSession",
    "mtd": "<android.net.INetworkStatsSession: void close()>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void disableSafeMediaVolume(java.lang.String)>"
  },
  {
    "helperCls": "android.print.PrintManager$PrintDocumentAdapterDelegate",
    "implCls": "android.print.IPrintDocumentAdapterObserver",
    "inf": "android.print.IPrintDocumentAdapterObserver",
    "mtd": "<android.print.IPrintDocumentAdapterObserver: void onDestroy()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean setScanMode(int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: boolean enable(java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int getPackageUid(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHearingAid",
    "implCls": "android.bluetooth.IBluetoothHearingAid",
    "inf": "android.bluetooth.IBluetoothHearingAid",
    "mtd": "<android.bluetooth.IBluetoothHearingAid: int getDeviceMode(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.trust.TrustManager",
    "implCls": "android.app.trust.ITrustManager",
    "inf": "android.app.trust.ITrustManager",
    "mtd": "<android.app.trust.ITrustManager: boolean isTrustUsuallyManaged(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothSap",
    "implCls": "android.bluetooth.IBluetoothSap",
    "inf": "android.bluetooth.IBluetoothSap",
    "mtd": "<android.bluetooth.IBluetoothSap: boolean isConnected(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: boolean isNotificationAssistantAccessGranted(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int addRngEntropy(byte[],int)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionUpdated(android.telephony.ims.ImsCallProfile)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void clientDisconnect(int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void setAppCallback(android.nfc.IAppCallback)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>"
  },
  {
    "helperCls": "android.media.midi.MidiDeviceServer",
    "implCls": "com.android.server.midi.MidiService",
    "inf": "android.media.midi.IMidiManager",
    "mtd": "<android.media.midi.IMidiManager: void unregisterDeviceServer(android.media.midi.IMidiDeviceServer)>"
  },
  {
    "helperCls": "android.os.DropBoxManager",
    "implCls": "com.android.internal.os.IDropBoxManagerService$Stub",
    "inf": "com.android.internal.os.IDropBoxManagerService",
    "mtd": "<com.android.internal.os.IDropBoxManagerService: boolean isTagEnabled(java.lang.String)>"
  },
  {
    "helperCls": "android.app.trust.TrustManager",
    "implCls": "android.app.trust.ITrustManager",
    "inf": "android.app.trust.ITrustManager",
    "mtd": "<android.app.trust.ITrustManager: void reportUnlockLockout(int,int)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void startBluetoothScoVirtualCall(android.os.IBinder)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: boolean isInputDeviceEnabled(int)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void hide()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: boolean connect(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: android.content.pm.ActivityInfo resolveActivity(java.lang.String,android.content.ComponentName,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void reject(int)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionInviteParticipantsRequestFailed(android.telephony.ims.ImsReasonInfo)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: void showStrictModeViolation(boolean)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int getSupportedFeatures()>"
  },
  {
    "helperCls": "android.print.PrintManager",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: java.util.List getPrintJobInfos(int,int)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller",
    "implCls": "android.content.pm.IPackageInstaller",
    "inf": "android.content.pm.IPackageInstaller",
    "mtd": "<android.content.pm.IPackageInstaller: void uninstall(android.content.pm.VersionedPackage,java.lang.String,int,android.content.IntentSender,int)>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: void showStrictModeViolation(boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getStreamMinVolume(int)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void startWatchLocalOnlyHotspot(android.os.Messenger,android.os.IBinder)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothPbapClient",
    "implCls": "android.bluetooth.IBluetoothPbapClient",
    "inf": "android.bluetooth.IBluetoothPbapClient",
    "mtd": "<android.bluetooth.IBluetoothPbapClient: boolean disconnect(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothManager",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHealth",
    "implCls": "android.bluetooth.IBluetoothHealth",
    "inf": "android.bluetooth.IBluetoothHealth",
    "mtd": "<android.bluetooth.IBluetoothHealth: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: boolean isMulticastEnabled()>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void finishSession(int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: void notifyUserAction(int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothSap",
    "implCls": "android.bluetooth.IBluetoothSap",
    "inf": "android.bluetooth.IBluetoothSap",
    "mtd": "<android.bluetooth.IBluetoothSap: int getState()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getStreamMaxVolume(int)>"
  },
  {
    "helperCls": "android.telephony.ims.feature.MmTelFeature",
    "implCls": "android.telephony.ims.aidl.IImsMmTelFeature",
    "inf": "android.telephony.ims.aidl.IImsMmTelFeature",
    "mtd": "<android.telephony.ims.aidl.IImsMmTelFeature: java.lang.String getSmsFormat()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "inf": "com.android.internal.app.IVoiceInteractionManagerService",
    "mtd": "<com.android.internal.app.IVoiceInteractionManagerService: void setKeepAwake(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: long getAllocatableBytes(java.lang.String,int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.util.MergedConfiguration,android.view.Surface)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void setRttMode(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.StatusBarManager",
    "implCls": "com.android.server.statusbar.StatusBarManagerService",
    "inf": "com.android.internal.statusbar.IStatusBarService",
    "mtd": "<com.android.internal.statusbar.IStatusBarService: void expandSettingsPanel(java.lang.String)>"
  },
  {
    "helperCls": "android.app.SearchManager",
    "implCls": "com.android.server.search.SearchManagerService",
    "inf": "android.app.ISearchManager",
    "mtd": "<android.app.ISearchManager: android.content.ComponentName getWebSearchActivity()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.app.VoiceInteractor",
    "implCls": "com.android.internal.app.IVoiceInteractor",
    "inf": "com.android.internal.app.IVoiceInteractor",
    "mtd": "<com.android.internal.app.IVoiceInteractor: boolean[] supportsCommands(java.lang.String,java.lang.String[])>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean outOfMemory(android.view.IWindow)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: int[] getAppWidgetIds(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void inviteParticipants(java.lang.String[])>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: boolean isPlaybackActive(android.media.IMediaRouterClient)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void removeBlockedRating(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: void registerTaskStackListener(android.app.ITaskStackListener)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: android.os.Messenger getWifiServiceMessenger(java.lang.String)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InputChannel)>"
  },
  {
    "helperCls": "android.media.session.MediaSession",
    "implCls": "android.media.session.ISession",
    "inf": "android.media.session.ISession",
    "mtd": "<android.media.session.ISession: void setLaunchPendingIntent(android.app.PendingIntent)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void addPersistentPreferredActivity(android.content.ComponentName,android.content.IntentFilter,android.content.ComponentName)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: void setOnVolumeKeyLongPressListener(android.media.session.IOnVolumeKeyLongPressListener)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: void setOnVolumeKeyLongPressListener(android.media.session.IOnVolumeKeyLongPressListener)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidHost",
    "implCls": "android.bluetooth.IBluetoothHidHost",
    "inf": "android.bluetooth.IBluetoothHidHost",
    "mtd": "<android.bluetooth.IBluetoothHidHost: boolean connect(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.content.pm.UserInfo createProfileForUser(java.lang.String,int,int,java.lang.String[])>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void turnOffProximitySensor(boolean)>"
  },
  {
    "helperCls": "android.app.timezone.RulesManager",
    "implCls": "com.android.server.timezone.RulesManagerService",
    "inf": "android.app.timezone.IRulesManager",
    "mtd": "<android.app.timezone.IRulesManager: void requestNothing(byte[],boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isBackupServiceEnabled(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean installCaCert(android.content.ComponentName,java.lang.String,byte[])>"
  },
  {
    "helperCls": "android.os.RecoverySystem",
    "implCls": "com.android.server.RecoverySystemService$BinderService",
    "inf": "android.os.IRecoverySystem",
    "mtd": "<android.os.IRecoverySystem: boolean uncrypt(java.lang.String,android.os.IRecoverySystemProgressListener)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: byte[] get(java.lang.String,int)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>"
  },
  {
    "helperCls": "android.companion.CompanionDeviceManager",
    "implCls": "com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl",
    "inf": "android.companion.ICompanionDeviceManager",
    "mtd": "<android.companion.ICompanionDeviceManager: boolean hasNotificationAccess(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.content.pm.AppsQueryHelper",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[],int,int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.app.slice.SliceManager",
    "implCls": "com.android.server.slice.SliceManagerService",
    "inf": "android.app.slice.ISliceManager",
    "mtd": "<android.app.slice.ISliceManager: int checkSlicePermission(android.net.Uri,java.lang.String,int,int,java.lang.String[])>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: java.lang.String getRole()>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean isRestricted()>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: java.util.Map getPackagesAndVisibilityForAccount(android.accounts.Account)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void hide()>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: android.app.IInputForwarder createInputForwarder(int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.ComponentName getHomeActivities(java.util.List)>"
  },
  {
    "helperCls": "android.media.browse.MediaBrowser",
    "implCls": "android.service.media.IMediaBrowserService",
    "inf": "android.service.media.IMediaBrowserService",
    "mtd": "<android.service.media.IMediaBrowserService: void getMediaItem(java.lang.String,android.os.ResultReceiver,android.service.media.IMediaBrowserServiceCallbacks)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: java.util.List getPasspointConfigurations()>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InputChannel)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: void showStrictModeViolation(boolean)>"
  },
  {
    "helperCls": "android.hardware.radio.RadioManager",
    "implCls": "com.android.server.broadcastradio.BroadcastRadioService$ServiceImpl",
    "inf": "android.hardware.radio.IRadioService",
    "mtd": "<android.hardware.radio.IRadioService: android.hardware.radio.ICloseHandle addAnnouncementListener(int[],android.hardware.radio.IAnnouncementListener)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "android.view.autofill.IAutoFillManagerClient",
    "inf": "android.view.autofill.IAutoFillManagerClient",
    "mtd": "<android.view.autofill.IAutoFillManagerClient: void dispatchUnhandledKey(int,android.view.autofill.AutofillId,android.view.KeyEvent)>"
  },
  {
    "helperCls": "android.hardware.usb.UsbManager",
    "implCls": "com.android.server.usb.UsbService",
    "inf": "android.hardware.usb.IUsbManager",
    "mtd": "<android.hardware.usb.IUsbManager: void setScreenUnlockedFunctions(long)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dpSink",
    "implCls": "android.bluetooth.IBluetoothA2dpSink",
    "inf": "android.bluetooth.IBluetoothA2dpSink",
    "mtd": "<android.bluetooth.IBluetoothA2dpSink: boolean connect(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void disconnect(java.lang.String,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: boolean isObbMounted(java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: java.lang.String getUserDataId()>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: int createVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean hasUserSetupCompleted()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int checkOperation(int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.usb.UsbManager",
    "implCls": "com.android.server.usb.UsbService",
    "inf": "android.hardware.usb.IUsbManager",
    "mtd": "<android.hardware.usb.IUsbManager: void requestDevicePermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void readCharacteristic(int,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int getSupportedFeatures()>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: void unregisterNetworkFactory(android.os.Messenger)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidHost",
    "implCls": "android.bluetooth.IBluetoothHidHost",
    "inf": "android.bluetooth.IBluetoothHidHost",
    "mtd": "<android.bluetooth.IBluetoothHidHost: java.util.List getConnectedDevices()>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller",
    "implCls": "android.content.pm.IPackageInstaller",
    "inf": "android.content.pm.IPackageInstaller",
    "mtd": "<android.content.pm.IPackageInstaller: android.content.pm.ParceledListSlice getAllSessions(int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void resumePolling()>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: java.lang.String getPackageName()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getStreamVolume(int)>"
  },
  {
    "helperCls": "android.media.midi.MidiManager",
    "implCls": "com.android.server.midi.MidiService",
    "inf": "android.media.midi.IMidiManager",
    "mtd": "<android.media.midi.IMidiManager: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int onDeviceOffBody()>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void reportDropResult(android.view.IWindow,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getSimAccessPermission(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothManager",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.telephony.SubscriptionManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: void setSubscriptionOverride(int,int,int,long,java.lang.String)>"
  },
  {
    "helperCls": "android.se.omapi.SEService",
    "implCls": "android.se.omapi.ISecureElementService",
    "inf": "android.se.omapi.ISecureElementService",
    "mtd": "<android.se.omapi.ISecureElementService: android.se.omapi.ISecureElementReader getReader(java.lang.String)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller$Session",
    "implCls": "android.content.pm.IPackageInstallerSession",
    "inf": "android.content.pm.IPackageInstallerSession",
    "mtd": "<android.content.pm.IPackageInstallerSession: void addClientProgress(float)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.dex.IArtManager getArtManager()>"
  },
  {
    "helperCls": "android.app.Instrumentation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: void disconnect()>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionMergeComplete(com.android.ims.internal.IImsCallSession)>"
  },
  {
    "helperCls": "android.net.wifi.rtt.WifiRttManager",
    "implCls": "com.android.server.wifi.rtt.RttServiceImpl",
    "inf": "android.net.wifi.rtt.IWifiRttManager",
    "mtd": "<android.net.wifi.rtt.IWifiRttManager: void startRanging(android.os.IBinder,java.lang.String,android.os.WorkSource,android.net.wifi.rtt.RangingRequest,android.net.wifi.rtt.IRttCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: int updateBleAppCount(android.os.IBinder,boolean,java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)>"
  },
  {
    "helperCls": "android.se.omapi.Session",
    "implCls": "android.se.omapi.ISecureElementSession",
    "inf": "android.se.omapi.ISecureElementSession",
    "mtd": "<android.se.omapi.ISecureElementSession: void close()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void reportKeyguardSecured(int)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: boolean isRequestPinAppWidgetSupported()>"
  },
  {
    "helperCls": "android.content.ClipboardManager",
    "implCls": "com.android.server.clipboard.ClipboardService$ClipboardImpl",
    "inf": "android.content.IClipboard",
    "mtd": "<android.content.IClipboard: android.content.ClipDescription getPrimaryClipDescription(java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: android.net.wifi.WifiInfo getConnectionInfo(java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>"
  },
  {
    "helperCls": "android.telephony.SubscriptionManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: android.telephony.SubscriptionPlan[] getSubscriptionPlans(int,java.lang.String)>"
  },
  {
    "helperCls": "android.net.IpSecManager",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: void applyTransportModeTransform(android.os.ParcelFileDescriptor,int,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dp",
    "implCls": "android.bluetooth.IBluetoothA2dp",
    "inf": "android.bluetooth.IBluetoothA2dp",
    "mtd": "<android.bluetooth.IBluetoothA2dp: boolean disconnect(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>"
  },
  {
    "helperCls": "android.net.wifi.p2p.WifiP2pManager",
    "implCls": "com.android.server.wifi.p2p.WifiP2pServiceImpl",
    "inf": "android.net.wifi.p2p.IWifiP2pManager",
    "mtd": "<android.net.wifi.p2p.IWifiP2pManager: android.os.Messenger getMessenger(android.os.IBinder)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void setSaturationLevel(float)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void setReaderMode(android.os.IBinder,android.nfc.IAppCallback,int,android.os.Bundle)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,java.lang.String,int,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: android.content.pm.ParceledListSlice getPrivilegedConfiguredNetworks()>"
  },
  {
    "helperCls": "android.service.voice.AlwaysOnHotwordDetector",
    "implCls": "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "inf": "com.android.internal.app.IVoiceInteractionManagerService",
    "mtd": "<com.android.internal.app.IVoiceInteractionManagerService: int stopRecognition(android.service.voice.IVoiceInteractionService,int,android.hardware.soundtrigger.IRecognitionStatusCallback)>"
  },
  {
    "helperCls": "android.telephony.ims.stub.ImsRegistrationImplBase",
    "implCls": "android.telephony.ims.aidl.IImsRegistration",
    "inf": "android.telephony.ims.aidl.IImsRegistration",
    "mtd": "<android.telephony.ims.aidl.IImsRegistration: void addRegistrationCallback(android.telephony.ims.aidl.IImsRegistrationCallback)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>"
  },
  {
    "helperCls": "android.print.PrintManager",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: void cancelPrintJob(android.print.PrintJobId,int,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: void showMySoftInput(android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void finishInput()>"
  },
  {
    "helperCls": "android.app.backup.BackupManager",
    "implCls": "com.android.server.backup.Trampoline",
    "inf": "android.app.backup.IBackupManager",
    "mtd": "<android.app.backup.IBackupManager: long getAvailableRestoreToken(java.lang.String)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: java.lang.String getSystemDialerPackage()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: boolean enable(java.lang.String)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isStreamAffectedByRingerMode(int)>"
  },
  {
    "helperCls": "android.app.usage.UsageStatsManager",
    "implCls": "com.android.server.usage.UsageStatsService$BinderService",
    "inf": "android.app.usage.IUsageStatsManager",
    "mtd": "<android.app.usage.IUsageStatsManager: android.app.usage.UsageEvents queryEventsForPackage(long,long,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getPasswordQuality(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: java.lang.String getPartitionId()>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: void requestAppKeyboardShortcuts(com.android.internal.os.IResultReceiver,int)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: void deleteNotificationChannelGroup(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.media.browse.MediaBrowser",
    "implCls": "android.service.media.IMediaBrowserService",
    "inf": "android.service.media.IMediaBrowserService",
    "mtd": "<android.service.media.IMediaBrowserService: void removeSubscriptionDeprecated(java.lang.String,android.service.media.IMediaBrowserServiceCallbacks)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: android.content.pm.ParceledListSlice getQueue()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean hasSystemFeature(java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidHost",
    "implCls": "android.bluetooth.IBluetoothHidHost",
    "inf": "android.bluetooth.IBluetoothHidHost",
    "mtd": "<android.bluetooth.IBluetoothHidHost: boolean setIdleTime(android.bluetooth.BluetoothDevice,byte)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>"
  },
  {
    "helperCls": "android.net.IpSecManager",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: void removeTransportModeTransforms(android.os.ParcelFileDescriptor)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getConnectionState(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void destroyUserStorage(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: int getState()>"
  },
  {
    "helperCls": "android.companion.CompanionDeviceManager",
    "implCls": "com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl",
    "inf": "android.companion.ICompanionDeviceManager",
    "mtd": "<android.companion.ICompanionDeviceManager: java.util.List getAssociations(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: void cancelNotificationWithTag(java.lang.String,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: android.telephony.ims.ImsCallProfile getRemoteCallProfile()>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void sendRttModifyResponse(boolean)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void hide()>"
  },
  {
    "helperCls": "android.app.UiAutomationConnection",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: void thawRotation()>"
  },
  {
    "helperCls": "android.net.ip.IpClient",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void disableIpv6(java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void removeNfcUnlockHandler(android.nfc.INfcUnlockHandler)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: void silenceRinger(java.lang.String)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: java.lang.String getCountryCode()>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: java.lang.String[] getTetherableBluetoothRegexs()>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps$PinItemRequest",
    "implCls": "android.content.pm.IPinItemRequest",
    "inf": "android.content.pm.IPinItemRequest",
    "mtd": "<android.content.pm.IPinItemRequest: boolean accept(android.os.Bundle)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void finishInput()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>"
  },
  {
    "helperCls": "android.service.quicksettings.TileService",
    "implCls": "android.service.quicksettings.IQSService",
    "inf": "android.service.quicksettings.IQSService",
    "mtd": "<android.service.quicksettings.IQSService: android.service.quicksettings.Tile getTile(android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.backup.BackupManager",
    "implCls": "com.android.server.backup.Trampoline",
    "inf": "android.app.backup.IBackupManager",
    "mtd": "<android.app.backup.IBackupManager: void dataChanged(java.lang.String)>"
  },
  {
    "helperCls": "android.os.RecoverySystem",
    "implCls": "com.android.server.RecoverySystemService$BinderService",
    "inf": "android.os.IRecoverySystem",
    "mtd": "<android.os.IRecoverySystem: void rebootRecoveryWithCommand(java.lang.String)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: boolean isTtySupported(java.lang.String)>"
  },
  {
    "helperCls": "android.net.ip.InterfaceController",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void wallpaperCommandComplete(android.os.IBinder,android.os.Bundle)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: boolean isConnected()>"
  },
  {
    "helperCls": "android.nfc.cardemulation.NfcFCardEmulation",
    "implCls": "android.nfc.INfcFCardEmulation",
    "inf": "android.nfc.INfcFCardEmulation",
    "mtd": "<android.nfc.INfcFCardEmulation: boolean removeSystemCodeForService(int,android.content.ComponentName)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.NfcFCardEmulation",
    "implCls": "android.nfc.INfcFCardEmulation",
    "inf": "android.nfc.INfcFCardEmulation",
    "mtd": "<android.nfc.INfcFCardEmulation: boolean removeSystemCodeForService(int,android.content.ComponentName)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getFocusRampTimeMs(int,android.media.AudioAttributes)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.se.omapi.Channel",
    "implCls": "android.se.omapi.ISecureElementChannel",
    "inf": "android.se.omapi.ISecureElementChannel",
    "mtd": "<android.se.omapi.ISecureElementChannel: boolean isClosed()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.hardware.usb.UsbManager",
    "implCls": "com.android.server.usb.UsbService",
    "inf": "android.hardware.usb.IUsbManager",
    "mtd": "<android.hardware.usb.IUsbManager: void setPortRoles(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.AlarmManager",
    "implCls": "android.app.IAlarmManager",
    "inf": "android.app.IAlarmManager",
    "mtd": "<android.app.IAlarmManager: void remove(android.app.PendingIntent,android.app.IAlarmListener)>"
  },
  {
    "helperCls": "android.net.sip.SipSession",
    "implCls": "android.net.sip.ISipSession",
    "inf": "android.net.sip.ISipSession",
    "mtd": "<android.net.sip.ISipSession: java.lang.String getCallId()>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void reset()>"
  },
  {
    "helperCls": "android.se.omapi.Session",
    "implCls": "android.se.omapi.ISecureElementSession",
    "inf": "android.se.omapi.ISecureElementSession",
    "mtd": "<android.se.omapi.ISecureElementSession: android.se.omapi.ISecureElementChannel openLogicalChannel(byte[],byte,android.se.omapi.ISecureElementListener)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.Session",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean someUserHasSeedAccount(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: void clccResponse(int,int,int,int,boolean,java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: byte[] getNetworkWatchlistConfigHash()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.app.usage.UsageStatsManager",
    "implCls": "com.android.server.usage.UsageStatsService$BinderService",
    "inf": "android.app.usage.IUsageStatsManager",
    "mtd": "<android.app.usage.IUsageStatsManager: int getAppStandbyBucket(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void handoverTo(java.lang.String,android.telecom.PhoneAccountHandle,int,android.os.Bundle)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void putExtras(java.lang.String,android.os.Bundle)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int insert(java.lang.String,byte[],int,int)>"
  },
  {
    "helperCls": "android.app.usage.UsageStatsManager",
    "implCls": "com.android.server.usage.UsageStatsService$BinderService",
    "inf": "android.app.usage.IUsageStatsManager",
    "mtd": "<android.app.usage.IUsageStatsManager: void setAppStandbyBucket(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: void addNewIncomingCall(android.telecom.PhoneAccountHandle,android.os.Bundle)>"
  },
  {
    "helperCls": "android.net.NetworkPolicyManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: void setUidPolicy(int,int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.Network getActiveNetworkForUid(int,boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean installExistingPackage(android.content.ComponentName,java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.util.List getPermittedCrossProfileNotificationListeners(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanScanner",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: java.lang.String getName()>"
  },
  {
    "helperCls": "android.nfc.dta.NfcDta",
    "implCls": "android.nfc.INfcDta",
    "inf": "android.nfc.INfcDta",
    "mtd": "<android.nfc.INfcDta: void disableServer()>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: int getState()>"
  },
  {
    "helperCls": "android.net.ip.InterfaceController",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void setIPv6AddrGenMode(java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void readDescriptor(int,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.net.NetworkScoreManager",
    "implCls": "com.android.server.NetworkScoreService",
    "inf": "android.net.INetworkScoreService",
    "mtd": "<android.net.INetworkScoreService: boolean setActiveScorer(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionService",
    "implCls": "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "inf": "com.android.internal.app.IVoiceInteractionManagerService",
    "mtd": "<com.android.internal.app.IVoiceInteractionManagerService: int stopRecognition(android.service.voice.IVoiceInteractionService,int,android.hardware.soundtrigger.IRecognitionStatusCallback)>"
  },
  {
    "helperCls": "android.telecom.RemoteConference",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void onCallAudioStateChanged(java.lang.String,android.telecom.CallAudioState,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void finishInput()>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void hide()>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void hide()>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void hide()>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: int getState()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.app.ActivityOptions",
    "implCls": "android.os.IRemoteCallback",
    "inf": "android.os.IRemoteCallback",
    "mtd": "<android.os.IRemoteCallback: void sendResult(android.os.Bundle)>"
  },
  {
    "helperCls": "android.service.quicksettings.TileService",
    "implCls": "android.service.quicksettings.IQSService",
    "inf": "android.service.quicksettings.IQSService",
    "mtd": "<android.service.quicksettings.IQSService: boolean isSecure()>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void setAudioRoute(int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanScanner",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void stopEnergyScan()>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: boolean setProviderEnabledForUser(java.lang.String,boolean,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void setAppCallback(android.nfc.IAppCallback)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: int getUserSerialNumber(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setDeviceOwnerLockScreenInfo(android.content.ComponentName,java.lang.CharSequence)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setOrganizationName(android.content.ComponentName,java.lang.CharSequence)>"
  },
  {
    "helperCls": "android.net.sip.SipSession",
    "implCls": "android.net.sip.ISipSession",
    "inf": "android.net.sip.ISipSession",
    "mtd": "<android.net.sip.ISipSession: boolean isInCall()>"
  },
  {
    "helperCls": "android.app.ActivityManager$AppTask",
    "implCls": "android.app.IAppTask",
    "inf": "android.app.IAppTask",
    "mtd": "<android.app.IAppTask: void finishAndRemoveTask()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setAutoTimeRequired(android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int[] getPackageGids(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: void unregisterPhoneAccount(android.telecom.PhoneAccountHandle)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.LinkProperties getActiveLinkProperties()>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int stopUser(android.content.ComponentName,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.media.browse.MediaBrowser",
    "implCls": "android.service.media.IMediaBrowserService",
    "inf": "android.service.media.IMediaBrowserService",
    "mtd": "<android.service.media.IMediaBrowserService: void removeSubscriptionDeprecated(java.lang.String,android.service.media.IMediaBrowserServiceCallbacks)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int getKeyCharacteristics(java.lang.String,android.security.keymaster.KeymasterBlob,android.security.keymaster.KeymasterBlob,int,android.security.keymaster.KeyCharacteristics)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void startDozing(android.os.IBinder,int,int)>"
  },
  {
    "helperCls": "android.security.keystore.recovery.RecoveryController",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: void setRecoveryStatus(java.lang.String,int)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void setVolumeUserFlags(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isManagedProfile(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void setLocationEnabledForUser(boolean,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean packageHasActiveAdmins(java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: android.net.DhcpInfo getDhcpInfo()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setBluetoothA2dpOn(boolean)>"
  },
  {
    "helperCls": "android.database.BulkCursorToCursorAdaptor",
    "implCls": "android.database.IBulkCursor",
    "inf": "android.database.IBulkCursor",
    "mtd": "<android.database.IBulkCursor: void deactivate()>"
  },
  {
    "helperCls": "android.database.BulkCursorToCursorAdaptor",
    "implCls": "android.database.IBulkCursor",
    "inf": "android.database.IBulkCursor",
    "mtd": "<android.database.IBulkCursor: void deactivate()>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: java.lang.String getPreviousName(android.accounts.Account)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int import_key(java.lang.String,byte[],int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: boolean terminateCall(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHeadsetClientCall)>"
  },
  {
    "helperCls": "android.telecom.RemoteConference",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void stopDtmfTone(java.lang.String,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: void registerAccountListener(java.lang.String[],java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: boolean acceptCall(android.bluetooth.BluetoothDevice,int)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: int getState()>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void updateSession(int,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,int,int)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.service.wallpaper.IWallpaperConnection",
    "inf": "android.service.wallpaper.IWallpaperConnection",
    "mtd": "<android.service.wallpaper.IWallpaperConnection: void engineShown(android.service.wallpaper.IWallpaperEngine)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.printservice.CustomPrinterIconCallback",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: void onCustomPrinterIconLoaded(android.print.PrinterId,android.graphics.drawable.Icon)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void benchmark(java.lang.String,android.os.IVoldTaskListener)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean addPermissionAsync(android.content.pm.PermissionInfo)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.os.PowerManager",
    "implCls": "com.android.server.power.PowerManagerService$BinderService",
    "inf": "android.os.IPowerManager",
    "mtd": "<android.os.IPowerManager: int getLastShutdownReason()>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void remove(android.view.IWindow)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothSap",
    "implCls": "android.bluetooth.IBluetoothSap",
    "inf": "android.bluetooth.IBluetoothSap",
    "mtd": "<android.bluetooth.IBluetoothSap: int getState()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.JobSchedulerImpl",
    "implCls": "com.android.server.job.JobSchedulerService$JobSchedulerStub",
    "inf": "android.app.job.IJobScheduler",
    "mtd": "<android.app.job.IJobScheduler: void cancel(int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: int getHeightHint()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean isPackageStateProtected(java.lang.String,int)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>"
  },
  {
    "helperCls": "android.service.trust.TrustAgentService",
    "implCls": "android.service.trust.ITrustAgentServiceCallback",
    "inf": "android.service.trust.ITrustAgentServiceCallback",
    "mtd": "<android.service.trust.ITrustAgentServiceCallback: void grantTrust(java.lang.CharSequence,long,int)>"
  },
  {
    "helperCls": "android.content.pm.AppsQueryHelper",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentServices(android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void setUserRestriction(int,boolean,android.os.IBinder,int,java.lang.String[])>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dp",
    "implCls": "android.bluetooth.IBluetoothA2dp",
    "inf": "android.bluetooth.IBluetoothA2dp",
    "mtd": "<android.bluetooth.IBluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: int getPriority(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.nfc.dta.NfcDta",
    "implCls": "android.nfc.INfcDta",
    "inf": "android.nfc.INfcDta",
    "mtd": "<android.nfc.INfcDta: boolean registerMessageService(java.lang.String)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Session",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void timeShiftPlay(android.os.IBinder,android.net.Uri,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Session",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void stopRecording(android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int generateKey(java.lang.String,android.security.keymaster.KeymasterArguments,byte[],int,int,android.security.keymaster.KeyCharacteristics)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputContext",
    "inf": "com.android.internal.view.IInputContext",
    "mtd": "<com.android.internal.view.IInputContext: void finishComposingText()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.hardware.location.GeofenceHardwareImpl",
    "implCls": "android.location.IFusedGeofenceHardware",
    "inf": "android.location.IFusedGeofenceHardware",
    "mtd": "<android.location.IFusedGeofenceHardware: void resumeMonitoringGeofence(int,int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: boolean isPlaybackActive(android.media.IMediaRouterClient)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void dragRecipientEntered(android.view.IWindow)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void addOnPermissionsChangeListener(android.content.pm.IOnPermissionsChangeListener)>"
  },
  {
    "helperCls": "android.se.omapi.Channel",
    "implCls": "android.se.omapi.ISecureElementChannel",
    "inf": "android.se.omapi.ISecureElementChannel",
    "mtd": "<android.se.omapi.ISecureElementChannel: byte[] getSelectResponse()>"
  },
  {
    "helperCls": "android.os.IncidentManager",
    "implCls": "android.os.IIncidentManager",
    "inf": "android.os.IIncidentManager",
    "mtd": "<android.os.IIncidentManager: void reportIncident(android.os.IncidentReportArgs)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionRttModifyResponseReceived(int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean performHapticFeedback(android.view.IWindow,int,boolean)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: android.service.autofill.FillEventHistory getFillEventHistory()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothPbapClient",
    "implCls": "android.bluetooth.IBluetoothPbapClient",
    "inf": "android.bluetooth.IBluetoothPbapClient",
    "mtd": "<android.bluetooth.IBluetoothPbapClient: boolean setPriority(android.bluetooth.BluetoothDevice,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean setSimAccessPermission(android.bluetooth.BluetoothDevice,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean setPermittedInputMethods(android.content.ComponentName,java.util.List)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: android.media.tv.ITvInputHardware acquireTvInputHardware(int,android.media.tv.ITvInputHardwareCallback,android.media.tv.TvInputInfo,int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.hardware.usb.UsbManager",
    "implCls": "com.android.server.usb.UsbService",
    "inf": "android.hardware.usb.IUsbManager",
    "mtd": "<android.hardware.usb.IUsbManager: boolean hasDevicePermission(android.hardware.usb.UsbDevice,java.lang.String)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setStreamVolume(int,int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: java.util.List getInputMethodList()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.media.session.MediaSession",
    "implCls": "android.media.session.ISession",
    "inf": "android.media.session.ISession",
    "mtd": "<android.media.session.ISession: android.media.session.ISessionController getController()>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection$VideoProvider",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void setPreviewSurface(android.view.Surface)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void cancelSession(int,int)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int getSupportedFeatures()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMapClient",
    "implCls": "android.bluetooth.IBluetoothMapClient",
    "inf": "android.bluetooth.IBluetoothMapClient",
    "mtd": "<android.bluetooth.IBluetoothMapClient: boolean getUnreadMessages(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller",
    "implCls": "android.content.pm.IPackageInstaller",
    "inf": "android.content.pm.IPackageInstaller",
    "mtd": "<android.content.pm.IPackageInstaller: android.content.pm.PackageInstaller$SessionInfo getSessionInfo(int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: java.util.List getConnectedDevices()>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int noteOperation(int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setUserRestriction(android.content.ComponentName,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>"
  },
  {
    "helperCls": "android.provider.Settings$Secure",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int addClient(android.view.autofill.IAutoFillManagerClient,int)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.app.AlarmManager",
    "implCls": "android.app.IAlarmManager",
    "inf": "android.app.IAlarmManager",
    "mtd": "<android.app.IAlarmManager: void setTimeZone(java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getInstalledPackages(int,int)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int onUserPasswordChanged(int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.KeyguardManager",
    "implCls": "android.app.trust.ITrustManager",
    "inf": "android.app.trust.ITrustManager",
    "mtd": "<android.app.trust.ITrustManager: boolean isDeviceSecure(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothPan",
    "implCls": "android.bluetooth.IBluetoothPan",
    "inf": "android.bluetooth.IBluetoothPan",
    "mtd": "<android.bluetooth.IBluetoothPan: boolean isTetheringOn()>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void startDozing(android.os.IBinder,int,int)>"
  },
  {
    "helperCls": "android.print.PrintManager",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.net.EthernetManager",
    "implCls": "com.android.server.ethernet.EthernetServiceImpl",
    "inf": "android.net.IEthernetManager",
    "mtd": "<android.net.IEthernetManager: android.net.IpConfiguration getConfiguration(java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: void enumerate(android.os.IBinder,int,android.hardware.fingerprint.IFingerprintServiceReceiver)>"
  },
  {
    "helperCls": "android.security.keystore.recovery.RecoveryController",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: java.lang.String importKey(java.lang.String,byte[])>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: android.net.IpPrefix[] getLinkNetworks()>"
  },
  {
    "helperCls": "android.print.PrinterDiscoverySession",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: void stopPrinterDiscovery(android.print.IPrinterDiscoveryObserver,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.StatusBarManager",
    "implCls": "com.android.server.statusbar.StatusBarManagerService",
    "inf": "com.android.internal.statusbar.IStatusBarService",
    "mtd": "<com.android.internal.statusbar.IStatusBarService: void setIconVisibility(java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: boolean stopSoftAp()>"
  },
  {
    "helperCls": "android.app.usage.UsageStatsManager",
    "implCls": "com.android.server.usage.UsageStatsService$BinderService",
    "inf": "android.app.usage.IUsageStatsManager",
    "mtd": "<android.app.usage.IUsageStatsManager: android.content.pm.ParceledListSlice getAppStandbyBuckets(java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidDevice",
    "implCls": "android.bluetooth.IBluetoothHidDevice",
    "inf": "android.bluetooth.IBluetoothHidDevice",
    "mtd": "<android.bluetooth.IBluetoothHidDevice: boolean reportError(android.bluetooth.BluetoothDevice,byte)>"
  },
  {
    "helperCls": "android.app.StatsManager",
    "implCls": "android.os.IStatsManager",
    "inf": "android.os.IStatsManager",
    "mtd": "<android.os.IStatsManager: void unsetBroadcastSubscriber(long,long,java.lang.String)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: java.lang.String getPackageName()>"
  },
  {
    "helperCls": "android.net.ip.IpClient",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void setInterfaceIpv6PrivacyExtensions(java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.net.sip.SipSession",
    "implCls": "android.net.sip.ISipSession",
    "inf": "android.net.sip.ISipSession",
    "mtd": "<android.net.sip.ISipSession: void answerCall(java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.IpSecManager$IpSecTunnelInterface",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: void addAddressToTunnelInterface(int,android.net.LinkAddress,java.lang.String)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setLongSupportMessage(android.content.ComponentName,java.lang.CharSequence)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: java.lang.String getGnssHardwareModelName()>"
  },
  {
    "helperCls": "android.net.wifi.aware.WifiAwareManager",
    "implCls": "com.android.server.wifi.aware.WifiAwareServiceImpl",
    "inf": "android.net.wifi.aware.IWifiAwareManager",
    "mtd": "<android.net.wifi.aware.IWifiAwareManager: void updateSubscribe(int,int,android.net.wifi.aware.SubscribeConfig)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>"
  },
  {
    "helperCls": "android.media.Ringtone",
    "implCls": "android.media.IRingtonePlayer",
    "inf": "android.media.IRingtonePlayer",
    "mtd": "<android.media.IRingtonePlayer: boolean isPlaying(android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentServices(android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setRequiredStrongAuthTimeout(android.content.ComponentName,long,boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.content.ComponentName getMandatoryBackupTransport()>"
  },
  {
    "helperCls": "android.app.ActivityManager$AppTask",
    "implCls": "android.app.IAppTask",
    "inf": "android.app.IAppTask",
    "mtd": "<android.app.IAppTask: android.app.ActivityManager$RecentTaskInfo getTaskInfo()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: long getAuthenticatorId(java.lang.String)>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: int getIconMaxDimensions(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient,int)>"
  },
  {
    "helperCls": "android.media.soundtrigger.SoundTriggerDetector",
    "implCls": "com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub",
    "inf": "com.android.internal.app.ISoundTriggerService",
    "mtd": "<com.android.internal.app.ISoundTriggerService: int startRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.content.ComponentName getDeviceOwnerComponent(boolean)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: boolean isTetheringSupported(java.lang.String)>"
  },
  {
    "helperCls": "android.security.keystore.recovery.RecoveryController",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: void setSnapshotCreatedPendingIntent(android.app.PendingIntent)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: void releaseNetworkRequest(android.net.NetworkRequest)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: void notifyAccessibilityButtonClicked()>"
  },
  {
    "helperCls": "android.net.ip.InterfaceController",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void clearInterfaceAddresses(java.lang.String)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.service.wallpaper.IWallpaperConnection",
    "inf": "android.service.wallpaper.IWallpaperConnection",
    "mtd": "<android.service.wallpaper.IWallpaperConnection: void engineShown(android.service.wallpaper.IWallpaperEngine)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Session",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void tune(android.os.IBinder,android.net.Uri,android.os.Bundle,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getPermissionPolicy(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setRecommendedGlobalProxy(android.content.ComponentName,android.net.ProxyInfo)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int updateOrRestartSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,int,int,boolean)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void dragRecipientExited(android.view.IWindow)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int getComponentEnabledSetting(android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: void showStrictModeViolation(boolean)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: void releaseNetworkRequest(android.net.NetworkRequest)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void setAppCallback(android.nfc.IAppCallback)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isSystemOnlyUser(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.telecom.VideoCallImpl",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void setDisplaySurface(android.view.Surface)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int getSupportedFeatures()>"
  },
  {
    "helperCls": "android.net.ip.IpClient",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Session",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void unblockContent(android.os.IBinder,java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: android.bluetooth.IBluetoothSocketManager getSocketManager()>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.util.MergedConfiguration,android.view.Surface)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void clearProfileOwner(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>"
  },
  {
    "helperCls": "android.os.ServiceManager",
    "implCls": "android.os.IServiceManager",
    "inf": "android.os.IServiceManager",
    "mtd": "<android.os.IServiceManager: void addService(java.lang.String,android.os.IBinder,boolean,int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getStreamMaxVolume(int)>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: void authenticate(android.os.IBinder,long,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String,android.os.Bundle,android.hardware.biometrics.IBiometricPromptReceiver)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.lang.String getApplicationRestrictionsManagingPackage(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void mergeConference(java.lang.String)>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.Session",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.util.MergedConfiguration,android.view.Surface)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.telephony.SubscriptionManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: void setSubscriptionOverride(int,int,int,long,java.lang.String)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: boolean startScan(java.lang.String)>"
  },
  {
    "helperCls": "android.app.backup.BackupManager",
    "implCls": "com.android.server.backup.Trampoline",
    "inf": "android.app.backup.IBackupManager",
    "mtd": "<android.app.backup.IBackupManager: java.lang.String getDataManagementLabel(java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.se.omapi.Reader",
    "implCls": "android.se.omapi.ISecureElementReader",
    "inf": "android.se.omapi.ISecureElementReader",
    "mtd": "<android.se.omapi.ISecureElementReader: void closeSessions()>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: int getState()>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller",
    "implCls": "android.content.pm.IPackageInstaller",
    "inf": "android.content.pm.IPackageInstaller",
    "mtd": "<android.content.pm.IPackageInstaller: void updateSessionAppIcon(int,android.graphics.Bitmap)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void removeExternalRoute(android.net.IpPrefix)>"
  },
  {
    "helperCls": "android.content.ClipboardManager",
    "implCls": "com.android.server.clipboard.ClipboardService$ClipboardImpl",
    "inf": "android.content.IClipboard",
    "mtd": "<android.content.IClipboard: void setPrimaryClip(android.content.ClipData,java.lang.String)>"
  },
  {
    "helperCls": "android.app.UiModeManager",
    "implCls": "android.app.IUiModeManager$Stub",
    "inf": "android.app.IUiModeManager",
    "mtd": "<android.app.IUiModeManager: void disableCarMode(int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)>"
  },
  {
    "helperCls": "android.app.UiAutomationConnection",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: void freezeRotation(int)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: void setOnMediaKeyListener(android.media.session.IOnMediaKeyListener)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: void setOnMediaKeyListener(android.media.session.IOnMediaKeyListener)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: android.content.pm.ParceledListSlice getNotificationChannelGroups(java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.provider.Settings$Secure",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: boolean enablePhoneAccount(android.telecom.PhoneAccountHandle,boolean)>"
  },
  {
    "helperCls": "android.net.EthernetManager",
    "implCls": "com.android.server.ethernet.EthernetServiceImpl",
    "inf": "android.net.IEthernetManager",
    "mtd": "<android.net.IEthernetManager: boolean isAvailable(java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: java.util.List getEnrolledFingerprints(int,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.media.browse.MediaBrowser",
    "implCls": "android.service.media.IMediaBrowserService",
    "inf": "android.service.media.IMediaBrowserService",
    "mtd": "<android.service.media.IMediaBrowserService: void addSubscription(java.lang.String,android.os.IBinder,android.os.Bundle,android.service.media.IMediaBrowserServiceCallbacks)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: android.content.pm.ParceledListSlice getInstalledProvidersForProfile(int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void close()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMap",
    "implCls": "android.bluetooth.IBluetoothMap",
    "inf": "android.bluetooth.IBluetoothMap",
    "mtd": "<android.bluetooth.IBluetoothMap: int getState()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: java.lang.String getInstallerPackageName(java.lang.String)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void leave()>"
  },
  {
    "helperCls": "android.media.projection.MediaProjection",
    "implCls": "android.media.projection.IMediaProjection",
    "inf": "android.media.projection.IMediaProjection",
    "mtd": "<android.media.projection.IMediaProjection: void stop()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getStreamVolume(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getStartUserSessionMessage(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.telephony.ims.feature.MmTelFeature",
    "implCls": "android.telephony.ims.aidl.IImsMmTelFeature",
    "inf": "android.telephony.ims.aidl.IImsMmTelFeature",
    "mtd": "<android.telephony.ims.aidl.IImsMmTelFeature: void sendSms(int,int,java.lang.String,java.lang.String,boolean,byte[])>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.util.List getPermittedAccessibilityServices(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.app.usage.UsageStatsManager",
    "implCls": "com.android.server.usage.UsageStatsService$BinderService",
    "inf": "android.app.usage.IUsageStatsManager",
    "mtd": "<android.app.usage.IUsageStatsManager: void registerAppUsageObserver(int,java.lang.String[],long,android.app.PendingIntent,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGattServer",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void removeService(int,int)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int getWifiEnabledState()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setProfileEnabled(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.media.Ringtone",
    "implCls": "android.media.IRingtonePlayer",
    "inf": "android.media.IRingtonePlayer",
    "mtd": "<android.media.IRingtonePlayer: void play(android.os.IBinder,android.net.Uri,android.media.AudioAttributes,float,boolean)>"
  },
  {
    "helperCls": "android.service.autofill.FillCallback",
    "implCls": "android.service.autofill.IFillCallback",
    "inf": "android.service.autofill.IFillCallback",
    "mtd": "<android.service.autofill.IFillCallback: void onFailure(int,java.lang.CharSequence)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean canRequestPackageInstalls(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: boolean restoreSession(int,android.os.IBinder,android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void reboot(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: int[] getInputDeviceIds()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean createBond(android.bluetooth.BluetoothDevice,int)>"
  },
  {
    "helperCls": "android.media.session.MediaSession",
    "implCls": "android.media.session.ISession",
    "inf": "android.media.session.ISession",
    "mtd": "<android.media.session.ISession: android.media.session.ISessionController getController()>"
  },
  {
    "helperCls": "android.media.audiopolicy.AudioPolicy",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>"
  },
  {
    "helperCls": "android.net.sip.SipManager",
    "implCls": "com.android.server.sip.SipService",
    "inf": "android.net.sip.ISipService",
    "mtd": "<android.net.sip.ISipService: android.net.sip.ISipSession getPendingSession(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void destroy()>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void destroy()>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void destroy()>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void destroy()>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>"
  },
  {
    "helperCls": "android.app.Instrumentation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: void disconnect()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void unregisterMoveCallback(android.content.pm.IPackageMoveObserver)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dp",
    "implCls": "android.bluetooth.IBluetoothA2dp",
    "inf": "android.bluetooth.IBluetoothA2dp",
    "mtd": "<android.bluetooth.IBluetoothA2dp: void setCodecConfigPreference(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothCodecConfig)>"
  },
  {
    "helperCls": "android.app.usage.UsageStatsManager",
    "implCls": "com.android.server.usage.UsageStatsService$BinderService",
    "inf": "android.app.usage.IUsageStatsManager",
    "mtd": "<android.app.usage.IUsageStatsManager: void unregisterAppUsageObserver(int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void updateExtractedText(int,android.view.inputmethod.ExtractedText)>"
  },
  {
    "helperCls": "android.hardware.Camera",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int checkAudioOperation(int,int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryPermissionsByGroup(java.lang.String,int)>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: void dispatchVolumeKeyEvent(java.lang.String,boolean,android.view.KeyEvent,int,boolean)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.CardEmulation",
    "implCls": "android.nfc.INfcCardEmulation",
    "inf": "android.nfc.INfcCardEmulation",
    "mtd": "<android.nfc.INfcCardEmulation: boolean unsetPreferredService()>"
  },
  {
    "helperCls": "android.nfc.cardemulation.CardEmulation",
    "implCls": "android.nfc.INfcCardEmulation",
    "inf": "android.nfc.INfcCardEmulation",
    "mtd": "<android.nfc.INfcCardEmulation: boolean unsetPreferredService()>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setCameraDisabled(android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.se.omapi.Channel",
    "implCls": "android.se.omapi.ISecureElementChannel",
    "inf": "android.se.omapi.ISecureElementChannel",
    "mtd": "<android.se.omapi.ISecureElementChannel: void close()>"
  },
  {
    "helperCls": "android.net.sip.SipManager",
    "implCls": "com.android.server.sip.SipService",
    "inf": "android.net.sip.ISipService",
    "mtd": "<android.net.sip.ISipService: void close(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: java.util.List getInstalledAccessibilityServiceList(int)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getCurrentAudioFocus()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void verifyPendingInstall(int,int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: boolean isActivityEnabled(java.lang.String,android.content.ComponentName,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: boolean isBoundWidgetPackage(java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.ip.IpClient",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void unregisterGnssStatusCallback(android.location.IGnssStatusListener)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: void incrementOperationCount(int,int,int)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int matchProviderWithCurrentNetwork(java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean setStatusBarDisabled(android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.app.JobSchedulerImpl",
    "implCls": "com.android.server.job.JobSchedulerService$JobSchedulerStub",
    "inf": "android.app.job.IJobScheduler",
    "mtd": "<android.app.job.IJobScheduler: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: int getAudioState(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: int getRemainingCallCount(java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean cancelBondProcess(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: java.lang.String[] getMobileIfaces()>"
  },
  {
    "helperCls": "android.content.SyncContext",
    "implCls": "android.content.ISyncContext",
    "inf": "android.content.ISyncContext",
    "mtd": "<android.content.ISyncContext: void sendHeartbeat()>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionTtyModeReceived(int)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: void unregisterCallbackListener(android.media.session.ISessionControllerCallback)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: int[] getProfileIds(int,boolean)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int installExistingPackageAsUser(java.lang.String,int,int,int)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: android.os.IBinder getToken(android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean setTimeZone(android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean getCrossProfileCallerIdDisabled(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.hardware.camera2.impl.ICameraDeviceUserWrapper",
    "implCls": "android.hardware.camera2.ICameraDeviceUser",
    "inf": "android.hardware.camera2.ICameraDeviceUser",
    "mtd": "<android.hardware.camera2.ICameraDeviceUser: android.hardware.camera2.impl.CameraMetadataNative getCameraInfo()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void writeDescriptor(int,java.lang.String,int,int,byte[])>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Session",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void timeShiftEnablePositionTracking(android.os.IBinder,boolean,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.ComponentName getInstantAppInstallerComponent()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void configureMTU(int,java.lang.String,int)>"
  },
  {
    "helperCls": "android.os.UpdateEngine",
    "implCls": "android.os.IUpdateEngine",
    "inf": "android.os.IUpdateEngine",
    "mtd": "<android.os.IUpdateEngine: void cancel()>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void answer(java.lang.String,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isEnabled()>"
  },
  {
    "helperCls": "android.app.backup.RestoreSession",
    "implCls": "android.app.backup.IRestoreSession",
    "inf": "android.app.backup.IRestoreSession",
    "mtd": "<android.app.backup.IRestoreSession: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: boolean isWallpaperSupported(java.lang.String)>"
  },
  {
    "helperCls": "android.telephony.ims.stub.ImsEcbmImplBase",
    "implCls": "com.android.ims.internal.IImsEcbmListener",
    "inf": "com.android.ims.internal.IImsEcbmListener",
    "mtd": "<com.android.ims.internal.IImsEcbmListener: void exitedECBM()>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: void addOnAppsChangedListener(java.lang.String,android.content.pm.IOnAppsChangedListener)>"
  },
  {
    "helperCls": "android.app.JobSchedulerImpl",
    "implCls": "com.android.server.job.JobSchedulerService$JobSchedulerStub",
    "inf": "android.app.job.IJobScheduler",
    "mtd": "<android.app.job.IJobScheduler: int schedule(android.app.job.JobInfo)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean getDoNotAskCredentialsOnBoot()>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: void removeKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.app.UiAutomation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: void revokeRuntimePermission(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int unlock(int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: android.os.IBinder getToken(android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void notifyVolumeControllerVisible(android.media.IVolumeController,boolean)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: long getTotalStats(int)>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: void cancelAuthentication(android.os.IBinder,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getDiscoverableTimeout()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int getApplicationEnabledSetting(java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.sip.SipManager",
    "implCls": "com.android.server.sip.SipService",
    "inf": "android.net.sip.ISipService",
    "mtd": "<android.net.sip.ISipService: void open(android.net.sip.SipProfile,java.lang.String)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean isUserUnlockingOrUnlocked(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidHost",
    "implCls": "android.bluetooth.IBluetoothHidHost",
    "inf": "android.bluetooth.IBluetoothHidHost",
    "mtd": "<android.bluetooth.IBluetoothHidHost: boolean setPriority(android.bluetooth.BluetoothDevice,int)>"
  },
  {
    "helperCls": "android.app.usage.StorageStatsManager",
    "implCls": "com.android.server.usage.StorageStatsService",
    "inf": "android.app.usage.IStorageStatsManager",
    "mtd": "<android.app.usage.IStorageStatsManager: android.app.usage.StorageStats queryStatsForPackage(java.lang.String,java.lang.String,int,java.lang.String)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: java.util.List getSessionTokens(boolean,boolean,java.lang.String)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Session",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void timeShiftSeekTo(android.os.IBinder,long,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.UiAutomationConnection",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: boolean isRotationFrozen()>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: android.content.pm.ParceledListSlice getInstalledProvidersForProfile(int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dpSink",
    "implCls": "android.bluetooth.IBluetoothA2dpSink",
    "inf": "android.bluetooth.IBluetoothA2dpSink",
    "mtd": "<android.bluetooth.IBluetoothA2dpSink: java.util.List getConnectedDevices()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMap",
    "implCls": "android.bluetooth.IBluetoothMap",
    "inf": "android.bluetooth.IBluetoothMap",
    "mtd": "<android.bluetooth.IBluetoothMap: boolean disconnect(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: int getRemainingCallCount(java.lang.String,int)>"
  },
  {
    "helperCls": "android.speech.SpeechRecognizer",
    "implCls": "android.speech.IRecognitionService",
    "inf": "android.speech.IRecognitionService",
    "mtd": "<android.speech.IRecognitionService: void startListening(android.content.Intent,android.speech.IRecognitionListener)>"
  },
  {
    "helperCls": "android.companion.CompanionDeviceManager",
    "implCls": "com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl",
    "inf": "android.companion.ICompanionDeviceManager",
    "mtd": "<android.companion.ICompanionDeviceManager: void disassociate(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.app.backup.RestoreSession",
    "implCls": "android.app.backup.IRestoreSession",
    "inf": "android.app.backup.IRestoreSession",
    "mtd": "<android.app.backup.IRestoreSession: int getAvailableRestoreSets(android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor)>"
  },
  {
    "helperCls": "android.view.textclassifier.SystemTextClassifier",
    "implCls": "com.android.server.textclassifier.TextClassificationManagerService",
    "inf": "android.service.textclassifier.ITextClassifierService",
    "mtd": "<android.service.textclassifier.ITextClassifierService: void onGenerateLinks(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLinks$Request,android.service.textclassifier.ITextLinksCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getMessageAccessPermission(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.media.session.MediaSession",
    "implCls": "android.media.session.ISession",
    "inf": "android.media.session.ISession",
    "mtd": "<android.media.session.ISession: void setPlaybackToLocal(android.media.AudioAttributes)>"
  },
  {
    "helperCls": "android.os.BatteryManager",
    "implCls": "android.os.IBatteryPropertiesRegistrar",
    "inf": "android.os.IBatteryPropertiesRegistrar",
    "mtd": "<android.os.IBatteryPropertiesRegistrar: int getProperty(int,android.os.BatteryProperty)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.service.persistentdata.PersistentDataBlockManager",
    "implCls": "android.service.persistentdata.IPersistentDataBlockService",
    "inf": "android.service.persistentdata.IPersistentDataBlockService",
    "mtd": "<android.service.persistentdata.IPersistentDataBlockService: void wipe()>"
  },
  {
    "helperCls": "android.app.UiAutomationConnection",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: void thawRotation()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setBluetoothA2dpOn(boolean)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: android.app.WallpaperColors getWallpaperColors(int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: boolean explicitCallTransfer(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: long forceSecurityLogs()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.content.ComponentName getProfileOwner(int)>"
  },
  {
    "helperCls": "android.os.PowerManager",
    "implCls": "com.android.server.power.PowerManagerService$BinderService",
    "inf": "android.os.IPowerManager",
    "mtd": "<android.os.IPowerManager: void nap(long)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHealth",
    "implCls": "android.bluetooth.IBluetoothHealth",
    "inf": "android.bluetooth.IBluetoothHealth",
    "mtd": "<android.bluetooth.IBluetoothHealth: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>"
  },
  {
    "helperCls": "android.view.textservice.TextServicesManager",
    "implCls": "com.android.server.TextServicesManagerService",
    "inf": "com.android.internal.textservice.ITextServicesManager",
    "mtd": "<com.android.internal.textservice.ITextServicesManager: void getSpellCheckerService(java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>"
  },
  {
    "helperCls": "android.hardware.location.ContextHubManager",
    "implCls": "com.android.server.location.ContextHubService",
    "inf": "android.hardware.location.IContextHubService",
    "mtd": "<android.hardware.location.IContextHubService: void unloadNanoAppFromHub(int,android.hardware.location.IContextHubTransactionCallback,long)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.content.pm.UserInfo getUserInfo(int)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.app.KeyguardManager",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: void dismissKeyguard(android.os.IBinder,com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean isPackageDeviceAdminOnAnyUser(java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean installKeyPair(android.content.ComponentName,java.lang.String,byte[],byte[],byte[],java.lang.String,boolean,boolean)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void deleteApplicationCacheFilesAsUser(java.lang.String,int,android.content.pm.IPackageDataObserver)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: java.util.List getPackagesForOps(int[])>"
  },
  {
    "helperCls": "android.telecom.ParcelableCall",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void addVideoCallback(android.os.IBinder)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.content.ComponentName getDeviceOwnerComponent(boolean)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: android.os.ParcelFileDescriptor openDvbDevice(android.media.tv.DvbDeviceInfo,int)>"
  },
  {
    "helperCls": "android.app.slice.SliceManager",
    "implCls": "com.android.server.slice.SliceManagerService",
    "inf": "android.app.slice.ISliceManager",
    "mtd": "<android.app.slice.ISliceManager: void unpinSlice(java.lang.String,android.net.Uri,android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void dispatch(android.nfc.Tag)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.accounts.AccountAuthenticatorResponse",
    "implCls": "android.accounts.IAccountAuthenticatorResponse",
    "inf": "android.accounts.IAccountAuthenticatorResponse",
    "mtd": "<android.accounts.IAccountAuthenticatorResponse: void onResult(android.os.Bundle)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void uninstallCaCerts(android.content.ComponentName,java.lang.String,java.lang.String[])>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isRemovingAdmin(android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isLePeriodicAdvertisingSupported()>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: void showStrictModeViolation(boolean)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId)>"
  },
  {
    "helperCls": "android.app.usage.StorageStatsManager",
    "implCls": "com.android.server.usage.StorageStatsService",
    "inf": "android.app.usage.IStorageStatsManager",
    "mtd": "<android.app.usage.IStorageStatsManager: android.app.usage.StorageStats queryStatsForUid(java.lang.String,int,java.lang.String)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Session",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void removeOverlayView(android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.hardware.location.GeofenceHardwareImpl",
    "implCls": "android.location.IGpsGeofenceHardware",
    "inf": "android.location.IGpsGeofenceHardware",
    "mtd": "<android.location.IGpsGeofenceHardware: boolean addCircularHardwareGeofence(int,double,double,double,int,int,int,int)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: boolean isOperationAuthorized(android.os.IBinder)>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMapClient",
    "implCls": "android.bluetooth.IBluetoothMapClient",
    "inf": "android.bluetooth.IBluetoothMapClient",
    "mtd": "<android.bluetooth.IBluetoothMapClient: java.util.List getConnectedDevices()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: byte[] getInstantAppCookie(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.UiAutomationConnection",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: boolean clearWindowContentFrameStats(android.os.IBinder)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: java.util.List getUsers(boolean)>"
  },
  {
    "helperCls": "android.net.metrics.IpConnectivityLog",
    "implCls": "com.android.server.connectivity.IpConnectivityMetrics$Impl",
    "inf": "android.net.IIpConnectivityMetrics",
    "mtd": "<android.net.IIpConnectivityMetrics: int logEvent(android.net.ConnectivityMetricsEvent)>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "inf": "com.android.internal.app.IVoiceInteractionManagerService",
    "mtd": "<com.android.internal.app.IVoiceInteractionManagerService: int startVoiceActivity(android.os.IBinder,android.content.Intent,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void reportFailedFingerprintAttempt(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isAdminActive(android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: void setDisplayPadding(android.graphics.Rect,java.lang.String)>"
  },
  {
    "helperCls": "android.app.KeyguardManager",
    "implCls": "android.app.trust.ITrustManager",
    "inf": "android.app.trust.ITrustManager",
    "mtd": "<android.app.trust.ITrustManager: boolean isDeviceLocked(int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void registerClient(android.os.ParcelUuid,android.bluetooth.IBluetoothGattCallback)>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: android.content.res.Configuration getConfiguration()>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: android.content.res.Configuration getConfiguration()>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void setEnabled(boolean)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: int[] getDisplayIds()>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: void setCustomPointerIcon(android.view.PointerIcon)>"
  },
  {
    "helperCls": "android.print.PrinterDiscoverySession",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: void startPrinterStateTracking(android.print.PrinterId,int)>"
  },
  {
    "helperCls": "android.app.UiAutomationConnection",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: void unregisterUiTestAutomationService(android.accessibilityservice.IAccessibilityServiceClient)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void splitFromConference(java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void freeStorage(java.lang.String,long,int,android.content.IntentSender)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.VolumeInfo[] getVolumes(int)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.ParcelFileDescriptor openProxyFileDescriptor(int,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller$Session",
    "implCls": "android.content.pm.IPackageInstallerSession",
    "inf": "android.content.pm.IPackageInstallerSession",
    "mtd": "<android.content.pm.IPackageInstallerSession: void setClientProgress(float)>"
  },
  {
    "helperCls": "android.os.UpdateEngine",
    "implCls": "android.os.IUpdateEngine",
    "inf": "android.os.IUpdateEngine",
    "mtd": "<android.os.IUpdateEngine: void resetStatus()>"
  },
  {
    "helperCls": "android.net.ip.IpClient",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void enableIpv6(java.lang.String)>"
  },
  {
    "helperCls": "android.net.IpSecManager$IpSecTunnelInterface",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: void deleteTunnelInterface(int,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int startOperation(android.os.IBinder,int,int,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.app.backup.BackupManager",
    "implCls": "com.android.server.backup.Trampoline",
    "inf": "android.app.backup.IBackupManager",
    "mtd": "<android.app.backup.IBackupManager: int requestBackup(java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: void setDefaultGuestRestrictions(android.os.Bundle)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: boolean enterPrivateMode(android.bluetooth.BluetoothDevice,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int updateOrRestartSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,int,int,boolean)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: java.lang.String getPermissionControllerPackageName()>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionConferenceExtendReceived(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int noteOperation(int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.le.AdvertisingSet",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void setAdvertisingParameters(int,android.bluetooth.le.AdvertisingSetParameters)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: java.lang.String getMountedObbPath(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMap",
    "implCls": "android.bluetooth.IBluetoothMap",
    "inf": "android.bluetooth.IBluetoothMap",
    "mtd": "<android.bluetooth.IBluetoothMap: int getState()>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void playSoundEffect(int)>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: boolean hasNavigationBar()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void finishInput()>"
  },
  {
    "helperCls": "android.net.ip.InterfaceController",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void disableIpv6(java.lang.String)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>"
  },
  {
    "helperCls": "android.app.UiAutomationConnection",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: void freezeRotation(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMap",
    "implCls": "android.bluetooth.IBluetoothMap",
    "inf": "android.bluetooth.IBluetoothMap",
    "mtd": "<android.bluetooth.IBluetoothMap: android.bluetooth.BluetoothDevice getClient()>"
  },
  {
    "helperCls": "android.hardware.usb.UsbManager",
    "implCls": "com.android.server.usb.UsbService",
    "inf": "android.hardware.usb.IUsbManager",
    "mtd": "<android.hardware.usb.IUsbManager: void setCurrentFunction(java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.net.NetworkScoreManager",
    "implCls": "com.android.server.NetworkScoreService",
    "inf": "android.net.INetworkScoreService",
    "mtd": "<android.net.INetworkScoreService: void registerNetworkScoreCache(int,android.net.INetworkScoreCache,int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void setAuthenticationResult(android.os.Bundle,int,int,int)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void phoneAccountSelected(java.lang.String,android.telecom.PhoneAccountHandle,boolean)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: android.media.MediaMetadata getMetadata()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void finishInput()>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHealth",
    "implCls": "android.bluetooth.IBluetoothHealth",
    "inf": "android.bluetooth.IBluetoothHealth",
    "mtd": "<android.bluetooth.IBluetoothHealth: java.util.List getHealthDevicesMatchingConnectionStates(int[])>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Session",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void setCaptionEnabled(android.os.IBinder,boolean,int)>"
  },
  {
    "helperCls": "android.content.pm.CrossProfileApps",
    "implCls": "com.android.server.pm.CrossProfileAppsServiceImpl",
    "inf": "android.content.pm.ICrossProfileApps",
    "mtd": "<android.content.pm.ICrossProfileApps: java.util.List getTargetUserProfiles(java.lang.String)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: android.app.WallpaperInfo getWallpaperInfo(int)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.CardEmulation",
    "implCls": "android.nfc.INfcCardEmulation",
    "inf": "android.nfc.INfcCardEmulation",
    "mtd": "<android.nfc.INfcCardEmulation: boolean supportsAidPrefixRegistration()>"
  },
  {
    "helperCls": "android.nfc.cardemulation.CardEmulation",
    "implCls": "android.nfc.INfcCardEmulation",
    "inf": "android.nfc.INfcCardEmulation",
    "mtd": "<android.nfc.INfcCardEmulation: boolean supportsAidPrefixRegistration()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void invokeBeam()>"
  },
  {
    "helperCls": "android.app.backup.BackupManager",
    "implCls": "com.android.server.backup.Trampoline",
    "inf": "android.app.backup.IBackupManager",
    "mtd": "<android.app.backup.IBackupManager: java.lang.String getDestinationString(java.lang.String)>"
  },
  {
    "helperCls": "android.net.IpSecManager",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: void applyTransportModeTransform(android.os.ParcelFileDescriptor,int,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.content.pm.UserInfo createRestrictedProfile(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: android.os.IBinder getToken(android.os.IBinder)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean isPackageSignedByKeySet(java.lang.String,android.content.pm.KeySet)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void setAudioRestriction(int,int,int,int,java.lang.String[])>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.ActivityOptions",
    "implCls": "android.os.IRemoteCallback",
    "inf": "android.os.IRemoteCallback",
    "mtd": "<android.os.IRemoteCallback: void sendResult(android.os.Bundle)>"
  },
  {
    "helperCls": "android.app.ActivityOptions",
    "implCls": "android.os.IRemoteCallback",
    "inf": "android.os.IRemoteCallback",
    "mtd": "<android.os.IRemoteCallback: void sendResult(android.os.Bundle)>"
  },
  {
    "helperCls": "android.app.ActivityOptions",
    "implCls": "android.os.IRemoteCallback",
    "inf": "android.os.IRemoteCallback",
    "mtd": "<android.os.IRemoteCallback: void sendResult(android.os.Bundle)>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: void cancelEnrollment(android.os.IBinder)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGattServer",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void registerServer(android.os.ParcelUuid,android.bluetooth.IBluetoothGattServerCallback)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: java.lang.String[] getSupportedNetworkTypes()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean showSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void cancelSession(int,int)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Session",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void timeShiftSetPlaybackParams(android.os.IBinder,android.media.PlaybackParams,int)>"
  },
  {
    "helperCls": "android.app.UiAutomationConnection",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: void unregisterUiTestAutomationService(android.accessibilityservice.IAccessibilityServiceClient)>"
  },
  {
    "helperCls": "android.hardware.location.ContextHubClient",
    "implCls": "android.hardware.location.IContextHubClient",
    "inf": "android.hardware.location.IContextHubClient",
    "mtd": "<android.hardware.location.IContextHubClient: void close()>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,long,java.lang.String,java.util.List,android.content.ComponentName,int,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.print.PrintManager",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: void restartPrintJob(android.print.PrintJobId,int,int)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int checkAudioOperation(int,int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void updateSession(int,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,int,int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.ProxyInfo getProxyForNetwork(android.net.Network)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller$Session",
    "implCls": "android.content.pm.IPackageInstallerSession",
    "inf": "android.content.pm.IPackageInstallerSession",
    "mtd": "<android.content.pm.IPackageInstallerSession: void removeSplit(java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.app.SearchManager",
    "implCls": "com.android.server.search.SearchManagerService",
    "inf": "android.app.ISearchManager",
    "mtd": "<android.app.ISearchManager: void launchAssist(android.os.Bundle)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int isEmpty(int)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: boolean isInManagedCall(java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.usb.UsbManager",
    "implCls": "com.android.server.usb.UsbService",
    "inf": "android.hardware.usb.IUsbManager",
    "mtd": "<android.hardware.usb.IUsbManager: void getDeviceList(android.os.Bundle)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder)>"
  },
  {
    "helperCls": "android.service.quicksettings.Tile",
    "implCls": "android.service.quicksettings.IQSService",
    "inf": "android.service.quicksettings.IQSService",
    "mtd": "<android.service.quicksettings.IQSService: void updateQsTile(android.service.quicksettings.Tile,android.os.IBinder)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: android.os.Messenger getWifiServiceMessenger(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dp",
    "implCls": "android.bluetooth.IBluetoothA2dp",
    "inf": "android.bluetooth.IBluetoothA2dp",
    "mtd": "<android.bluetooth.IBluetoothA2dp: void disableOptionalCodecs(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder)>"
  },
  {
    "helperCls": "android.net.IpSecManager",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: void applyTransportModeTransform(android.os.ParcelFileDescriptor,int,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setOverrideApnsEnabled(android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int onUserRemoved(int)>"
  },
  {
    "helperCls": "android.app.KeyguardManager",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: void dismissKeyguard(android.os.IBinder,com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void factoryReset(java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void uninstallCaCerts(android.content.ComponentName,java.lang.String,java.lang.String[])>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: void releaseNetworkRequest(android.net.NetworkRequest)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setBluetoothA2dpOn(boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.lang.String getWifiMacAddress(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: void clearWallpaper(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: boolean setDefaultDialer(java.lang.String)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: void adjustVolume(java.lang.String,android.media.session.ISessionControllerCallback,boolean,int,int)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: android.bluetooth.IBluetoothSocketManager getSocketManager()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMap",
    "implCls": "android.bluetooth.IBluetoothMap",
    "inf": "android.bluetooth.IBluetoothMap",
    "mtd": "<android.bluetooth.IBluetoothMap: boolean setPriority(android.bluetooth.BluetoothDevice,int)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: boolean startGnssBatch(long,boolean,java.lang.String)>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMap",
    "implCls": "android.bluetooth.IBluetoothMap",
    "inf": "android.bluetooth.IBluetoothMap",
    "mtd": "<android.bluetooth.IBluetoothMap: int getState()>"
  },
  {
    "helperCls": "android.app.usage.NetworkStats",
    "implCls": "android.net.INetworkStatsSession",
    "inf": "android.net.INetworkStatsSession",
    "mtd": "<android.net.INetworkStatsSession: void close()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputContext",
    "inf": "com.android.internal.view.IInputContext",
    "mtd": "<com.android.internal.view.IInputContext: void finishComposingText()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: android.bluetooth.BluetoothDevice[] getBondedDevices()>"
  },
  {
    "helperCls": "android.telecom.VideoCallImpl",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void sendSessionModifyRequest(android.telecom.VideoProfile,android.telecom.VideoProfile)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isDeviceProvisioningConfigApplied()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: void requestActivityInfo(android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanManager",
    "implCls": "android.net.lowpan.ILowpanManager",
    "inf": "android.net.lowpan.ILowpanManager",
    "mtd": "<android.net.lowpan.ILowpanManager: java.lang.String[] getInterfaceList()>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: android.os.Bundle getExtras()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int getWifiEnabledState()>"
  },
  {
    "helperCls": "android.net.PacProxySelector",
    "implCls": "com.android.net.IProxyService",
    "inf": "com.android.net.IProxyService",
    "mtd": "<com.android.net.IProxyService: java.lang.String resolvePacFile(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,int)>"
  },
  {
    "helperCls": "android.media.soundtrigger.SoundTriggerManager",
    "implCls": "com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub",
    "inf": "com.android.internal.app.ISoundTriggerService",
    "mtd": "<com.android.internal.app.ISoundTriggerService: int stopRecognitionForIntent(android.os.ParcelUuid)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void finishSession(int,int)>"
  },
  {
    "helperCls": "android.service.oemlock.OemLockManager",
    "implCls": "android.service.oemlock.IOemLockService",
    "inf": "android.service.oemlock.IOemLockService",
    "mtd": "<android.service.oemlock.IOemLockService: boolean isOemUnlockAllowed()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void enableTdlsWithMacAddress(java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dp",
    "implCls": "android.bluetooth.IBluetoothA2dp",
    "inf": "android.bluetooth.IBluetoothA2dp",
    "mtd": "<android.bluetooth.IBluetoothA2dp: void enableOptionalCodecs(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int presentConfirmationPrompt(android.os.IBinder,java.lang.String,byte[],java.lang.String,int)>"
  },
  {
    "helperCls": "android.service.trust.TrustAgentService",
    "implCls": "android.service.trust.ITrustAgentServiceCallback",
    "inf": "android.service.trust.ITrustAgentServiceCallback",
    "mtd": "<android.service.trust.ITrustAgentServiceCallback: void addEscrowToken(byte[],int)>"
  },
  {
    "helperCls": "android.net.IpSecManager",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: void removeTransportModeTransforms(android.os.ParcelFileDescriptor)>"
  },
  {
    "helperCls": "android.app.timezone.RulesManager",
    "implCls": "com.android.server.timezone.RulesManagerService",
    "inf": "android.app.timezone.IRulesManager",
    "mtd": "<android.app.timezone.IRulesManager: int requestInstall(android.os.ParcelFileDescriptor,byte[],android.app.timezone.ICallback)>"
  },
  {
    "helperCls": "android.media.midi.MidiManager",
    "implCls": "com.android.server.midi.MidiService",
    "inf": "android.media.midi.IMidiManager",
    "mtd": "<android.media.midi.IMidiManager: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.util.List getDelegatedScopes(android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration,java.lang.String)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int[] getPackageGids(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "android.view.autofill.IAutoFillManagerClient",
    "inf": "android.view.autofill.IAutoFillManagerClient",
    "mtd": "<android.view.autofill.IAutoFillManagerClient: void autofill(int,java.util.List,java.util.List)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.usage.StorageStatsManager",
    "implCls": "com.android.server.usage.StorageStatsService",
    "inf": "android.app.usage.IStorageStatsManager",
    "mtd": "<android.app.usage.IStorageStatsManager: long getCacheQuotaBytes(java.lang.String,int,java.lang.String)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.content.pm.UserInfo getUserInfo(int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void viewClicked(boolean)>"
  },
  {
    "helperCls": "android.app.trust.TrustManager",
    "implCls": "android.app.trust.ITrustManager",
    "inf": "android.app.trust.ITrustManager",
    "mtd": "<android.app.trust.ITrustManager: void reportEnabledTrustAgentsChanged(int)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int getSupportedFeatures()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void updateSelection(int,int,int,int,int,int)>"
  },
  {
    "helperCls": "android.hardware.location.ContextHubManager",
    "implCls": "com.android.server.location.ContextHubService",
    "inf": "android.hardware.location.IContextHubService",
    "mtd": "<android.hardware.location.IContextHubService: int sendMessage(int,int,android.hardware.location.ContextHubMessage)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void registerDexModule(java.lang.String,java.lang.String,boolean,android.content.pm.IDexModuleRegisterCallback)>"
  },
  {
    "helperCls": "android.app.usage.UsageStatsManager",
    "implCls": "com.android.server.usage.UsageStatsService$BinderService",
    "inf": "android.app.usage.IUsageStatsManager",
    "mtd": "<android.app.usage.IUsageStatsManager: android.app.usage.UsageEvents queryEvents(long,long,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: long getFlags()>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanScanner",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void stopNetScan()>"
  },
  {
    "helperCls": "android.os.RecoverySystem",
    "implCls": "com.android.server.RecoverySystemService$BinderService",
    "inf": "android.os.IRecoverySystem",
    "mtd": "<android.os.IRecoverySystem: boolean clearBcb()>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller",
    "implCls": "android.content.pm.IPackageInstaller",
    "inf": "android.content.pm.IPackageInstaller",
    "mtd": "<android.content.pm.IPackageInstaller: void registerCallback(android.content.pm.IPackageInstallerCallback,int)>"
  },
  {
    "helperCls": "android.media.soundtrigger.SoundTriggerManager",
    "implCls": "com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub",
    "inf": "com.android.internal.app.ISoundTriggerService",
    "mtd": "<com.android.internal.app.ISoundTriggerService: void updateSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps$PinItemRequest",
    "implCls": "android.content.pm.IPinItemRequest",
    "inf": "android.content.pm.IPinItemRequest",
    "mtd": "<android.content.pm.IPinItemRequest: android.appwidget.AppWidgetProviderInfo getAppWidgetProviderInfo()>"
  },
  {
    "helperCls": "android.app.UiAutomationConnection",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: boolean isRotationFrozen()>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.StatsManager",
    "implCls": "android.os.IStatsManager",
    "inf": "android.os.IStatsManager",
    "mtd": "<android.os.IStatsManager: void setDataFetchOperation(long,android.os.IBinder,java.lang.String)>"
  },
  {
    "helperCls": "android.content.SyncContext",
    "implCls": "android.content.ISyncContext",
    "inf": "android.content.ISyncContext",
    "mtd": "<android.content.ISyncContext: void onFinished(android.content.SyncResult)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothPan",
    "implCls": "android.bluetooth.IBluetoothPan",
    "inf": "android.bluetooth.IBluetoothPan",
    "mtd": "<android.bluetooth.IBluetoothPan: boolean connect(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanManager",
    "implCls": "android.net.lowpan.ILowpanManager",
    "inf": "android.net.lowpan.ILowpanManager",
    "mtd": "<android.net.lowpan.ILowpanManager: void removeListener(android.net.lowpan.ILowpanManagerListener)>"
  },
  {
    "helperCls": "android.print.PrinterDiscoverySession",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: void stopPrinterDiscovery(android.print.IPrinterDiscoveryObserver,int)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller",
    "implCls": "android.content.pm.IPackageInstaller",
    "inf": "android.content.pm.IPackageInstaller",
    "mtd": "<android.content.pm.IPackageInstaller: android.content.pm.ParceledListSlice getMySessions(java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: boolean stopScoUsingVirtualVoiceCall()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void wipeDataWithReason(int,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void setTemporaryBrightness(int)>"
  },
  {
    "helperCls": "android.hardware.location.ContextHubManager",
    "implCls": "com.android.server.location.ContextHubService",
    "inf": "android.hardware.location.IContextHubService",
    "mtd": "<android.hardware.location.IContextHubService: android.hardware.location.NanoAppInstanceInfo getNanoAppInstanceInfo(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: boolean connect(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)>"
  },
  {
    "helperCls": "android.telephony.ims.feature.MmTelFeature",
    "implCls": "android.telephony.ims.aidl.IImsMmTelFeature",
    "inf": "android.telephony.ims.aidl.IImsMmTelFeature",
    "mtd": "<android.telephony.ims.aidl.IImsMmTelFeature: java.lang.String getSmsFormat()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void addCrossProfileIntentFilter(android.content.IntentFilter,java.lang.String,int,int,int)>"
  },
  {
    "helperCls": "android.net.IpSecManager$IpSecTunnelInterface",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: void removeAddressFromTunnelInterface(int,android.net.LinkAddress,java.lang.String)>"
  },
  {
    "helperCls": "android.content.ClipboardManager",
    "implCls": "com.android.server.clipboard.ClipboardService$ClipboardImpl",
    "inf": "android.content.IClipboard",
    "mtd": "<android.content.IClipboard: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String)>"
  },
  {
    "helperCls": "android.net.sip.SipSession",
    "implCls": "android.net.sip.ISipSession",
    "inf": "android.net.sip.ISipSession",
    "mtd": "<android.net.sip.ISipSession: void unregister()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.net.sip.SipManager",
    "implCls": "com.android.server.sip.SipService",
    "inf": "android.net.sip.ISipService",
    "mtd": "<android.net.sip.ISipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>"
  },
  {
    "helperCls": "android.app.usage.StorageStatsManager",
    "implCls": "com.android.server.usage.StorageStatsService",
    "inf": "android.app.usage.IStorageStatsManager",
    "mtd": "<android.app.usage.IStorageStatsManager: android.app.usage.StorageStats queryStatsForPackage(java.lang.String,java.lang.String,int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void startManagedQuickContact(java.lang.String,long,boolean,long,android.content.Intent)>"
  },
  {
    "helperCls": "android.provider.Settings$Secure",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: int isInTabletMode()>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: int untether(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: void reportInetCondition(int,int)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes(int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHearingAid",
    "implCls": "android.bluetooth.IBluetoothHearingAid",
    "inf": "android.bluetooth.IBluetoothHearingAid",
    "mtd": "<android.bluetooth.IBluetoothHearingAid: void adjustVolume(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: boolean getLastVoiceTagNumber(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void restoreSupplicantBackupData(byte[],byte[])>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean getScreenCaptureDisabled(android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.net.metrics.IpConnectivityLog",
    "implCls": "com.android.server.connectivity.IpConnectivityMetrics$Impl",
    "inf": "android.net.IIpConnectivityMetrics",
    "mtd": "<android.net.IIpConnectivityMetrics: int logEvent(android.net.ConnectivityMetricsEvent)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getLastAudibleStreamVolume(int)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: boolean isOutgoingCallPermitted(android.telecom.PhoneAccountHandle)>"
  },
  {
    "helperCls": "android.media.midi.MidiDevice",
    "implCls": "android.media.midi.IMidiDeviceServer",
    "inf": "android.media.midi.IMidiDeviceServer",
    "mtd": "<android.media.midi.IMidiDeviceServer: java.io.FileDescriptor openInputPort(android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.content.pm.UserInfo getUserInfo(int)>"
  },
  {
    "helperCls": "android.app.Instrumentation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: void connect(android.accessibilityservice.IAccessibilityServiceClient,int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAvrcpController",
    "implCls": "android.bluetooth.IBluetoothAvrcpController",
    "inf": "android.bluetooth.IBluetoothAvrcpController",
    "mtd": "<android.bluetooth.IBluetoothAvrcpController: int getConnectionState(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.provider.Settings$Secure",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: long getUidStats(int,int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int verify(java.lang.String,byte[],byte[])>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.content.pm.UserInfo getUserInfo(int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>"
  },
  {
    "helperCls": "android.hardware.location.ContextHubManager",
    "implCls": "com.android.server.location.ContextHubService",
    "inf": "android.hardware.location.IContextHubService",
    "mtd": "<android.hardware.location.IContextHubService: void loadNanoAppOnHub(int,android.hardware.location.IContextHubTransactionCallback,android.hardware.location.NanoAppBinary)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: boolean isAudioConnected(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection$VideoProvider",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void sendSessionModifyResponse(android.telecom.VideoProfile)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean setPhonebookAccessPermission(android.bluetooth.BluetoothDevice,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isLockTaskPermitted(java.lang.String)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: java.util.List getEnabledInputMethodList()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.net.NetworkScoreManager",
    "implCls": "com.android.server.NetworkScoreService",
    "inf": "android.net.INetworkScoreService",
    "mtd": "<android.net.INetworkScoreService: void unregisterNetworkScoreCache(int,android.net.INetworkScoreCache)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void unregisterNetworkActivityListener(android.os.INetworkActivityListener)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: java.lang.String getState()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionConferenceExtended(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
  },
  {
    "helperCls": "android.os.RecoverySystem",
    "implCls": "com.android.server.RecoverySystemService$BinderService",
    "inf": "android.os.IRecoverySystem",
    "mtd": "<android.os.IRecoverySystem: void rebootRecoveryWithCommand(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int getPackageUid(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void setP2pModes(int,int)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: long getCacheSizeBytes(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean notifySuggestionPicked(android.text.style.SuggestionSpan,java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.InstantAppResolverService$InstantAppResolutionCallback",
    "implCls": "android.os.IRemoteCallback",
    "inf": "android.os.IRemoteCallback",
    "mtd": "<android.os.IRemoteCallback: void sendResult(android.os.Bundle)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: boolean needs5GHzToAnyApBandConversion()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidDevice",
    "implCls": "android.bluetooth.IBluetoothHidDevice",
    "inf": "android.bluetooth.IBluetoothHidDevice",
    "mtd": "<android.bluetooth.IBluetoothHidDevice: boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings,android.bluetooth.BluetoothHidDeviceAppQosSettings,android.bluetooth.BluetoothHidDeviceAppQosSettings,android.bluetooth.IBluetoothHidDeviceCallback)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean generateKeyPair(android.content.ComponentName,java.lang.String,java.lang.String,android.security.keystore.ParcelableKeyGenParameterSpec,int,android.security.keymaster.KeymasterCertificateChain)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHealth",
    "implCls": "android.bluetooth.IBluetoothHealth",
    "inf": "android.bluetooth.IBluetoothHealth",
    "mtd": "<android.bluetooth.IBluetoothHealth: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: long preEnroll(android.os.IBinder)>"
  },
  {
    "helperCls": "android.service.trust.TrustAgentService",
    "implCls": "android.service.trust.ITrustAgentServiceCallback",
    "inf": "android.service.trust.ITrustAgentServiceCallback",
    "mtd": "<android.service.trust.ITrustAgentServiceCallback: void removeEscrowToken(long,int)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: void disableInputDevice(int)>"
  },
  {
    "helperCls": "android.os.UpdateLock",
    "implCls": "com.android.server.UpdateLockService",
    "inf": "android.os.IUpdateLock",
    "mtd": "<android.os.IUpdateLock: void releaseUpdateLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.view.autofill._$$Lambda$AutofillManager$V76JiQu509LCUz3_ckpb_nB3JhA",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void removeClient(android.view.autofill.IAutoFillManagerClient,int)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller$Session",
    "implCls": "android.content.pm.IPackageInstallerSession",
    "inf": "android.content.pm.IPackageInstallerSession",
    "mtd": "<android.content.pm.IPackageInstallerSession: void commit(android.content.IntentSender,boolean)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: java.lang.String getPackageName()>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "android.app.IInputForwarder",
    "inf": "android.app.IInputForwarder",
    "mtd": "<android.app.IInputForwarder: boolean forwardEvent(android.view.InputEvent)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void allocateBytes(java.lang.String,long,int,java.lang.String)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: boolean isPlaybackActive(android.media.IMediaRouterClient)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.hardware.display.BrightnessConfiguration getDefaultBrightnessConfiguration()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.database.BulkCursorToCursorAdaptor",
    "implCls": "android.database.IBulkCursor",
    "inf": "android.database.IBulkCursor",
    "mtd": "<android.database.IBulkCursor: void onMove(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: android.bluetooth.IBluetoothSocketManager getSocketManager()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void setCountryCode(java.lang.String)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: java.lang.String[] list(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.Session",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanCommissioningSession",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void removeListener(android.net.lowpan.ILowpanInterfaceListener)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: boolean isBleScanAlwaysAvailable()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int movePackage(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsUtListener",
    "implCls": "com.android.ims.internal.IImsUtListener",
    "inf": "com.android.ims.internal.IImsUtListener",
    "mtd": "<com.android.ims.internal.IImsUtListener: void utConfigurationCallWaitingQueried(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsSsInfo[])>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setLockTaskPackages(android.content.ComponentName,java.lang.String[])>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.app.AlarmManager",
    "implCls": "android.app.IAlarmManager",
    "inf": "android.app.IAlarmManager",
    "mtd": "<android.app.IAlarmManager: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>"
  },
  {
    "helperCls": "android.os.ServiceManager",
    "implCls": "android.os.IServiceManager",
    "inf": "android.os.IServiceManager",
    "mtd": "<android.os.IServiceManager: java.lang.String[] listServices(int)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void respondToRttRequest(java.lang.String,int,boolean)>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: void enroll(android.os.IBinder,byte[],int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getRemoteType(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "android.view.autofill.IAutoFillManagerClient",
    "inf": "android.view.autofill.IAutoFillManagerClient",
    "mtd": "<android.view.autofill.IAutoFillManagerClient: void setSessionFinished(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getOrganizationColor(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.media.midi.MidiDeviceServer",
    "implCls": "com.android.server.midi.MidiService",
    "inf": "android.media.midi.IMidiManager",
    "mtd": "<android.media.midi.IMidiManager: void setDeviceStatus(android.media.midi.IMidiDeviceServer,android.media.midi.MidiDeviceStatus)>"
  },
  {
    "helperCls": "android.net.EthernetManager",
    "implCls": "com.android.server.ethernet.EthernetServiceImpl",
    "inf": "android.net.IEthernetManager",
    "mtd": "<android.net.IEthernetManager: void setConfiguration(java.lang.String,android.net.IpConfiguration)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.nfc.cardemulation.NfcFCardEmulation",
    "implCls": "android.nfc.INfcFCardEmulation",
    "inf": "android.nfc.INfcFCardEmulation",
    "mtd": "<android.nfc.INfcFCardEmulation: int getMaxNumOfRegisterableSystemCodes()>"
  },
  {
    "helperCls": "android.nfc.cardemulation.NfcFCardEmulation",
    "implCls": "android.nfc.INfcFCardEmulation",
    "inf": "android.nfc.INfcFCardEmulation",
    "mtd": "<android.nfc.INfcFCardEmulation: int getMaxNumOfRegisterableSystemCodes()>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: void showStrictModeViolation(boolean)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller",
    "implCls": "android.content.pm.IPackageInstaller",
    "inf": "android.content.pm.IPackageInstaller",
    "mtd": "<android.content.pm.IPackageInstaller: void registerCallback(android.content.pm.IPackageInstallerCallback,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isOverrideApnEnabled(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean isInstantApp(java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: long getUidStats(int,int)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void setUidMode(int,int,int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void clearSystemUpdatePolicyFreezePeriodRecord()>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean hasUserRestriction(java.lang.String,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getSharedLibraries(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void hide()>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void hide()>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void hide()>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void hide()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.telephony.mbms.StreamingService",
    "implCls": "android.telephony.mbms.vendor.IMbmsStreamingService",
    "inf": "android.telephony.mbms.vendor.IMbmsStreamingService",
    "mtd": "<android.telephony.mbms.vendor.IMbmsStreamingService: void stopStreaming(int,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void finishSelf(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void finishSelf(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidHost",
    "implCls": "android.bluetooth.IBluetoothHidHost",
    "inf": "android.bluetooth.IBluetoothHidHost",
    "mtd": "<android.bluetooth.IBluetoothHidHost: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)>"
  },
  {
    "helperCls": "android.app.KeyguardManager",
    "implCls": "android.app.trust.ITrustManager",
    "inf": "android.app.trust.ITrustManager",
    "mtd": "<android.app.trust.ITrustManager: boolean isDeviceSecure(int)>"
  },
  {
    "helperCls": "android.telecom.RemoteConference",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void mergeConference(java.lang.String,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient,int)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void holdCall(java.lang.String)>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void unhold(java.lang.String,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void finishSession(int,int)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: android.accounts.Account[] getAccounts(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.LinkProperties getLinkProperties(android.net.Network)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])>"
  },
  {
    "helperCls": "android.net.wifi.p2p.WifiP2pManager",
    "implCls": "com.android.server.wifi.p2p.WifiP2pServiceImpl",
    "inf": "android.net.wifi.p2p.IWifiP2pManager",
    "mtd": "<android.net.wifi.p2p.IWifiP2pManager: android.os.Messenger getP2pStateMachineMessenger()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: void setForceScoAudio(boolean)>"
  },
  {
    "helperCls": "android.location.CountryDetector",
    "implCls": "com.android.server.CountryDetectorService",
    "inf": "android.location.ICountryDetector",
    "mtd": "<android.location.ICountryDetector: void addCountryListener(android.location.ICountryListener)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: int getCallState()>"
  },
  {
    "helperCls": "android.net.sip.SipSession",
    "implCls": "android.net.sip.ISipSession",
    "inf": "android.net.sip.ISipSession",
    "mtd": "<android.net.sip.ISipSession: void endCall()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGattServer",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void sendResponse(int,java.lang.String,int,int,int,byte[])>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getPhonebookAccessPermission(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setDefaultSmsApplication(android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void clearPackagePreferredActivities(java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isSeparateProfileChallengeAllowed(int)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: void createNotificationChannels(java.lang.String,android.content.pm.ParceledListSlice)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int exist(java.lang.String,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: boolean disableNdefPush()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.DiskInfo[] getDisks()>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: long getUidStats(int,int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void updateSession(int,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,int,int)>"
  },
  {
    "helperCls": "android.hardware.location.ContextHubManager",
    "implCls": "com.android.server.location.ContextHubService",
    "inf": "android.hardware.location.IContextHubService",
    "mtd": "<android.hardware.location.IContextHubService: int registerCallback(android.hardware.location.IContextHubCallback)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.util.MergedConfiguration,android.view.Surface)>"
  },
  {
    "helperCls": "android.app.KeyguardManager",
    "implCls": "android.app.trust.ITrustManager",
    "inf": "android.app.trust.ITrustManager",
    "mtd": "<android.app.trust.ITrustManager: boolean isDeviceSecure(int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMapClient",
    "implCls": "android.bluetooth.IBluetoothMapClient",
    "inf": "android.bluetooth.IBluetoothMapClient",
    "mtd": "<android.bluetooth.IBluetoothMapClient: boolean sendMessage(android.bluetooth.BluetoothDevice,android.net.Uri[],java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanCommissioningSession",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void removeListener(android.net.lowpan.ILowpanInterfaceListener)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothPan",
    "implCls": "android.bluetooth.IBluetoothPan",
    "inf": "android.bluetooth.IBluetoothPan",
    "mtd": "<android.bluetooth.IBluetoothPan: void setBluetoothTethering(boolean)>"
  },
  {
    "helperCls": "android.net.EthernetManager",
    "implCls": "com.android.server.ethernet.EthernetServiceImpl",
    "inf": "android.net.IEthernetManager",
    "mtd": "<android.net.IEthernetManager: java.lang.String[] getAvailableInterfaces()>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.util.MergedConfiguration,android.view.Surface)>"
  },
  {
    "helperCls": "android.app.VrManager",
    "implCls": "android.service.vr.IVrManager",
    "inf": "android.service.vr.IVrManager",
    "mtd": "<android.service.vr.IVrManager: boolean getPersistentVrModeEnabled()>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.content.pm.ParceledListSlice getBrightnessEvents(java.lang.String)>"
  },
  {
    "helperCls": "android.app.UiAutomation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: void clearWindowAnimationFrameStats()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void registerListener(android.os.storage.IStorageEventListener)>"
  },
  {
    "helperCls": "android.app.backup.BackupManager",
    "implCls": "com.android.server.backup.Trampoline",
    "inf": "android.app.backup.IBackupManager",
    "mtd": "<android.app.backup.IBackupManager: void setBackupEnabled(boolean)>"
  },
  {
    "helperCls": "android.media.audiopolicy.AudioPolicy",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int addMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>"
  },
  {
    "helperCls": "android.app.usage.NetworkStats",
    "implCls": "android.net.INetworkStatsSession",
    "inf": "android.net.INetworkStatsSession",
    "mtd": "<android.net.INetworkStatsSession: android.net.NetworkStatsHistory getHistoryIntervalForUid(android.net.NetworkTemplate,int,int,int,int,long,long)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void verifyNfcPermission()>"
  },
  {
    "helperCls": "android.app.usage.StorageStatsManager",
    "implCls": "com.android.server.usage.StorageStatsService",
    "inf": "android.app.usage.IStorageStatsManager",
    "mtd": "<android.app.usage.IStorageStatsManager: long getCacheBytes(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.speech.SpeechRecognizer",
    "implCls": "android.speech.IRecognitionService",
    "inf": "android.speech.IRecognitionService",
    "mtd": "<android.speech.IRecognitionService: void cancel(android.speech.IRecognitionListener)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void setInsets(android.view.IWindow,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Region)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: java.lang.String[] getMobileIfaces()>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void swapConference(java.lang.String)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void releaseTvInputHardware(int,android.media.tv.ITvInputHardware,int)>"
  },
  {
    "helperCls": "android.app.StatsManager",
    "implCls": "android.os.IStatsManager",
    "inf": "android.os.IStatsManager",
    "mtd": "<android.os.IStatsManager: void addConfiguration(long,byte[],java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void setTemporaryBrightness(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dpSink",
    "implCls": "android.bluetooth.IBluetoothA2dpSink",
    "inf": "android.bluetooth.IBluetoothA2dpSink",
    "mtd": "<android.bluetooth.IBluetoothA2dpSink: boolean setPriority(android.bluetooth.BluetoothDevice,int)>"
  },
  {
    "helperCls": "android.app.usage.UsageStatsManager",
    "implCls": "com.android.server.usage.UsageStatsService$BinderService",
    "inf": "android.app.usage.IUsageStatsManager",
    "mtd": "<android.app.usage.IUsageStatsManager: android.content.pm.ParceledListSlice queryEventStats(int,long,long,java.lang.String)>"
  },
  {
    "helperCls": "android.database.BulkCursorToCursorAdaptor",
    "implCls": "android.database.IBulkCursor",
    "inf": "android.database.IBulkCursor",
    "mtd": "<android.database.IBulkCursor: void close()>"
  },
  {
    "helperCls": "android.database.BulkCursorToCursorAdaptor",
    "implCls": "android.database.IBulkCursor",
    "inf": "android.database.IBulkCursor",
    "mtd": "<android.database.IBulkCursor: void close()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int getSupportedFeatures()>"
  },
  {
    "helperCls": "android.app.KeyguardManager",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: boolean isKeyguardLocked()>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean outOfMemory(android.view.IWindow)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void unregisterClient(int)>"
  },
  {
    "helperCls": "android.net.nsd.NsdManager",
    "implCls": "com.android.server.NsdService",
    "inf": "android.net.nsd.INsdManager",
    "mtd": "<android.net.nsd.INsdManager: android.os.Messenger getMessenger()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: java.lang.String[] getTetheredIfaces()>"
  },
  {
    "helperCls": "android.media.midi.MidiDeviceServer",
    "implCls": "com.android.server.midi.MidiService",
    "inf": "android.media.midi.IMidiManager",
    "mtd": "<android.media.midi.IMidiManager: void unregisterDeviceServer(android.media.midi.IMidiDeviceServer)>"
  },
  {
    "helperCls": "android.app.trust.TrustManager",
    "implCls": "android.app.trust.ITrustManager",
    "inf": "android.app.trust.ITrustManager",
    "mtd": "<android.app.trust.ITrustManager: void unlockedByFingerprintForUser(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void avrcpSupportsAbsoluteVolume(java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: boolean setPrintJobState(android.print.PrintJobId,int,java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean isSameProfileGroup(int,int)>"
  },
  {
    "helperCls": "android.app.AlarmManager",
    "implCls": "android.app.IAlarmManager",
    "inf": "android.app.IAlarmManager",
    "mtd": "<android.app.IAlarmManager: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.hardware.display.BrightnessConfiguration getBrightnessConfigurationForUser(int)>"
  },
  {
    "helperCls": "android.media.Ringtone",
    "implCls": "android.media.IRingtonePlayer",
    "inf": "android.media.IRingtonePlayer",
    "mtd": "<android.media.IRingtonePlayer: void setPlaybackProperties(android.os.IBinder,float,boolean)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: java.lang.String getSystemTextClassifierPackageName()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isProfileActivePasswordSufficientForParent(int)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionService",
    "implCls": "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "inf": "com.android.internal.app.IVoiceInteractionManagerService",
    "mtd": "<com.android.internal.app.IVoiceInteractionManagerService: int stopRecognition(android.service.voice.IVoiceInteractionService,int,android.hardware.soundtrigger.IRecognitionStatusCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void discoverServices(int,java.lang.String)>"
  },
  {
    "helperCls": "android.os.RecoverySystem",
    "implCls": "com.android.server.RecoverySystemService$BinderService",
    "inf": "android.os.IRecoverySystem",
    "mtd": "<android.os.IRecoverySystem: void rebootRecoveryWithCommand(java.lang.String)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.VolumeInfo[] getVolumes(int)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void unlockUserKey(int,int,byte[],byte[])>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: boolean isInbandRingingEnabled()>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: android.security.keymaster.OperationResult finish(android.os.IBinder,android.security.keymaster.KeymasterArguments,byte[],byte[])>"
  },
  {
    "helperCls": "android.media.midi.MidiDevice$MidiConnection",
    "implCls": "android.media.midi.IMidiDeviceServer",
    "inf": "android.media.midi.IMidiDeviceServer",
    "mtd": "<android.media.midi.IMidiDeviceServer: void closePort(android.os.IBinder)>"
  },
  {
    "helperCls": "android.media.midi.MidiDevice$MidiConnection",
    "implCls": "android.media.midi.IMidiDeviceServer",
    "inf": "android.media.midi.IMidiDeviceServer",
    "mtd": "<android.media.midi.IMidiDeviceServer: void closePort(android.os.IBinder)>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection$VideoProvider",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void setZoom(float)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "android.view.autofill.IAutoFillManagerClient",
    "inf": "android.view.autofill.IAutoFillManagerClient",
    "mtd": "<android.view.autofill.IAutoFillManagerClient: void authenticate(int,int,android.content.IntentSender,android.content.Intent)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder)>"
  },
  {
    "helperCls": "android.content.ClipboardManager",
    "implCls": "com.android.server.clipboard.ClipboardService$ClipboardImpl",
    "inf": "android.content.IClipboard",
    "mtd": "<android.content.IClipboard: boolean hasPrimaryClip(java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.util.List getActiveAdmins(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isCaCertApproved(java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean enableNoAutoConnect()>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: boolean hasEnrolledFingerprints(int,java.lang.String)>"
  },
  {
    "helperCls": "android.media.browse.MediaBrowser",
    "implCls": "android.service.media.IMediaBrowserService",
    "inf": "android.service.media.IMediaBrowserService",
    "mtd": "<android.service.media.IMediaBrowserService: void addSubscriptionDeprecated(java.lang.String,android.service.media.IMediaBrowserServiceCallbacks)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.ParcelFileDescriptor openProxyFileDescriptor(int,int,int)>"
  },
  {
    "helperCls": "android.os.SystemVibrator",
    "implCls": "com.android.server.VibratorService",
    "inf": "android.os.IVibratorService",
    "mtd": "<android.os.IVibratorService: void cancelVibrate(android.os.IBinder)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: void factoryReset()>"
  },
  {
    "helperCls": "android.app.usage.NetworkStatsManager",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: android.net.DataUsageRequest registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.util.MergedConfiguration,android.view.Surface)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int addClient(android.view.autofill.IAutoFillManagerClient,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int getInstallReason(java.lang.String,int)>"
  },
  {
    "helperCls": "android.media.session.MediaSession",
    "implCls": "android.media.session.ISession",
    "inf": "android.media.session.ISession",
    "mtd": "<android.media.session.ISession: void setMediaButtonReceiver(android.app.PendingIntent)>"
  },
  {
    "helperCls": "android.media.Ringtone",
    "implCls": "android.media.IRingtonePlayer",
    "inf": "android.media.IRingtonePlayer",
    "mtd": "<android.media.IRingtonePlayer: java.lang.String getTitle(android.net.Uri)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean setMandatoryBackupTransport(android.content.ComponentName,android.content.ComponentName)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputContext",
    "inf": "com.android.internal.view.IInputContext",
    "mtd": "<com.android.internal.view.IInputContext: void finishComposingText()>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetHost",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: android.os.Bundle getAppWidgetOptions(java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: byte[] retrieveBackupData()>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.os.Bundle getApplicationRestrictions(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidDevice",
    "implCls": "android.bluetooth.IBluetoothHidDevice",
    "inf": "android.bluetooth.IBluetoothHidDevice",
    "mtd": "<android.bluetooth.IBluetoothHidDevice: java.util.List getConnectedDevices()>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: boolean setPrintJobTag(android.print.PrintJobId,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setShortSupportMessage(android.content.ComponentName,java.lang.CharSequence)>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: void onApplicationActive(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.media.midi.MidiInputPort",
    "implCls": "android.media.midi.IMidiDeviceServer",
    "inf": "android.media.midi.IMidiDeviceServer",
    "mtd": "<android.media.midi.IMidiDeviceServer: void closePort(android.os.IBinder)>"
  },
  {
    "helperCls": "android.database.BulkCursorToCursorAdaptor",
    "implCls": "android.database.IBulkCursor",
    "inf": "android.database.IBulkCursor",
    "mtd": "<android.database.IBulkCursor: int requery(android.database.IContentObserver)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: void releasePendingNetworkRequest(android.app.PendingIntent)>"
  },
  {
    "helperCls": "android.app.backup.BackupManager",
    "implCls": "com.android.server.backup.Trampoline",
    "inf": "android.app.backup.IBackupManager",
    "mtd": "<android.app.backup.IBackupManager: java.lang.String[] listAllTransports()>"
  },
  {
    "helperCls": "android.media.session.MediaSession",
    "implCls": "android.media.session.ISession",
    "inf": "android.media.session.ISession",
    "mtd": "<android.media.session.ISession: void setRatingType(int)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.app.AlarmManager",
    "implCls": "android.app.IAlarmManager",
    "inf": "android.app.IAlarmManager",
    "mtd": "<android.app.IAlarmManager: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAvrcpController",
    "implCls": "android.bluetooth.IBluetoothAvrcpController",
    "inf": "android.bluetooth.IBluetoothAvrcpController",
    "mtd": "<android.bluetooth.IBluetoothAvrcpController: boolean setPlayerApplicationSetting(android.bluetooth.BluetoothAvrcpPlayerSettings)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void verifyNfcPermission()>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void update(int,android.telephony.ims.ImsStreamMediaProfile)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isLeExtendedAdvertisingSupported()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean shouldOfferSwitchingToNextInputMethod(android.os.IBinder)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setScreenCaptureDisabled(android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "android.view.autofill.IAutoFillManagerClient",
    "inf": "android.view.autofill.IAutoFillManagerClient",
    "mtd": "<android.view.autofill.IAutoFillManagerClient: void requestShowFillUi(int,android.view.autofill.AutofillId,int,int,android.graphics.Rect,android.view.autofill.IAutofillWindowPresenter)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: android.net.wifi.WifiConfiguration getWifiApConfiguration()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void partitionMixed(java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: int setUsbTethering(boolean,java.lang.String)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void clearTestProviderLocation(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.media.midi.MidiInputPort",
    "implCls": "android.media.midi.IMidiDeviceServer",
    "inf": "android.media.midi.IMidiDeviceServer",
    "mtd": "<android.media.midi.IMidiDeviceServer: void closePort(android.os.IBinder)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: float getCurrentAnimatorScale()>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: long getTotalStats(int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void playSoundEffectVolume(int,float)>"
  },
  {
    "helperCls": "android.net.IpSecManager",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: void removeTransportModeTransforms(android.os.ParcelFileDescriptor)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: android.os.Messenger getWifiServiceMessenger(java.lang.String)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: java.util.List getSessions(android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.app.UiAutomation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: boolean setRotation(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.os.BatteryManager",
    "implCls": "android.os.IBatteryPropertiesRegistrar",
    "inf": "android.os.IBatteryPropertiesRegistrar",
    "mtd": "<android.os.IBatteryPropertiesRegistrar: int getProperty(int,android.os.BatteryProperty)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int updateOrRestartSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,int,int,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHearingAid",
    "implCls": "android.bluetooth.IBluetoothHearingAid",
    "inf": "android.bluetooth.IBluetoothHearingAid",
    "mtd": "<android.bluetooth.IBluetoothHearingAid: int getPriority(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Session",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void releaseSession(android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.hardware.location.ContextHubManager",
    "implCls": "com.android.server.location.ContextHubService",
    "inf": "android.hardware.location.IContextHubService",
    "mtd": "<android.hardware.location.IContextHubService: android.hardware.location.IContextHubClient createClient(android.hardware.location.IContextHubClientCallback,int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: boolean setAlwaysOnVpnPackage(int,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.hardware.display.Curve getMinimumBrightnessCurve()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void setInstallerPackageName(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothSap",
    "implCls": "android.bluetooth.IBluetoothSap",
    "inf": "android.bluetooth.IBluetoothSap",
    "mtd": "<android.bluetooth.IBluetoothSap: android.bluetooth.BluetoothDevice getClient()>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.hardware.radio.RadioManager",
    "implCls": "com.android.server.broadcastradio.BroadcastRadioService$ServiceImpl",
    "inf": "android.hardware.radio.IRadioService",
    "mtd": "<android.hardware.radio.IRadioService: android.hardware.radio.ITuner openTuner(int,android.hardware.radio.RadioManager$BandConfig,boolean,android.hardware.radio.ITunerCallback)>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: void authenticate(android.os.IBinder,long,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String,android.os.Bundle,android.hardware.biometrics.IBiometricPromptReceiver)>"
  },
  {
    "helperCls": "android.net.ip.IpClient",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: void cancelNotificationWithTag(java.lang.String,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void wallpaperOffsetsComplete(android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.util.MergedConfiguration,android.view.Surface)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dpSink",
    "implCls": "android.bluetooth.IBluetoothA2dpSink",
    "inf": "android.bluetooth.IBluetoothA2dpSink",
    "mtd": "<android.bluetooth.IBluetoothA2dpSink: java.util.List getDevicesMatchingConnectionStates(int[])>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHealth",
    "implCls": "android.bluetooth.IBluetoothHealth",
    "inf": "android.bluetooth.IBluetoothHealth",
    "mtd": "<android.bluetooth.IBluetoothHealth: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller$Session",
    "implCls": "android.content.pm.IPackageInstallerSession",
    "inf": "android.content.pm.IPackageInstallerSession",
    "mtd": "<android.content.pm.IPackageInstallerSession: void commit(android.content.IntentSender,boolean)>"
  },
  {
    "helperCls": "android.service.quicksettings.TileService",
    "implCls": "android.service.quicksettings.IQSService",
    "inf": "android.service.quicksettings.IQSService",
    "mtd": "<android.service.quicksettings.IQSService: void onShowDialog(android.os.IBinder)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller",
    "implCls": "android.content.pm.IPackageInstaller",
    "inf": "android.content.pm.IPackageInstaller",
    "mtd": "<android.content.pm.IPackageInstaller: void uninstall(android.content.pm.VersionedPackage,java.lang.String,int,android.content.IntentSender,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidDevice",
    "implCls": "android.bluetooth.IBluetoothHidDevice",
    "inf": "android.bluetooth.IBluetoothHidDevice",
    "mtd": "<android.bluetooth.IBluetoothHidDevice: int getConnectionState(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getDeviceOwnerLockScreenInfo()>"
  },
  {
    "helperCls": "android.net.ip.IpClient",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionService",
    "implCls": "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "inf": "com.android.internal.app.IVoiceInteractionManagerService",
    "mtd": "<com.android.internal.app.IVoiceInteractionManagerService: void setDisabledShowContext(int)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setFocusRequestResultFromExtPolicy(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>"
  },
  {
    "helperCls": "android.app.UiAutomationConnection",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int dispatchFocusChange(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>"
  },
  {
    "helperCls": "android.os.RecoverySystem",
    "implCls": "com.android.server.RecoverySystemService$BinderService",
    "inf": "android.os.IRecoverySystem",
    "mtd": "<android.os.IRecoverySystem: void rebootRecoveryWithCommand(java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.util.List retrieveNetworkLogs(android.content.ComponentName,long)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.lang.String getProfileOwnerName(int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionHoldReceived(android.telephony.ims.ImsCallProfile)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: java.util.List getActivePlaybackConfigurations()>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int updateOrRestartSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,int,int,boolean)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryContentProviders(java.lang.String,int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.telephony.ims.feature.MmTelFeature",
    "implCls": "android.telephony.ims.aidl.IImsMmTelFeature",
    "inf": "android.telephony.ims.aidl.IImsMmTelFeature",
    "mtd": "<android.telephony.ims.aidl.IImsMmTelFeature: void setListener(android.telephony.ims.aidl.IImsMmTelListener)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int is_hardware_backed(java.lang.String)>"
  },
  {
    "helperCls": "android.app.trust.TrustManager",
    "implCls": "android.app.trust.ITrustManager",
    "inf": "android.app.trust.ITrustManager",
    "mtd": "<android.app.trust.ITrustManager: void setDeviceLockedForUser(int,boolean)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: void adjustVolume(java.lang.String,android.media.session.ISessionControllerCallback,boolean,int,int)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: void adjustVolume(java.lang.String,android.media.session.ISessionControllerCallback,boolean,int,int)>"
  },
  {
    "helperCls": "android.app.backup.BackupManager",
    "implCls": "com.android.server.backup.Trampoline",
    "inf": "android.app.backup.IBackupManager",
    "mtd": "<android.app.backup.IBackupManager: android.content.Intent getDataManagementIntent(java.lang.String)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void putExtras(java.lang.String,android.os.Bundle)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setActivePasswordState(android.app.admin.PasswordMetrics,int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int startOperation(android.os.IBinder,int,int,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int updateOrRestartSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,int,int,boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void lockNow(int,boolean)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: android.telecom.PhoneAccountHandle getSimCallManager()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int checkSignatures(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void stopRtt(java.lang.String)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller",
    "implCls": "android.content.pm.IPackageInstaller",
    "inf": "android.content.pm.IPackageInstaller",
    "mtd": "<android.content.pm.IPackageInstaller: int createSession(android.content.pm.PackageInstaller$SessionParams,java.lang.String,int)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean showSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.app.SearchManager",
    "implCls": "com.android.server.search.SearchManagerService",
    "inf": "android.app.ISearchManager",
    "mtd": "<android.app.ISearchManager: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothSap",
    "implCls": "android.bluetooth.IBluetoothSap",
    "inf": "android.bluetooth.IBluetoothSap",
    "mtd": "<android.bluetooth.IBluetoothSap: boolean setPriority(android.bluetooth.BluetoothDevice,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.os.RecoverySystem",
    "implCls": "com.android.server.RecoverySystemService$BinderService",
    "inf": "android.os.IRecoverySystem",
    "mtd": "<android.os.IRecoverySystem: void rebootRecoveryWithCommand(java.lang.String)>"
  },
  {
    "helperCls": "android.service.quicksettings.TileService",
    "implCls": "android.service.quicksettings.IQSService",
    "inf": "android.service.quicksettings.IQSService",
    "mtd": "<android.service.quicksettings.IQSService: void onStartActivity(android.os.IBinder)>"
  },
  {
    "helperCls": "android.media.session.MediaSession",
    "implCls": "android.media.session.ISession",
    "inf": "android.media.session.ISession",
    "mtd": "<android.media.session.ISession: void setPlaybackState(android.media.session.PlaybackState)>"
  },
  {
    "helperCls": "android.hardware.usb.UsbManager",
    "implCls": "com.android.server.usb.UsbService",
    "inf": "android.hardware.usb.IUsbManager",
    "mtd": "<android.hardware.usb.IUsbManager: boolean hasAccessoryPermission(android.hardware.usb.UsbAccessory)>"
  },
  {
    "helperCls": "android.provider.Settings$Secure",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.hardware.camera2.impl.ICameraDeviceUserWrapper",
    "implCls": "android.hardware.camera2.ICameraDeviceUser",
    "inf": "android.hardware.camera2.ICameraDeviceUser",
    "mtd": "<android.hardware.camera2.ICameraDeviceUser: void updateOutputConfiguration(int,android.hardware.camera2.params.OutputConfiguration)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: void setRemoteVolumeController(android.media.IRemoteVolumeController)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void finishInput()>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothPan",
    "implCls": "android.bluetooth.IBluetoothPan",
    "inf": "android.bluetooth.IBluetoothPan",
    "mtd": "<android.bluetooth.IBluetoothPan: java.util.List getConnectedDevices()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)>"
  },
  {
    "helperCls": "android.app.KeyguardManager",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: void showStrictModeViolation(boolean)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean isPermissionRevokedByPolicy(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void finishOperation(android.os.IBinder,int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.app.UiAutomation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: void executeShellCommand(java.lang.String,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor)>"
  },
  {
    "helperCls": "android.telephony.ims.feature.MmTelFeature",
    "implCls": "android.telephony.ims.aidl.IImsMmTelListener",
    "inf": "android.telephony.ims.aidl.IImsMmTelListener",
    "mtd": "<android.telephony.ims.aidl.IImsMmTelListener: void onVoiceMessageCountUpdate(int)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int lock(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isNotificationListenerServicePermitted(java.lang.String,int)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: android.security.keymaster.ExportResult exportKey(java.lang.String,int,android.security.keymaster.KeymasterBlob,android.security.keymaster.KeymasterBlob,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])>"
  },
  {
    "helperCls": "android.os.RecoverySystem",
    "implCls": "com.android.server.RecoverySystemService$BinderService",
    "inf": "android.os.IRecoverySystem",
    "mtd": "<android.os.IRecoverySystem: boolean setupBcb(java.lang.String)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: void addOnAppsChangedListener(java.lang.String,android.content.pm.IOnAppsChangedListener)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int updateOrRestartSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,int,int,boolean)>"
  },
  {
    "helperCls": "android.net.ip.IpClient",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean getApplicationHiddenSettingAsUser(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.Session",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.util.MergedConfiguration,android.view.Surface)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.hardware.location.GeofenceHardware",
    "implCls": "android.hardware.location.IGeofenceHardware",
    "inf": "android.hardware.location.IGeofenceHardware",
    "mtd": "<android.hardware.location.IGeofenceHardware: int getStatusOfMonitoringType(int)>"
  },
  {
    "helperCls": "android.app.AlarmManager",
    "implCls": "android.app.IAlarmManager",
    "inf": "android.app.IAlarmManager",
    "mtd": "<android.app.IAlarmManager: boolean setTime(long)>"
  },
  {
    "helperCls": "android.app.KeyguardManager",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: boolean isKeyguardLocked()>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void remove(android.view.IWindow)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothPbapClient",
    "implCls": "android.bluetooth.IBluetoothPbapClient",
    "inf": "android.bluetooth.IBluetoothPbapClient",
    "mtd": "<android.bluetooth.IBluetoothPbapClient: java.util.List getConnectedDevices()>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int noteProxyOperation(int,java.lang.String,int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int noteOperation(int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.textservice.TextServicesManager",
    "implCls": "com.android.server.TextServicesManagerService",
    "inf": "com.android.internal.textservice.ITextServicesManager",
    "mtd": "<com.android.internal.textservice.ITextServicesManager: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: int getState()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.lang.String getCertInstallerPackage(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: boolean sendNiResponse(int,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.KeySet getKeySetByAlias(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean startDiscovery()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getSystemAvailableFeatures()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void finishInput()>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: void notifyAccessibilityButtonVisibilityChanged(boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean cancelDiscovery()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: android.os.IBinder getToken(android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: void createNotificationChannels(java.lang.String,android.content.pm.ParceledListSlice)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller$Session",
    "implCls": "android.content.pm.IPackageInstallerSession",
    "inf": "android.content.pm.IPackageInstallerSession",
    "mtd": "<android.content.pm.IPackageInstallerSession: android.os.ParcelFileDescriptor openRead(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isEnabled()>"
  },
  {
    "helperCls": "android.app.VrManager",
    "implCls": "android.service.vr.IVrManager",
    "inf": "android.service.vr.IVrManager",
    "mtd": "<android.service.vr.IVrManager: void unregisterPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>"
  },
  {
    "helperCls": "android.app.AlarmManager",
    "implCls": "android.app.IAlarmManager",
    "inf": "android.app.IAlarmManager",
    "mtd": "<android.app.IAlarmManager: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: void placeCall(android.net.Uri,android.os.Bundle,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void readUsingCharacteristicUuid(int,java.lang.String,android.os.ParcelUuid,int,int,int)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void deauthenticateNetwork(long,boolean)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.hardware.Camera",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void stopWatchingMode(com.android.internal.app.IAppOpsCallback)>"
  },
  {
    "helperCls": "android.security.keystore.recovery.RecoveryController",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: java.util.Map getRecoveryStatus()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.le.PeriodicAdvertisingManager",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.os.ServiceManager",
    "implCls": "android.os.IServiceManager",
    "inf": "android.os.IServiceManager",
    "mtd": "<android.os.IServiceManager: void addService(java.lang.String,android.os.IBinder,boolean,int)>"
  },
  {
    "helperCls": "android.net.sip.SipSession",
    "implCls": "android.net.sip.ISipSession",
    "inf": "android.net.sip.ISipSession",
    "mtd": "<android.net.sip.ISipSession: void setListener(android.net.sip.ISipSessionListener)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: android.content.Intent createManageBlockedNumbersIntent()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void finishInput()>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: void removeAccessibilityInteractionConnection(android.view.IWindow)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionService",
    "implCls": "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "inf": "com.android.internal.app.IVoiceInteractionManagerService",
    "mtd": "<com.android.internal.app.IVoiceInteractionManagerService: int stopRecognition(android.service.voice.IVoiceInteractionService,int,android.hardware.soundtrigger.IRecognitionStatusCallback)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void playSoundEffect(int)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: boolean removeNetwork(int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.usage.StorageStatsManager",
    "implCls": "com.android.server.usage.StorageStatsService",
    "inf": "android.app.usage.IStorageStatsManager",
    "mtd": "<android.app.usage.IStorageStatsManager: long getTotalBytes(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void connectionParameterUpdate(int,java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAvrcpController",
    "implCls": "android.bluetooth.IBluetoothAvrcpController",
    "inf": "android.bluetooth.IBluetoothAvrcpController",
    "mtd": "<android.bluetooth.IBluetoothAvrcpController: void sendGroupNavigationCmd(android.bluetooth.BluetoothDevice,int,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getInstantApps(int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.app.backup.RestoreSession",
    "implCls": "android.app.backup.IRestoreSession",
    "inf": "android.app.backup.IRestoreSession",
    "mtd": "<android.app.backup.IRestoreSession: int restoreAll(long,android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkInfo getNetworkInfoForUid(android.net.Network,int,boolean)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.usage.StorageStatsManager",
    "implCls": "com.android.server.usage.StorageStatsService",
    "inf": "android.app.usage.IStorageStatsManager",
    "mtd": "<android.app.usage.IStorageStatsManager: android.app.usage.ExternalStorageStats queryExternalStatsForUser(java.lang.String,int,java.lang.String)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: android.net.NetworkStats getDataLayerSnapshotForUid(int)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void setTemporaryAutoBrightnessAdjustment(float)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidHost",
    "implCls": "android.bluetooth.IBluetoothHidHost",
    "inf": "android.bluetooth.IBluetoothHidHost",
    "mtd": "<android.bluetooth.IBluetoothHidHost: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothSap",
    "implCls": "android.bluetooth.IBluetoothSap",
    "inf": "android.bluetooth.IBluetoothSap",
    "mtd": "<android.bluetooth.IBluetoothSap: int getState()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean,int)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>"
  },
  {
    "helperCls": "android.media.session.MediaSession",
    "implCls": "android.media.session.ISession",
    "inf": "android.media.session.ISession",
    "mtd": "<android.media.session.ISession: void setQueue(android.content.pm.ParceledListSlice)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean isPackageSignedByKeySetExactly(java.lang.String,android.content.pm.KeySet)>"
  },
  {
    "helperCls": "android.service.persistentdata.PersistentDataBlockManager",
    "implCls": "android.service.persistentdata.IPersistentDataBlockService",
    "inf": "android.service.persistentdata.IPersistentDataBlockService",
    "mtd": "<android.service.persistentdata.IPersistentDataBlockService: boolean getOemUnlockEnabled()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void finishSession(int,int)>"
  },
  {
    "helperCls": "android.nfc.Tag",
    "implCls": "android.nfc.INfcTag",
    "inf": "android.nfc.INfcTag",
    "mtd": "<android.nfc.INfcTag: android.nfc.Tag rediscover(int)>"
  },
  {
    "helperCls": "android.os.RecoverySystem",
    "implCls": "com.android.server.RecoverySystemService$BinderService",
    "inf": "android.os.IRecoverySystem",
    "mtd": "<android.os.IRecoverySystem: boolean setupBcb(java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setProfileName(android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int isEmpty(int)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int onUserAdded(int,int)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: java.util.List getPhoneAccountsSupportingScheme(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void registerCallback(android.hardware.display.IDisplayManagerCallback)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: java.lang.String getInstantAppAndroidId(java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void adjustStreamVolume(int,int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: boolean isServiceEnabled(int,java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: java.util.List getEnrolledFingerprints(int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setCertInstallerPackage(android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InputChannel)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: java.lang.String[] getNamesForUids(int[])>"
  },
  {
    "helperCls": "android.net.ip.InterfaceController",
    "implCls": "android.net.INetd",
    "inf": "android.net.INetd",
    "mtd": "<android.net.INetd: void interfaceDelAddress(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.os.Bundle getUserRestrictions(int)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Session",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void relayoutOverlayView(android.os.IBinder,android.graphics.Rect,int)>"
  },
  {
    "helperCls": "android.hardware.location.GeofenceHardware",
    "implCls": "android.hardware.location.IGeofenceHardware",
    "inf": "android.hardware.location.IGeofenceHardware",
    "mtd": "<android.hardware.location.IGeofenceHardware: boolean resumeGeofence(int,int,int)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setBluetoothScoOn(boolean)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: void setCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean hasRestrictedProfiles()>"
  },
  {
    "helperCls": "android.media.audiopolicy.AudioPolicy",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isCameraSoundForced()>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: void setInterruptionFilter(java.lang.String,int)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsUtListener",
    "implCls": "com.android.ims.internal.IImsUtListener",
    "inf": "com.android.ims.internal.IImsUtListener",
    "mtd": "<com.android.ims.internal.IImsUtListener: void onSupplementaryServiceIndication(android.telephony.ims.ImsSsData)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>"
  },
  {
    "helperCls": "android.net.wifi.p2p.WifiP2pManager",
    "implCls": "com.android.server.wifi.p2p.WifiP2pServiceImpl",
    "inf": "android.net.wifi.p2p.IWifiP2pManager",
    "mtd": "<android.net.wifi.p2p.IWifiP2pManager: android.os.Messenger getP2pStateMachineMessenger()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: android.content.pm.ParceledListSlice getConfiguredNetworks()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.app.admin.SystemUpdatePolicy getSystemUpdatePolicy()>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: java.lang.String getMobileProvisioningUrl()>"
  },
  {
    "helperCls": "android.view.textclassifier.SystemTextClassifier",
    "implCls": "com.android.server.textclassifier.TextClassificationManagerService",
    "inf": "android.service.textclassifier.ITextClassifierService",
    "mtd": "<android.service.textclassifier.ITextClassifierService: void onSuggestSelection(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextSelection$Request,android.service.textclassifier.ITextSelectionCallback)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int noteProxyOperation(int,java.lang.String,int,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void clientConnect(int,java.lang.String,boolean,int,boolean,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: boolean setActiveDevice(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.net.NetworkPolicyManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: boolean getRestrictBackground()>"
  },
  {
    "helperCls": "android.view.textclassifier.SystemTextClassifier",
    "implCls": "com.android.server.textclassifier.TextClassificationManagerService",
    "inf": "android.service.textclassifier.ITextClassifierService",
    "mtd": "<android.service.textclassifier.ITextClassifierService: void onDestroyTextClassificationSession(android.view.textclassifier.TextClassificationSessionId)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Hardware",
    "implCls": "android.media.tv.ITvInputHardware",
    "inf": "android.media.tv.ITvInputHardware",
    "mtd": "<android.media.tv.ITvInputHardware: void overrideAudioSink(int,java.lang.String,int,int,int)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int generate(java.lang.String,int,int,int,int,android.security.KeystoreArguments)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: int getAudioState(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: boolean isPlaybackActive(android.media.IMediaRouterClient)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "inf": "com.android.internal.app.IVoiceInteractionManagerService",
    "mtd": "<com.android.internal.app.IVoiceInteractionManagerService: int startAssistantActivity(android.os.IBinder,android.content.Intent,java.lang.String)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void allocateBytes(java.lang.String,long,int,java.lang.String)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>"
  },
  {
    "helperCls": "android.telecom.VideoCallImpl",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void requestCameraCapabilities()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputContext",
    "inf": "com.android.internal.view.IInputContext",
    "mtd": "<com.android.internal.view.IInputContext: void finishComposingText()>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: int getRestoreDefaultNetworkDelay(int)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: java.lang.String getPassword(android.accounts.Account)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean isPackageSuspendedForUser(java.lang.String,int)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int getSupportedFeatures()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setPasswordMinimumLetters(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean isUserUnlocked(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean updateOverrideApn(android.content.ComponentName,int,android.telephony.data.ApnSetting)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: long getAllocatableBytes(java.lang.String,int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void notifyPendingSystemUpdate(android.app.admin.SystemUpdateInfo)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean isUserUnlocked(int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: float getCurrentAnimatorScale()>"
  },
  {
    "helperCls": "android.service.trust.TrustAgentService",
    "implCls": "android.service.trust.ITrustAgentServiceCallback",
    "inf": "android.service.trust.ITrustAgentServiceCallback",
    "mtd": "<android.service.trust.ITrustAgentServiceCallback: void isEscrowTokenActive(long,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void verifyIntentFilter(int,int,java.util.List)>"
  },
  {
    "helperCls": "android.content.pm.PackageManager$LegacyPackageDeleteObserver",
    "implCls": "android.content.pm.IPackageDeleteObserver",
    "inf": "android.content.pm.IPackageDeleteObserver",
    "mtd": "<android.content.pm.IPackageDeleteObserver: void packageDeleted(java.lang.String,int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: boolean createSession2(android.os.Bundle)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentReceivers(android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.os.UserHandle createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: boolean isWallpaperSupported(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMap",
    "implCls": "android.bluetooth.IBluetoothMap",
    "inf": "android.bluetooth.IBluetoothMap",
    "mtd": "<android.bluetooth.IBluetoothMap: int getState()>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>"
  },
  {
    "helperCls": "android.app.UiAutomation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: void connect(android.accessibilityservice.IAccessibilityServiceClient,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void clientReadPhy(int,java.lang.String)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller",
    "implCls": "android.content.pm.IPackageInstaller",
    "inf": "android.content.pm.IPackageInstaller",
    "mtd": "<android.content.pm.IPackageInstaller: void uninstall(android.content.pm.VersionedPackage,java.lang.String,int,android.content.IntentSender,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void registerNetworkActivityListener(android.os.INetworkActivityListener)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: boolean sendMediaButton(java.lang.String,android.media.session.ISessionControllerCallback,boolean,android.view.KeyEvent)>"
  },
  {
    "helperCls": "android.print.PrinterDiscoverySession",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: void validatePrinters(java.util.List,int)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: android.security.keymaster.OperationResult begin(android.os.IBinder,java.lang.String,int,boolean,android.security.keymaster.KeymasterArguments,byte[],int)>"
  },
  {
    "helperCls": "android.app.usage.StorageStatsManager",
    "implCls": "com.android.server.usage.StorageStatsService",
    "inf": "android.app.usage.IStorageStatsManager",
    "mtd": "<android.app.usage.IStorageStatsManager: android.app.usage.StorageStats queryStatsForUser(java.lang.String,int,java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>"
  },
  {
    "helperCls": "android.app.StatsManager",
    "implCls": "android.os.IStatsManager",
    "inf": "android.os.IStatsManager",
    "mtd": "<android.os.IStatsManager: byte[] getMetadata(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothSap",
    "implCls": "android.bluetooth.IBluetoothSap",
    "inf": "android.bluetooth.IBluetoothSap",
    "mtd": "<android.bluetooth.IBluetoothSap: java.util.List getDevicesMatchingConnectionStates(int[])>"
  },
  {
    "helperCls": "android.app.VrManager",
    "implCls": "android.service.vr.IVrManager",
    "inf": "android.service.vr.IVrManager",
    "mtd": "<android.service.vr.IVrManager: void registerPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: android.telecom.PhoneAccountHandle getUserSelectedOutgoingPhoneAccount()>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.Session",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InputChannel)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: void setApplicationRestrictions(java.lang.String,android.os.Bundle,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.view.WindowId",
    "implCls": "android.view.IWindowId",
    "inf": "android.view.IWindowId",
    "mtd": "<android.view.IWindowId: void registerFocusObserver(android.view.IWindowFocusObserver)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: com.android.internal.os.AppFuseMount mountProxyFileDescriptorBridge()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setAffiliationIds(android.content.ComponentName,java.util.List)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: void setPointerIconType(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothManager",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void unregisterRecordingCallback(android.media.IRecordingConfigDispatcher)>"
  },
  {
    "helperCls": "android.view.accessibility.CaptioningManager",
    "implCls": "com.android.server.content.ContentService",
    "inf": "android.content.IContentService",
    "mtd": "<android.content.IContentService: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Session",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void timeShiftPause(android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.app.usage.StorageStatsManager",
    "implCls": "com.android.server.usage.StorageStatsService",
    "inf": "android.app.usage.IStorageStatsManager",
    "mtd": "<android.app.usage.IStorageStatsManager: long getFreeBytes(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int checkOperation(int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.Session",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.app.backup.RestoreSession",
    "implCls": "android.app.backup.IRestoreSession",
    "inf": "android.app.backup.IRestoreSession",
    "mtd": "<android.app.backup.IRestoreSession: int getAvailableRestoreSets(android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: int getPasswordType()>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void pauseWifiDisplay()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void removeTestProvider(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHearingAid",
    "implCls": "android.bluetooth.IBluetoothHearingAid",
    "inf": "android.bluetooth.IBluetoothHearingAid",
    "mtd": "<android.bluetooth.IBluetoothHearingAid: int getVolume()>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: java.util.List getBlockedRatings(int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void flushPackageRestrictionsAsUser(int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: java.lang.String[] getAvailableFieldClassificationAlgorithms()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: int getAllPhoneAccountsCount()>"
  },
  {
    "helperCls": "android.app.usage.UsageStatsManager",
    "implCls": "com.android.server.usage.UsageStatsService$BinderService",
    "inf": "android.app.usage.IUsageStatsManager",
    "mtd": "<android.app.usage.IUsageStatsManager: android.content.pm.ParceledListSlice queryUsageStats(int,long,long,java.lang.String)>"
  },
  {
    "helperCls": "android.accounts.AccountAuthenticatorResponse",
    "implCls": "android.accounts.IAccountAuthenticatorResponse",
    "inf": "android.accounts.IAccountAuthenticatorResponse",
    "mtd": "<android.accounts.IAccountAuthenticatorResponse: void onError(int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int addClient(android.view.autofill.IAutoFillManagerClient,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.util.List getPermittedInputMethodsForCurrentUser()>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void startWifiDisplayScan()>"
  },
  {
    "helperCls": "android.os.PowerManager",
    "implCls": "com.android.server.power.PowerManagerService$BinderService",
    "inf": "android.os.IPowerManager",
    "mtd": "<android.os.IPowerManager: void setDozeAfterScreenOff(boolean)>"
  },
  {
    "helperCls": "android.bluetooth.le.AdvertisingSet",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void enableAdvertisingSet(int,boolean,int,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean outOfMemory(android.view.IWindow)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void resetAllModes(int,java.lang.String)>"
  },
  {
    "helperCls": "android.os.RecoverySystem",
    "implCls": "com.android.server.RecoverySystemService$BinderService",
    "inf": "android.os.IRecoverySystem",
    "mtd": "<android.os.IRecoverySystem: void rebootRecoveryWithCommand(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: android.bluetooth.BluetoothHeadsetClientCall dial(android.bluetooth.BluetoothDevice,java.lang.String)>"
  },
  {
    "helperCls": "android.net.NetworkScoreManager",
    "implCls": "com.android.server.NetworkScoreService",
    "inf": "android.net.INetworkScoreService",
    "mtd": "<android.net.INetworkScoreService: java.lang.String getActiveScorerPackage()>"
  },
  {
    "helperCls": "android.se.omapi.Session",
    "implCls": "android.se.omapi.ISecureElementSession",
    "inf": "android.se.omapi.ISecureElementSession",
    "mtd": "<android.se.omapi.ISecureElementSession: void closeChannels()>"
  },
  {
    "helperCls": "android.provider.Settings$Secure",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: java.lang.String getCallId()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>"
  },
  {
    "helperCls": "android.app.usage.UsageStatsManager",
    "implCls": "com.android.server.usage.UsageStatsService$BinderService",
    "inf": "android.app.usage.IUsageStatsManager",
    "mtd": "<android.app.usage.IUsageStatsManager: android.content.pm.ParceledListSlice queryUsageStats(int,long,long,java.lang.String)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void wallpaperOffsetsComplete(android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.view.textservice.SpellCheckerSession",
    "implCls": "com.android.server.TextServicesManagerService",
    "inf": "com.android.internal.textservice.ITextServicesManager",
    "mtd": "<com.android.internal.textservice.ITextServicesManager: void finishSpellCheckerService(com.android.internal.textservice.ISpellCheckerSessionListener)>"
  },
  {
    "helperCls": "android.media.soundtrigger.SoundTriggerManager",
    "implCls": "com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub",
    "inf": "com.android.internal.app.ISoundTriggerService",
    "mtd": "<com.android.internal.app.ISoundTriggerService: boolean isRecognitionActive(android.os.ParcelUuid)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHealth",
    "implCls": "android.bluetooth.IBluetoothHealth",
    "inf": "android.bluetooth.IBluetoothHealth",
    "mtd": "<android.bluetooth.IBluetoothHealth: java.util.List getConnectedHealthDevices()>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isEnabled()>"
  },
  {
    "helperCls": "android.telecom.VideoCallImpl",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void setCamera(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.usage.UsageStatsManager",
    "implCls": "com.android.server.usage.UsageStatsService$BinderService",
    "inf": "android.app.usage.IUsageStatsManager",
    "mtd": "<android.app.usage.IUsageStatsManager: int getAppStandbyBucket(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int importWrappedKey(java.lang.String,byte[],java.lang.String,byte[],android.security.keymaster.KeymasterArguments,long,long,android.security.keymaster.KeyCharacteristics)>"
  },
  {
    "helperCls": "android.hardware.camera2.impl.ICameraDeviceUserWrapper",
    "implCls": "android.hardware.camera2.ICameraDeviceUser",
    "inf": "android.hardware.camera2.ICameraDeviceUser",
    "mtd": "<android.hardware.camera2.ICameraDeviceUser: void disconnect()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.database.BulkCursorToCursorAdaptor",
    "implCls": "android.database.IBulkCursor",
    "inf": "android.database.IBulkCursor",
    "mtd": "<android.database.IBulkCursor: void deactivate()>"
  },
  {
    "helperCls": "android.database.BulkCursorToCursorAdaptor",
    "implCls": "android.database.IBulkCursor",
    "inf": "android.database.IBulkCursor",
    "mtd": "<android.database.IBulkCursor: void deactivate()>"
  },
  {
    "helperCls": "android.hardware.camera2.impl.ICameraDeviceUserWrapper",
    "implCls": "android.hardware.camera2.ICameraDeviceUser",
    "inf": "android.hardware.camera2.ICameraDeviceUser",
    "mtd": "<android.hardware.camera2.ICameraDeviceUser: android.hardware.camera2.utils.SubmitInfo submitRequestList(android.hardware.camera2.CaptureRequest[],boolean)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: float getCurrentAnimatorScale()>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void finishOperation(android.os.IBinder,int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)>"
  },
  {
    "helperCls": "android.app.AlarmManager",
    "implCls": "android.app.IAlarmManager",
    "inf": "android.app.IAlarmManager",
    "mtd": "<android.app.IAlarmManager: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: int getUserHandle(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.net.wifi.aware.WifiAwareManager",
    "implCls": "com.android.server.wifi.aware.WifiAwareServiceImpl",
    "inf": "android.net.wifi.aware.IWifiAwareManager",
    "mtd": "<android.net.wifi.aware.IWifiAwareManager: boolean isUsageEnabled()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: boolean isWallpaperSupported(java.lang.String)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.hardware.usb.UsbManager",
    "implCls": "com.android.server.usb.UsbService",
    "inf": "android.hardware.usb.IUsbManager",
    "mtd": "<android.hardware.usb.IUsbManager: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>"
  },
  {
    "helperCls": "android.telephony.SubscriptionManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: android.telephony.SubscriptionPlan[] getSubscriptionPlans(int,java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void renameWifiDisplay(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void registerCallback(android.hardware.display.IDisplayManagerCallback)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: int getZenMode()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void putExtras(java.lang.String,android.os.Bundle)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int cancelConfirmationPrompt(android.os.IBinder)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration,int,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean setDiscoverableTimeout(int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void setApplicationCategoryHint(java.lang.String,int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.util.MergedConfiguration,android.view.Surface)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: java.lang.String getPackageName()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothSap",
    "implCls": "android.bluetooth.IBluetoothSap",
    "inf": "android.bluetooth.IBluetoothSap",
    "mtd": "<android.bluetooth.IBluetoothSap: boolean disconnect(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void setAppCallback(android.nfc.IAppCallback)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: void performAccessibilityShortcut()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.content.ComponentName getDeviceOwnerComponent(boolean)>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void finishSelf(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.se.omapi.SEService",
    "implCls": "android.se.omapi.ISecureElementService",
    "inf": "android.se.omapi.ISecureElementService",
    "mtd": "<android.se.omapi.ISecureElementService: java.lang.String[] getReaders()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: com.android.internal.os.AppFuseMount mountProxyFileDescriptorBridge()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int installExistingPackageAsUser(java.lang.String,int,int,int)>"
  },
  {
    "helperCls": "android.os.ServiceManager",
    "implCls": "android.os.IServiceManager",
    "inf": "android.os.IServiceManager",
    "mtd": "<android.os.IServiceManager: android.os.IBinder checkService(java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getSharedLibraries(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.net.NetworkPolicyManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: void unregisterListener(android.net.INetworkPolicyListener)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.service.oemlock.OemLockManager",
    "implCls": "android.service.oemlock.IOemLockService",
    "inf": "android.service.oemlock.IOemLockService",
    "mtd": "<android.service.oemlock.IOemLockService: boolean isDeviceOemUnlocked()>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void removeListener(android.net.lowpan.ILowpanInterfaceListener)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: void setAirplaneMode(boolean)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int getPackageUid(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.content.Intent createAdminSupportIntent(java.lang.String)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int onUserAdded(int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.media.soundtrigger.SoundTriggerManager",
    "implCls": "com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub",
    "inf": "com.android.internal.app.ISoundTriggerService",
    "mtd": "<com.android.internal.app.ISoundTriggerService: int startRecognitionForService(android.os.ParcelUuid,android.os.Bundle,android.content.ComponentName,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHearingAid",
    "implCls": "android.bluetooth.IBluetoothHearingAid",
    "inf": "android.bluetooth.IBluetoothHearingAid",
    "mtd": "<android.bluetooth.IBluetoothHearingAid: boolean setActiveDevice(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: boolean isTrusted(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: boolean connectAudio(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean isSafeMode()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Session",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void setSurface(android.os.IBinder,android.view.Surface,int)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.StatsManager",
    "implCls": "android.os.IStatsManager",
    "inf": "android.os.IStatsManager",
    "mtd": "<android.os.IStatsManager: void removeDataFetchOperation(long,java.lang.String)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: java.lang.String getPackageName()>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: java.lang.String getPackageName()>"
  },
  {
    "helperCls": "android.os.RecoverySystem",
    "implCls": "com.android.server.RecoverySystemService$BinderService",
    "inf": "android.os.IRecoverySystem",
    "mtd": "<android.os.IRecoverySystem: void rebootRecoveryWithCommand(java.lang.String)>"
  },
  {
    "helperCls": "android.net.EthernetManager",
    "implCls": "com.android.server.ethernet.EthernetServiceImpl",
    "inf": "android.net.IEthernetManager",
    "mtd": "<android.net.IEthernetManager: java.lang.String[] getAvailableInterfaces()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidDevice",
    "implCls": "android.bluetooth.IBluetoothHidDevice",
    "inf": "android.bluetooth.IBluetoothHidDevice",
    "mtd": "<android.bluetooth.IBluetoothHidDevice: boolean unregisterApp()>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetHost",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: int[] getAppWidgetIdsForHost(java.lang.String,int)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.content.pm.UserInfo getUserInfo(int)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller",
    "implCls": "android.content.pm.IPackageInstaller",
    "inf": "android.content.pm.IPackageInstaller",
    "mtd": "<android.content.pm.IPackageInstaller: void setPermissionsResult(int,boolean)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void hide()>"
  },
  {
    "helperCls": "android.net.NetworkPolicyManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: java.lang.String getCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.view.textservice.TextServicesManager",
    "implCls": "com.android.server.TextServicesManagerService",
    "inf": "com.android.internal.textservice.ITextServicesManager",
    "mtd": "<com.android.internal.textservice.ITextServicesManager: boolean isSpellCheckerEnabled()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dp",
    "implCls": "android.bluetooth.IBluetoothA2dp",
    "inf": "android.bluetooth.IBluetoothA2dp",
    "mtd": "<android.bluetooth.IBluetoothA2dp: void setAvrcpAbsoluteVolume(int)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: java.lang.String getPrimaryStorageUuid()>"
  },
  {
    "helperCls": "android.bluetooth.le.AdvertisingSet",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void setAdvertisingData(int,android.bluetooth.le.AdvertiseData)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int addClient(android.view.autofill.IAutoFillManagerClient,int)>"
  },
  {
    "helperCls": "android.media.browse.MediaBrowser",
    "implCls": "android.service.media.IMediaBrowserService",
    "inf": "android.service.media.IMediaBrowserService",
    "mtd": "<android.service.media.IMediaBrowserService: void removeSubscription(java.lang.String,android.os.IBinder,android.service.media.IMediaBrowserServiceCallbacks)>"
  },
  {
    "helperCls": "android.media.browse.MediaBrowser",
    "implCls": "android.service.media.IMediaBrowserService",
    "inf": "android.service.media.IMediaBrowserService",
    "mtd": "<android.service.media.IMediaBrowserService: void removeSubscription(java.lang.String,android.os.IBinder,android.service.media.IMediaBrowserServiceCallbacks)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: boolean isServiceSupported(int)>"
  },
  {
    "helperCls": "android.service.persistentdata.PersistentDataBlockManager",
    "implCls": "android.service.persistentdata.IPersistentDataBlockService",
    "inf": "android.service.persistentdata.IPersistentDataBlockService",
    "mtd": "<android.service.persistentdata.IPersistentDataBlockService: int write(byte[])>"
  },
  {
    "helperCls": "android.os.RecoverySystem",
    "implCls": "com.android.server.RecoverySystemService$BinderService",
    "inf": "android.os.IRecoverySystem",
    "mtd": "<android.os.IRecoverySystem: void rebootRecoveryWithCommand(java.lang.String)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: void setAcceptUnvalidated(android.net.Network,boolean,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: boolean isParentalControlsEnabled(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setSystemSetting(android.content.ComponentName,java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void hide()>"
  },
  {
    "helperCls": "android.app.backup.BackupManager",
    "implCls": "com.android.server.backup.Trampoline",
    "inf": "android.app.backup.IBackupManager",
    "mtd": "<android.app.backup.IBackupManager: boolean isBackupEnabled()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidHost",
    "implCls": "android.bluetooth.IBluetoothHidHost",
    "inf": "android.bluetooth.IBluetoothHidHost",
    "mtd": "<android.bluetooth.IBluetoothHidHost: boolean virtualUnplug(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.telecom.VideoCallImpl",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void setDeviceOrientation(int)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: boolean handlePinMmi(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean removeKeyPair(android.content.ComponentName,java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.accounts.AccountAuthenticatorResponse",
    "implCls": "android.accounts.IAccountAuthenticatorResponse",
    "inf": "android.accounts.IAccountAuthenticatorResponse",
    "mtd": "<android.accounts.IAccountAuthenticatorResponse: void onRequestContinued()>"
  },
  {
    "helperCls": "android.hardware.Camera",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>"
  },
  {
    "helperCls": "android.app.AlarmManager",
    "implCls": "android.app.IAlarmManager",
    "inf": "android.app.IAlarmManager",
    "mtd": "<android.app.IAlarmManager: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: android.os.Messenger getWifiServiceMessenger(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: boolean bindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: void dispatchMediaKeyEvent(java.lang.String,boolean,android.view.KeyEvent,boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setSecureSetting(android.content.ComponentName,java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: void releasePendingNetworkRequest(android.app.PendingIntent)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void setAppCallback(android.nfc.IAppCallback)>"
  },
  {
    "helperCls": "android.app.usage.NetworkStatsManager",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: android.net.INetworkStatsSession openSessionForUsageStats(int,java.lang.String)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanManager",
    "implCls": "android.net.lowpan.ILowpanManager",
    "inf": "android.net.lowpan.ILowpanManager",
    "mtd": "<android.net.lowpan.ILowpanManager: android.net.lowpan.ILowpanInterface getInterface(java.lang.String)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void reportFailedPasswordAttempt(int)>"
  },
  {
    "helperCls": "android.hardware.camera2.impl.ICameraDeviceUserWrapper",
    "implCls": "android.hardware.camera2.ICameraDeviceUser",
    "inf": "android.hardware.camera2.ICameraDeviceUser",
    "mtd": "<android.hardware.camera2.ICameraDeviceUser: long cancelRequest(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.content.ComponentName getDeviceOwnerComponent(boolean)>"
  },
  {
    "helperCls": "android.print.PrinterDiscoverySession",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: void stopPrinterDiscovery(android.print.IPrinterDiscoveryObserver,int)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void onRectangleOnScreenRequested(android.os.IBinder,android.graphics.Rect)>"
  },
  {
    "helperCls": "android.se.omapi.Channel",
    "implCls": "android.se.omapi.ISecureElementChannel",
    "inf": "android.se.omapi.ISecureElementChannel",
    "mtd": "<android.se.omapi.ISecureElementChannel: byte[] transmit(byte[])>"
  },
  {
    "helperCls": "android.app.backup.BackupManager",
    "implCls": "com.android.server.backup.Trampoline",
    "inf": "android.app.backup.IBackupManager",
    "mtd": "<android.app.backup.IBackupManager: void cancelBackups()>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: int getUserSerialNumber(int)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: android.content.ComponentName getDefaultPhoneApp()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.os.PowerManager",
    "implCls": "com.android.server.power.PowerManagerService$BinderService",
    "inf": "android.os.IPowerManager",
    "mtd": "<android.os.IPowerManager: void rebootSafeMode(boolean,boolean)>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: void addLockoutResetCallback(android.hardware.fingerprint.IFingerprintServiceLockoutResetCallback)>"
  },
  {
    "helperCls": "android.service.autofill.SaveCallback",
    "implCls": "android.service.autofill.ISaveCallback",
    "inf": "android.service.autofill.ISaveCallback",
    "mtd": "<android.service.autofill.ISaveCallback: void onFailure(java.lang.CharSequence)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: android.os.ParcelFileDescriptor getShortcutIconFd(java.lang.String,java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.hardware.Camera",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void stopWatchingMode(com.android.internal.app.IAppOpsCallback)>"
  },
  {
    "helperCls": "android.location.Geocoder",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: boolean geocoderIsPresent()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void deletePackageAsUser(java.lang.String,int,android.content.pm.IPackageDeleteObserver,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.telephony.ims.ImsService",
    "implCls": "android.telephony.ims.aidl.IImsServiceControllerListener",
    "inf": "android.telephony.ims.aidl.IImsServiceControllerListener",
    "mtd": "<android.telephony.ims.aidl.IImsServiceControllerListener: void onUpdateSupportedImsFeatures(android.telephony.ims.stub.ImsFeatureConfiguration)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: int createVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothPbapClient",
    "implCls": "android.bluetooth.IBluetoothPbapClient",
    "inf": "android.bluetooth.IBluetoothPbapClient",
    "mtd": "<android.bluetooth.IBluetoothPbapClient: boolean connect(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int addClient(android.view.autofill.IAutoFillManagerClient,int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void finishSession(int,int)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.app.UiAutomationConnection",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void revokeRuntimePermission(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.IpSecManager$SecurityParameterIndex",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: void releaseSecurityParameterIndex(int)>"
  },
  {
    "helperCls": "android.net.sip.SipSession",
    "implCls": "android.net.sip.ISipSession",
    "inf": "android.net.sip.ISipSession",
    "mtd": "<android.net.sip.ISipSession: void setListener(android.net.sip.ISipSessionListener)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.media.midi.MidiDevice",
    "implCls": "android.media.midi.IMidiDeviceServer",
    "inf": "android.media.midi.IMidiDeviceServer",
    "mtd": "<android.media.midi.IMidiDeviceServer: int connectPorts(android.os.IBinder,java.io.FileDescriptor,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.os.RemoteCallback",
    "implCls": "android.os.IRemoteCallback",
    "inf": "android.os.IRemoteCallback",
    "mtd": "<android.os.IRemoteCallback: void sendResult(android.os.Bundle)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: java.util.List getSessionTokens(boolean,boolean,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean shouldShowRequestPermissionRationale(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.usage.UsageStatsManager",
    "implCls": "com.android.server.usage.UsageStatsService$BinderService",
    "inf": "android.app.usage.IUsageStatsManager",
    "mtd": "<android.app.usage.IUsageStatsManager: android.content.pm.ParceledListSlice queryConfigurationStats(int,long,long,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: java.util.List getEnabledNotificationListeners(int)>"
  },
  {
    "helperCls": "android.app.Instrumentation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: void disconnect()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean shouldOfferSwitchingToNextInputMethod(android.os.IBinder)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: float getCurrentAnimatorScale()>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InputChannel)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void startManagedQuickContact(java.lang.String,long,boolean,long,android.content.Intent)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: boolean hasBindAppWidgetPermission(java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.NetworkPolicyManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: void registerListener(android.net.INetworkPolicyListener)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void removePermission(java.lang.String)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void startTethering(java.lang.String[])>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: boolean handlePinMmiForPhoneAccount(android.telecom.PhoneAccountHandle,java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.content.RestrictionsManager",
    "implCls": "com.android.server.restrictions.RestrictionsManagerService$RestrictionsManagerImpl",
    "inf": "android.content.IRestrictionsManager",
    "mtd": "<android.content.IRestrictionsManager: android.os.Bundle getApplicationRestrictions(java.lang.String)>"
  },
  {
    "helperCls": "android.speech.RecognitionService$Callback",
    "implCls": "android.speech.IRecognitionListener",
    "inf": "android.speech.IRecognitionListener",
    "mtd": "<android.speech.IRecognitionListener: void onError(int)>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void startDozing(android.os.IBinder,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.net.NetworkScoreManager",
    "implCls": "com.android.server.NetworkScoreService",
    "inf": "android.net.INetworkScoreService",
    "mtd": "<android.net.INetworkScoreService: boolean requestScores(android.net.NetworkKey[])>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: boolean isMultiparty()>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void remove(android.view.IWindow)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean cancelBondProcess(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean updateIntentVerificationStatus(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.media.midi.MidiDevice",
    "implCls": "android.media.midi.IMidiDeviceServer",
    "inf": "android.media.midi.IMidiDeviceServer",
    "mtd": "<android.media.midi.IMidiDeviceServer: java.io.FileDescriptor openOutputPort(android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void setVolumeUserFlags(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void addListener(android.net.lowpan.ILowpanInterfaceListener)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.os.UpdateEngine",
    "implCls": "android.os.IUpdateEngine",
    "inf": "android.os.IUpdateEngine",
    "mtd": "<android.os.IUpdateEngine: boolean bind(android.os.IUpdateEngineCallback)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkInfo getNetworkInfoForUid(android.net.Network,int,boolean)>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: android.view.IWindowSession openSession(android.view.IWindowSessionCallback,com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: java.lang.String[] getPackagesForUid(int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: java.lang.String[] getPackagesForUid(int)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: android.net.NetworkStats getDataLayerSnapshotForUid(int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getAllPermissionGroups(int)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void setTestProviderEnabled(java.lang.String,boolean,java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: int createVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int,java.lang.String)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: boolean endCall(java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.CardEmulation",
    "implCls": "android.nfc.INfcCardEmulation",
    "inf": "android.nfc.INfcCardEmulation",
    "mtd": "<android.nfc.INfcCardEmulation: boolean setDefaultForNextTap(int,android.content.ComponentName)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.CardEmulation",
    "implCls": "android.nfc.INfcCardEmulation",
    "inf": "android.nfc.INfcCardEmulation",
    "mtd": "<android.nfc.INfcCardEmulation: boolean setDefaultForNextTap(int,android.content.ComponentName)>"
  },
  {
    "helperCls": "android.os.RecoverySystem",
    "implCls": "com.android.server.RecoverySystemService$BinderService",
    "inf": "android.os.IRecoverySystem",
    "mtd": "<android.os.IRecoverySystem: boolean setupBcb(java.lang.String)>"
  },
  {
    "helperCls": "android.app.AlarmManager",
    "implCls": "android.app.IAlarmManager",
    "inf": "android.app.IAlarmManager",
    "mtd": "<android.app.IAlarmManager: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: int[] getProfileIds(int,boolean)>"
  },
  {
    "helperCls": "android.content.ClipboardManager",
    "implCls": "com.android.server.clipboard.ClipboardService$ClipboardImpl",
    "inf": "android.content.IClipboard",
    "mtd": "<android.content.IClipboard: void clearPrimaryClip(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isEnabled()>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: void interrupt(int)>"
  },
  {
    "helperCls": "android.view.accessibility.CaptioningManager",
    "implCls": "com.android.server.content.ContentService",
    "inf": "android.content.IContentService",
    "mtd": "<android.content.IContentService: void unregisterContentObserver(android.database.IContentObserver)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.VolumeInfo[] getVolumes(int)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: boolean startScan(java.lang.String)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: boolean enableNdefPush()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: android.os.Messenger getWifiServiceMessenger(java.lang.String)>"
  },
  {
    "helperCls": "android.telecom.VideoCallImpl",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void requestCallDataUsage()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputContext",
    "inf": "com.android.internal.view.IInputContext",
    "mtd": "<com.android.internal.view.IInputContext: void finishComposingText()>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: int getState()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void finishInput()>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: boolean injectInputEvent(android.view.InputEvent,int)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.CardEmulation",
    "implCls": "android.nfc.INfcCardEmulation",
    "inf": "android.nfc.INfcCardEmulation",
    "mtd": "<android.nfc.INfcCardEmulation: boolean isDefaultServiceForCategory(int,android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.CardEmulation",
    "implCls": "android.nfc.INfcCardEmulation",
    "inf": "android.nfc.INfcCardEmulation",
    "mtd": "<android.nfc.INfcCardEmulation: boolean isDefaultServiceForCategory(int,android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothPan",
    "implCls": "android.bluetooth.IBluetoothPan",
    "inf": "android.bluetooth.IBluetoothPan",
    "mtd": "<android.bluetooth.IBluetoothPan: int getConnectionState(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean fetchRemoteUuids(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean setInstantAppCookie(java.lang.String,byte[],int)>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: boolean setPrintJobState(android.print.PrintJobId,int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.Session",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void remove(android.view.IWindow)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void reassociate(java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.Camera",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int checkAudioOperation(int,int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.location.GeofenceHardwareImpl",
    "implCls": "android.location.IFusedGeofenceHardware",
    "inf": "android.location.IFusedGeofenceHardware",
    "mtd": "<android.location.IFusedGeofenceHardware: void removeGeofences(int[])>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void forgetWifiDisplay(java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isCallerApplicationRestrictionsManagingPackage(java.lang.String)>"
  },
  {
    "helperCls": "android.os.HardwarePropertiesManager",
    "implCls": "com.android.server.HardwarePropertiesManagerService",
    "inf": "android.os.IHardwarePropertiesManager",
    "mtd": "<android.os.IHardwarePropertiesManager: android.os.CpuUsageInfo[] getCpuUsages(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void endReliableWrite(int,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getStorageEncryptionStatus(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,long,java.lang.String,java.util.List,android.content.ComponentName,int,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.telephony.SubscriptionManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: java.lang.String getSubscriptionPlansOwner(int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int addClient(android.view.autofill.IAutoFillManagerClient,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.IPackageInstaller getPackageInstaller()>"
  },
  {
    "helperCls": "android.app.AlarmManager",
    "implCls": "android.app.IAlarmManager",
    "inf": "android.app.IAlarmManager",
    "mtd": "<android.app.IAlarmManager: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps$PinItemRequest",
    "implCls": "android.content.pm.IPinItemRequest",
    "inf": "android.content.pm.IPinItemRequest",
    "mtd": "<android.content.pm.IPinItemRequest: boolean accept(android.os.Bundle)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.net.IpSecManager",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: android.net.IpSecSpiResponse allocateSecurityParameterIndex(java.lang.String,int,android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getShortSupportMessage(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.VolumeRecord[] getVolumeRecords(int)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int attestKey(java.lang.String,android.security.keymaster.KeymasterArguments,android.security.keymaster.KeymasterCertificateChain)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: java.lang.String[] getPackagesForUid(int)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: boolean ignore(int,int,android.nfc.ITagRemovedCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dp",
    "implCls": "android.bluetooth.IBluetoothA2dp",
    "inf": "android.bluetooth.IBluetoothA2dp",
    "mtd": "<android.bluetooth.IBluetoothA2dp: boolean connect(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int getState(int)>"
  },
  {
    "helperCls": "android.app.slice.SliceManager",
    "implCls": "com.android.server.slice.SliceManagerService",
    "inf": "android.app.slice.ISliceManager",
    "mtd": "<android.app.slice.ISliceManager: void grantSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: android.net.Uri getAdnUriForPhoneAccount(android.telecom.PhoneAccountHandle,java.lang.String)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: int tether(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.accounts.AccountManagerResponse",
    "implCls": "android.accounts.IAccountManagerResponse",
    "inf": "android.accounts.IAccountManagerResponse",
    "mtd": "<android.accounts.IAccountManagerResponse: void onError(int,java.lang.String)>"
  },
  {
    "helperCls": "android.net.wifi.aware.WifiAwareManager",
    "implCls": "com.android.server.wifi.aware.WifiAwareServiceImpl",
    "inf": "android.net.wifi.aware.IWifiAwareManager",
    "mtd": "<android.net.wifi.aware.IWifiAwareManager: void updatePublish(int,int,android.net.wifi.aware.PublishConfig)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void pauseWifiDisplay()>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: java.util.List getAllPhoneAccountHandles()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setBluetoothA2dpOn(boolean)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int getKeyCharacteristics(java.lang.String,android.security.keymaster.KeymasterBlob,android.security.keymaster.KeymasterBlob,int,android.security.keymaster.KeyCharacteristics)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: void showStrictModeViolation(boolean)>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId)>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void finishSelf(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void finishSelf(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.service.persistentdata.PersistentDataBlockManager",
    "implCls": "android.service.persistentdata.IPersistentDataBlockService",
    "inf": "android.service.persistentdata.IPersistentDataBlockService",
    "mtd": "<android.service.persistentdata.IPersistentDataBlockService: long getMaximumDataBlockSize()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void setAppCallback(android.nfc.IAppCallback)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setStartUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: android.app.WallpaperColors getWallpaperColors(int,int)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void createSession(android.media.tv.ITvInputClient,java.lang.String,boolean,int,int)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanScanner",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void startNetScan(java.util.Map,android.net.lowpan.ILowpanNetScanCallback)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: int getState()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void enableVerboseLogging(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getScanMode()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,java.lang.String,int,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int lock(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: java.util.List getCurrentCalls(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.hardware.hdmi.HdmiControlManager",
    "implCls": "com.android.server.hdmi.HdmiControlService$BinderService",
    "inf": "android.hardware.hdmi.IHdmiControlService",
    "mtd": "<android.hardware.hdmi.IHdmiControlService: void setStandbyMode(boolean)>"
  },
  {
    "helperCls": "android.print.PrintManager",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: void setPrintServiceEnabled(android.content.ComponentName,boolean,int)>"
  },
  {
    "helperCls": "android.os.DeviceIdleManager",
    "implCls": "com.android.server.DeviceIdleController$BinderService",
    "inf": "android.os.IDeviceIdleController",
    "mtd": "<android.os.IDeviceIdleController: java.lang.String[] getSystemPowerWhitelist()>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: boolean updateLockdownVpn()>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int startOperation(android.os.IBinder,int,int,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.app.slice.SliceManager",
    "implCls": "com.android.server.slice.SliceManagerService",
    "inf": "android.app.slice.ISliceManager",
    "mtd": "<android.app.slice.ISliceManager: void grantPermissionFromUser(android.net.Uri,java.lang.String,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.hardware.location.ContextHubManager",
    "implCls": "com.android.server.location.ContextHubService",
    "inf": "android.hardware.location.IContextHubService",
    "mtd": "<android.hardware.location.IContextHubService: void enableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: java.util.List getUsers(boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setBluetoothContactSharingDisabled(android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void setAutofillFailure(int,java.util.List,int)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: boolean hasNavigationBar()>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.graphics.Point getStableDisplaySize()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void restoreBackupData(byte[])>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>"
  },
  {
    "helperCls": "android.app.servertransaction.ClientTransaction",
    "implCls": "android.app.IApplicationThread",
    "inf": "android.app.IApplicationThread",
    "mtd": "<android.app.IApplicationThread: void scheduleTransaction(android.app.servertransaction.ClientTransaction)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: java.util.List getCallCapablePhoneAccounts(boolean,java.lang.String)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: boolean requestRouteToHostAddress(int,byte[])>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: int getRestoreDefaultNetworkDelay(int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void deletePackageAsUser(java.lang.String,int,android.content.pm.IPackageDeleteObserver,int,int)>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: boolean setPrintJobState(android.print.PrintJobId,int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.StatsManager",
    "implCls": "android.os.IStatsManager",
    "inf": "android.os.IStatsManager",
    "mtd": "<android.os.IStatsManager: void removeConfiguration(long,java.lang.String)>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection$VideoProvider",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void setDeviceOrientation(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothPbapClient",
    "implCls": "android.bluetooth.IBluetoothPbapClient",
    "inf": "android.bluetooth.IBluetoothPbapClient",
    "mtd": "<android.bluetooth.IBluetoothPbapClient: java.util.List getDevicesMatchingConnectionStates(int[])>"
  },
  {
    "helperCls": "android.print.PrinterDiscoverySession",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: void destroyPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.app.admin.SystemUpdateInfo getPendingSystemUpdate(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: boolean isPlaybackActive(android.media.IMediaRouterClient)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void disconnectWifiDisplay()>"
  },
  {
    "helperCls": "android.os.SystemUpdateManager",
    "implCls": "com.android.server.SystemUpdateManagerService",
    "inf": "android.os.ISystemUpdateManager",
    "mtd": "<android.os.ISystemUpdateManager: void updateSystemUpdateInfo(android.os.PersistableBundle)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.media.soundtrigger.SoundTriggerManager",
    "implCls": "com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub",
    "inf": "com.android.internal.app.ISoundTriggerService",
    "mtd": "<com.android.internal.app.ISoundTriggerService: void deleteSoundModel(android.os.ParcelUuid)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean setInstantAppCookie(java.lang.String,byte[],int)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection$VideoProvider",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void setDisplaySurface(android.view.Surface)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.SearchManager",
    "implCls": "com.android.server.search.SearchManagerService",
    "inf": "android.app.ISearchManager",
    "mtd": "<android.app.ISearchManager: java.util.List getGlobalSearchActivities()>"
  },
  {
    "helperCls": "android.app.StatusBarManager",
    "implCls": "com.android.server.statusbar.StatusBarManagerService",
    "inf": "com.android.internal.statusbar.IStatusBarService",
    "mtd": "<com.android.internal.statusbar.IStatusBarService: void removeIcon(java.lang.String)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int getWifiEnabledState()>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.util.MergedConfiguration,android.view.Surface)>"
  },
  {
    "helperCls": "android.net.sip.SipSession",
    "implCls": "android.net.sip.ISipSession",
    "inf": "android.net.sip.ISipSession",
    "mtd": "<android.net.sip.ISipSession: void makeCall(android.net.sip.SipProfile,java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: float getCurrentAnimatorScale()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: void reportNetworkConnectivity(android.net.Network,boolean)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: void reportNetworkConnectivity(android.net.Network,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getLeMaximumAdvertisingDataLength()>"
  },
  {
    "helperCls": "android.net.IpSecManager$IpSecTunnelInterface",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: android.net.IpSecTunnelInterfaceResponse createTunnelInterface(java.lang.String,java.lang.String,android.net.Network,android.os.IBinder,java.lang.String)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: boolean isIncomingCallPermitted(android.telecom.PhoneAccountHandle)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: android.view.IWindowSession openSession(android.view.IWindowSessionCallback,com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: void clearAccounts(java.lang.String)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: int getPackageImportance(java.lang.String)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getStorageEncryptionStatus(java.lang.String,int)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: boolean isInCall()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)>"
  },
  {
    "helperCls": "android.view.WindowId",
    "implCls": "android.view.IWindowId",
    "inf": "android.view.IWindowId",
    "mtd": "<android.view.IWindowId: void unregisterFocusObserver(android.view.IWindowFocusObserver)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: void registerNetworkFactory(android.os.Messenger,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller",
    "implCls": "android.content.pm.IPackageInstaller",
    "inf": "android.content.pm.IPackageInstaller",
    "mtd": "<android.content.pm.IPackageInstaller: void uninstall(android.content.pm.VersionedPackage,java.lang.String,int,android.content.IntentSender,int)>"
  },
  {
    "helperCls": "android.app.UiAutomation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: void revokeRuntimePermission(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setDeviceProvisioningConfigApplied()>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionConferenceExtendFailed(android.telephony.ims.ImsReasonInfo)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isAudioServerRunning()>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dpSink",
    "implCls": "android.bluetooth.IBluetoothA2dpSink",
    "inf": "android.bluetooth.IBluetoothA2dpSink",
    "mtd": "<android.bluetooth.IBluetoothA2dpSink: boolean disconnect(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.net.IpSecManager$IpSecTunnelInterface",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: void deleteTunnelInterface(int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getAllIntentFilters(java.lang.String)>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: void authenticate(android.os.IBinder,long,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String,android.os.Bundle,android.hardware.biometrics.IBiometricPromptReceiver)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean getAutoTimeRequired()>"
  },
  {
    "helperCls": "android.speech.RecognitionService$Callback",
    "implCls": "android.speech.IRecognitionListener",
    "inf": "android.speech.IRecognitionListener",
    "mtd": "<android.speech.IRecognitionListener: void onBeginningOfSpeech()>"
  },
  {
    "helperCls": "android.app.SearchManager",
    "implCls": "com.android.server.search.SearchManagerService",
    "inf": "android.app.ISearchManager",
    "mtd": "<android.app.ISearchManager: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: java.util.List getTvInputList(int)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>"
  },
  {
    "helperCls": "android.os.PowerManager",
    "implCls": "com.android.server.power.PowerManagerService$BinderService",
    "inf": "android.os.IPowerManager",
    "mtd": "<android.os.IPowerManager: android.os.PowerSaveState getPowerSaveState(int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.util.MergedConfiguration,android.view.Surface)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int abort(android.os.IBinder)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean outOfMemory(android.view.IWindow)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void startDtmf(char)>"
  },
  {
    "helperCls": "android.net.wifi.p2p.WifiP2pManager",
    "implCls": "com.android.server.wifi.p2p.WifiP2pServiceImpl",
    "inf": "android.net.wifi.p2p.IWifiP2pManager",
    "mtd": "<android.net.wifi.p2p.IWifiP2pManager: void checkConfigureWifiDisplayPermission()>"
  },
  {
    "helperCls": "android.hardware.usb.UsbManager",
    "implCls": "com.android.server.usb.UsbService",
    "inf": "android.hardware.usb.IUsbManager",
    "mtd": "<android.hardware.usb.IUsbManager: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getLockTaskFeatures(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.net.wifi.aware.WifiAwareManager",
    "implCls": "com.android.server.wifi.aware.WifiAwareServiceImpl",
    "inf": "android.net.wifi.aware.IWifiAwareManager",
    "mtd": "<android.net.wifi.aware.IWifiAwareManager: void terminateSession(int,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void finishInput()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.usage.NetworkStatsManager",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: android.net.INetworkStatsSession openSessionForUsageStats(int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: com.android.internal.os.AppFuseMount mountProxyFileDescriptorBridge()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setForceEphemeralUsers(android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHearingAid",
    "implCls": "android.bluetooth.IBluetoothHearingAid",
    "inf": "android.bluetooth.IBluetoothHearingAid",
    "mtd": "<android.bluetooth.IBluetoothHearingAid: boolean setPriority(android.bluetooth.BluetoothDevice,int)>"
  },
  {
    "helperCls": "android.app.StatsManager",
    "implCls": "android.os.IStatsManager",
    "inf": "android.os.IStatsManager",
    "mtd": "<android.os.IStatsManager: void removeConfiguration(long,java.lang.String)>"
  },
  {
    "helperCls": "android.os.UpdateLock",
    "implCls": "com.android.server.UpdateLockService",
    "inf": "android.os.IUpdateLock",
    "mtd": "<android.os.IUpdateLock: void acquireUpdateLock(android.os.IBinder,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void stopWatchingMode(com.android.internal.app.IAppOpsCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothSap",
    "implCls": "android.bluetooth.IBluetoothSap",
    "inf": "android.bluetooth.IBluetoothSap",
    "mtd": "<android.bluetooth.IBluetoothSap: int getPriority(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanCommissioningSession",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void addListener(android.net.lowpan.ILowpanInterfaceListener)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration,java.lang.String)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: android.media.session.ParcelableVolumeInfo getVolumeAttributes()>"
  },
  {
    "helperCls": "android.se.omapi.SEService",
    "implCls": "android.se.omapi.ISecureElementService",
    "inf": "android.se.omapi.ISecureElementService",
    "mtd": "<android.se.omapi.ISecureElementService: android.se.omapi.ISecureElementReader getReader(java.lang.String)>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: void enableShortcuts(java.lang.String,java.util.List,int)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: void cancelNotificationWithTag(java.lang.String,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.net.nsd.NsdManager",
    "implCls": "com.android.server.NsdService",
    "inf": "android.net.nsd.INsdManager",
    "mtd": "<android.net.nsd.INsdManager: android.os.Messenger getMessenger()>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int onUserPasswordChanged(int,java.lang.String)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void unmountObb(java.lang.String,boolean,android.os.storage.IObbActionListener,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMapClient",
    "implCls": "android.bluetooth.IBluetoothMapClient",
    "inf": "android.bluetooth.IBluetoothMapClient",
    "mtd": "<android.bluetooth.IBluetoothMapClient: boolean connect(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void setHasCallback(int,int,boolean)>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void reject(java.lang.String,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int updateOrRestartSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,int,int,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHearingAid",
    "implCls": "android.bluetooth.IBluetoothHearingAid",
    "inf": "android.bluetooth.IBluetoothHearingAid",
    "mtd": "<android.bluetooth.IBluetoothHearingAid: java.util.List getConnectedDevices()>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int updateOrRestartSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,int,int,boolean)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean canAddMoreManagedProfiles(int,boolean)>"
  },
  {
    "helperCls": "android.app.AlarmManager",
    "implCls": "android.app.IAlarmManager",
    "inf": "android.app.IAlarmManager",
    "mtd": "<android.app.IAlarmManager: android.app.AlarmManager$AlarmClockInfo getNextAlarmClock(int)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: android.app.NotificationChannel getNotificationChannel(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.location.ContextHubManager",
    "implCls": "com.android.server.location.ContextHubService",
    "inf": "android.hardware.location.IContextHubService",
    "mtd": "<android.hardware.location.IContextHubService: void queryNanoApps(int,android.hardware.location.IContextHubTransactionCallback)>"
  },
  {
    "helperCls": "android.net.wifi.p2p.WifiP2pManager",
    "implCls": "com.android.server.wifi.p2p.WifiP2pServiceImpl",
    "inf": "android.net.wifi.p2p.IWifiP2pManager",
    "mtd": "<android.net.wifi.p2p.IWifiP2pManager: void setMiracastMode(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: android.bluetooth.BluetoothDevice getActiveDevice()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: boolean isWallpaperSupported(java.lang.String)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isStreamAffectedByMute(int)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void addExternalRoute(android.net.IpPrefix,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void setForegroundDispatch(android.app.PendingIntent,android.content.IntentFilter[],android.nfc.TechListParcel)>"
  },
  {
    "helperCls": "android.app.backup.BackupManager",
    "implCls": "com.android.server.backup.Trampoline",
    "inf": "android.app.backup.IBackupManager",
    "mtd": "<android.app.backup.IBackupManager: void selectBackupTransportAsync(android.content.ComponentName,android.app.backup.ISelectBackupTransportCallback)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: java.util.List getTvInputList(int)>"
  },
  {
    "helperCls": "android.net.lowpan._$$Lambda$LowpanManager$2$2qKIy18LeIjTlm4mROg_pHOPNU0",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: java.lang.String getName()>"
  },
  {
    "helperCls": "android.net.lowpan._$$Lambda$LowpanManager$2$2qKIy18LeIjTlm4mROg_pHOPNU0",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: java.lang.String getName()>"
  },
  {
    "helperCls": "android.os.PowerManager",
    "implCls": "com.android.server.power.PowerManagerService$BinderService",
    "inf": "android.os.IPowerManager",
    "mtd": "<android.os.IPowerManager: boolean setPowerSaveMode(boolean)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: boolean hasKeys(int,int,int[],boolean[])>"
  },
  {
    "helperCls": "android.print.PrintManager",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: void removePrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.security.keystore.recovery.RecoveryController",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: void setServerParams(byte[])>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: android.accounts.Account[] getAccounts(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: void startCaptivePortalApp(android.net.Network)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isManagedProfile(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void unregisterClient(android.media.IMediaRouterClient)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionService",
    "implCls": "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "inf": "com.android.internal.app.IVoiceInteractionManagerService",
    "mtd": "<com.android.internal.app.IVoiceInteractionManagerService: int stopRecognition(android.service.voice.IVoiceInteractionService,int,android.hardware.soundtrigger.IRecognitionStatusCallback)>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: void authenticate(android.os.IBinder,long,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String,android.os.Bundle,android.hardware.biometrics.IBiometricPromptReceiver)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.media.Ringtone",
    "implCls": "android.media.IRingtonePlayer",
    "inf": "android.media.IRingtonePlayer",
    "mtd": "<android.media.IRingtonePlayer: java.lang.String getTitle(android.net.Uri)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: void setUserAdmin(int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsUtListener",
    "implCls": "com.android.ims.internal.IImsUtListener",
    "inf": "com.android.ims.internal.IImsUtListener",
    "mtd": "<com.android.ims.internal.IImsUtListener: void utConfigurationCallBarringQueried(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsSsInfo[])>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: java.util.List getMatchingOsuProviders(android.net.wifi.ScanResult)>"
  },
  {
    "helperCls": "android.security.keystore.recovery.RecoveryController",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: void setRecoverySecretTypes(int[])>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: void registerAccountListener(java.lang.String[],java.lang.String)>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: void setStatusRes(android.print.PrintJobId,int,java.lang.CharSequence)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void finishSession(int,int)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void enableTdls(java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: long getCacheQuotaBytes(java.lang.String,int)>"
  },
  {
    "helperCls": "android.hardware.usb.UsbManager",
    "implCls": "com.android.server.usb.UsbService",
    "inf": "android.hardware.usb.IUsbManager",
    "mtd": "<android.hardware.usb.IUsbManager: void requestAccessoryPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int updateOrRestartSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,int,int,boolean)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void finishOperation(android.os.IBinder,int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.StatusBarManager",
    "implCls": "com.android.server.statusbar.StatusBarManagerService",
    "inf": "com.android.internal.statusbar.IStatusBarService",
    "mtd": "<com.android.internal.statusbar.IStatusBarService: void expandNotificationsPanel()>"
  },
  {
    "helperCls": "android.net.IpSecManager",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: void applyTunnelModeTransform(int,int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: android.security.keymaster.OperationResult begin(android.os.IBinder,java.lang.String,int,boolean,android.security.keymaster.KeymasterArguments,byte[],int)>"
  },
  {
    "helperCls": "android.app.AlarmManager",
    "implCls": "android.app.IAlarmManager",
    "inf": "android.app.IAlarmManager",
    "mtd": "<android.app.IAlarmManager: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int getWifiApEnabledState()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.KeySet getSigningKeySet(java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.VolumeInfo[] getVolumes(int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanCommissioningSession",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void removeListener(android.net.lowpan.ILowpanInterfaceListener)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void verifyNfcPermission()>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: int[] getInputDeviceIds()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getStreamVolume(int)>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void finishSelf(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>"
  },
  {
    "helperCls": "android.app.StatsManager",
    "implCls": "android.os.IStatsManager",
    "inf": "android.os.IStatsManager",
    "mtd": "<android.os.IStatsManager: byte[] getData(long,java.lang.String)>"
  },
  {
    "helperCls": "android.net.wifi.p2p.WifiP2pManager",
    "implCls": "com.android.server.wifi.p2p.WifiP2pServiceImpl",
    "inf": "android.net.wifi.p2p.IWifiP2pManager",
    "mtd": "<android.net.wifi.p2p.IWifiP2pManager: void close(android.os.IBinder)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int getVerboseLoggingLevel()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.os.PowerManager",
    "implCls": "com.android.server.power.PowerManagerService$BinderService",
    "inf": "android.os.IPowerManager",
    "mtd": "<android.os.IPowerManager: boolean isInteractive()>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: java.util.List getTvContentRatingSystemList(int)>"
  },
  {
    "helperCls": "android.service.persistentdata.PersistentDataBlockManager",
    "implCls": "android.service.persistentdata.IPersistentDataBlockService",
    "inf": "android.service.persistentdata.IPersistentDataBlockService",
    "mtd": "<android.service.persistentdata.IPersistentDataBlockService: int getFlashLockState()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.service.trust.TrustAgentService",
    "implCls": "android.service.trust.ITrustAgentServiceCallback",
    "inf": "android.service.trust.ITrustAgentServiceCallback",
    "mtd": "<android.service.trust.ITrustAgentServiceCallback: void showKeyguardErrorMessage(java.lang.CharSequence)>"
  },
  {
    "helperCls": "android.database.BulkCursorToCursorAdaptor",
    "implCls": "android.database.IBulkCursor",
    "inf": "android.database.IBulkCursor",
    "mtd": "<android.database.IBulkCursor: android.os.Bundle getExtras()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dpSink",
    "implCls": "android.bluetooth.IBluetoothA2dpSink",
    "inf": "android.bluetooth.IBluetoothA2dpSink",
    "mtd": "<android.bluetooth.IBluetoothA2dpSink: int getPriority(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void sendTvInputNotifyIntent(android.content.Intent,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: int getUserRestrictionSource(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isUninstallBlocked(android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: android.media.MediaRouterClientState getState(android.media.IMediaRouterClient)>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection$VideoProvider",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void addVideoCallback(android.os.IBinder)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>"
  },
  {
    "helperCls": "android.net.wifi.RttManager",
    "implCls": "com.android.server.wifi.rtt.RttServiceImpl",
    "inf": "android.net.wifi.rtt.IWifiRttManager",
    "mtd": "<android.net.wifi.rtt.IWifiRttManager: boolean isAvailable()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.util.List getSecondaryUsers(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: boolean accountAuthenticated(android.accounts.Account)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: void setCallback(android.media.session.ICallback)>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: void setCallback(android.media.session.ICallback)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void resumeWifiDisplay()>"
  },
  {
    "helperCls": "android.net.sip.SipManager",
    "implCls": "com.android.server.sip.SipService",
    "inf": "android.net.sip.ISipService",
    "mtd": "<android.net.sip.ISipService: android.net.sip.SipProfile[] getListOfProfiles(java.lang.String)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: boolean removePasspointConfiguration(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: long getPasswordExpirationTimeout(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getDeviceOwnerUserId()>"
  },
  {
    "helperCls": "android.speech.RecognitionService$Callback",
    "implCls": "android.speech.IRecognitionListener",
    "inf": "android.speech.IRecognitionListener",
    "mtd": "<android.speech.IRecognitionListener: void onPartialResults(android.os.Bundle)>"
  },
  {
    "helperCls": "android.app.usage.UsageStatsManager",
    "implCls": "com.android.server.usage.UsageStatsService$BinderService",
    "inf": "android.app.usage.IUsageStatsManager",
    "mtd": "<android.app.usage.IUsageStatsManager: boolean isAppInactive(java.lang.String,int)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int del(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void remove(android.view.IWindow)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>"
  },
  {
    "helperCls": "android.app.usage.StorageStatsManager",
    "implCls": "com.android.server.usage.StorageStatsService",
    "inf": "android.app.usage.IStorageStatsManager",
    "mtd": "<android.app.usage.IStorageStatsManager: boolean isQuotaSupported(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: android.os.Messenger getWifiServiceMessenger(java.lang.String)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.util.MergedConfiguration,android.view.Surface)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetHost",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: android.content.pm.ParceledListSlice startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,int[])>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: int getState()>"
  },
  {
    "helperCls": "android.view.DragAndDropPermissions",
    "implCls": "com.android.internal.view.IDragAndDropPermissions",
    "inf": "com.android.internal.view.IDragAndDropPermissions",
    "mtd": "<com.android.internal.view.IDragAndDropPermissions: void release()>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void updateSession(int,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidDevice",
    "implCls": "android.bluetooth.IBluetoothHidDevice",
    "inf": "android.bluetooth.IBluetoothHidDevice",
    "mtd": "<android.bluetooth.IBluetoothHidDevice: boolean replyReport(android.bluetooth.BluetoothDevice,byte,byte,byte[])>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: java.util.List getProfiles(int,boolean)>"
  },
  {
    "helperCls": "android.media.soundtrigger.SoundTriggerManager",
    "implCls": "com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub",
    "inf": "com.android.internal.app.ISoundTriggerService",
    "mtd": "<com.android.internal.app.ISoundTriggerService: int startRecognitionForIntent(android.os.ParcelUuid,android.app.PendingIntent,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void verifyNfcPermission()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void verifyNfcPermission()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void verifyNfcPermission()>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: void registerTaskStackListener(android.app.ITaskStackListener)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void requestChannelBrowsable(android.net.Uri,int)>"
  },
  {
    "helperCls": "android.app.Instrumentation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: void connect(android.accessibilityservice.IAccessibilityServiceClient,int)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void forceVolumeControlStream(int,android.os.IBinder)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.app.backup.BackupManager",
    "implCls": "com.android.server.backup.Trampoline",
    "inf": "android.app.backup.IBackupManager",
    "mtd": "<android.app.backup.IBackupManager: boolean isBackupServiceActive(int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.os.Bundle getApplicationRestrictionsForUser(java.lang.String,int)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller",
    "implCls": "android.content.pm.IPackageInstaller",
    "inf": "android.content.pm.IPackageInstaller",
    "mtd": "<android.content.pm.IPackageInstaller: void registerCallback(android.content.pm.IPackageInstallerCallback,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: void showMySoftInput(android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.app.VrManager",
    "implCls": "android.service.vr.IVrManager",
    "inf": "android.service.vr.IVrManager",
    "mtd": "<android.service.vr.IVrManager: void unregisterListener(android.service.vr.IVrStateCallbacks)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanScanner",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: java.lang.String getName()>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: void setProgress(android.print.PrintJobId,float)>"
  },
  {
    "helperCls": "android.app.StatusBarManager",
    "implCls": "com.android.server.statusbar.StatusBarManagerService",
    "inf": "com.android.internal.statusbar.IStatusBarService",
    "mtd": "<com.android.internal.statusbar.IStatusBarService: void disable2(int,android.os.IBinder,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)>"
  },
  {
    "helperCls": "android.service.autofill.FillCallback",
    "implCls": "android.service.autofill.IFillCallback",
    "inf": "android.service.autofill.IFillCallback",
    "mtd": "<android.service.autofill.IFillCallback: void onSuccess(android.service.autofill.FillResponse)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: int[] getProfileIds(int,boolean)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getInstalledApplications(int,int)>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection$VideoProvider",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void sendSessionModifyRequest(android.telecom.VideoProfile,android.telecom.VideoProfile)>"
  },
  {
    "helperCls": "android.os.ShellCallback",
    "implCls": "com.android.internal.os.IShellCallback",
    "inf": "com.android.internal.os.IShellCallback",
    "mtd": "<com.android.internal.os.IShellCallback: android.os.ParcelFileDescriptor openFile(java.lang.String,java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: java.util.List getUsers(boolean)>"
  },
  {
    "helperCls": "android.app.backup.BackupManager",
    "implCls": "com.android.server.backup.Trampoline",
    "inf": "android.app.backup.IBackupManager",
    "mtd": "<android.app.backup.IBackupManager: void setAutoRestore(boolean)>"
  },
  {
    "helperCls": "android.view.textclassifier.SystemTextClassifier",
    "implCls": "com.android.server.textclassifier.TextClassificationManagerService",
    "inf": "android.service.textclassifier.ITextClassifierService",
    "mtd": "<android.service.textclassifier.ITextClassifierService: void onSelectionEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.SelectionEvent)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: long getTotalStats(int)>"
  },
  {
    "helperCls": "android.provider.Settings$Secure",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean setApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: int getState()>"
  },
  {
    "helperCls": "android.media.Ringtone",
    "implCls": "android.media.IRingtonePlayer",
    "inf": "android.media.IRingtonePlayer",
    "mtd": "<android.media.IRingtonePlayer: void setPlaybackProperties(android.os.IBinder,float,boolean)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionInviteParticipantsRequestDelivered()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean getBluetoothContactSharingDisabled(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.nfc.cardemulation.CardEmulation",
    "implCls": "android.nfc.INfcCardEmulation",
    "inf": "android.nfc.INfcCardEmulation",
    "mtd": "<android.nfc.INfcCardEmulation: boolean setPreferredService(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.CardEmulation",
    "implCls": "android.nfc.INfcCardEmulation",
    "inf": "android.nfc.INfcCardEmulation",
    "mtd": "<android.nfc.INfcCardEmulation: boolean setPreferredService(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.net.ip.IpClient",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void verifyNfcPermission()>"
  },
  {
    "helperCls": "android.telecom.RemoteConference",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void onCallAudioStateChanged(java.lang.String,android.telecom.CallAudioState,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.hardware.usb.UsbManager",
    "implCls": "com.android.server.usb.UsbService",
    "inf": "android.hardware.usb.IUsbManager",
    "mtd": "<android.hardware.usb.IUsbManager: void setCurrentFunctions(long)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.content.pm.UserInfo createUser(java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isEnabled()>"
  },
  {
    "helperCls": "android.os.UpdateLock",
    "implCls": "com.android.server.UpdateLockService",
    "inf": "android.os.IUpdateLock",
    "mtd": "<android.os.IUpdateLock: void releaseUpdateLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isEnabled()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setRestrictionsProvider(android.content.ComponentName,android.content.ComponentName)>"
  },
  {
    "helperCls": "android.hardware.ConsumerIrManager",
    "implCls": "com.android.server.ConsumerIrService",
    "inf": "android.hardware.IConsumerIrService",
    "mtd": "<android.hardware.IConsumerIrService: boolean hasIrEmitter()>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionConferenceStateUpdated(android.telephony.ims.ImsConferenceState)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.service.wallpaper.IWallpaperConnection",
    "inf": "android.service.wallpaper.IWallpaperConnection",
    "mtd": "<android.service.wallpaper.IWallpaperConnection: void engineShown(android.service.wallpaper.IWallpaperEngine)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getRingerModeExternal()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isEphemeralUser(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void removeOnMeshPrefix(android.net.IpPrefix)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void startTethering(java.lang.String[])>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: boolean sendFingerprintGesture(int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void finishInput()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller$Session",
    "implCls": "android.content.pm.IPackageInstallerSession",
    "inf": "android.content.pm.IPackageInstallerSession",
    "mtd": "<android.content.pm.IPackageInstallerSession: android.os.ParcelFileDescriptor openWrite(java.lang.String,long,long)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller$Session",
    "implCls": "android.content.pm.IPackageInstallerSession",
    "inf": "android.content.pm.IPackageInstallerSession",
    "mtd": "<android.content.pm.IPackageInstallerSession: android.os.ParcelFileDescriptor openWrite(java.lang.String,long,long)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void setForegroundDispatch(android.app.PendingIntent,android.content.IntentFilter[],android.nfc.TechListParcel)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.content.ComponentName getGlobalProxyAdmin(int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: android.content.pm.ParceledListSlice getAppActiveNotifications(java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidHost",
    "implCls": "android.bluetooth.IBluetoothHidHost",
    "inf": "android.bluetooth.IBluetoothHidHost",
    "mtd": "<android.bluetooth.IBluetoothHidHost: boolean disconnect(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.hardware.usb.UsbManager",
    "implCls": "com.android.server.usb.UsbService",
    "inf": "android.hardware.usb.IUsbManager",
    "mtd": "<android.hardware.usb.IUsbManager: long getScreenUnlockedFunctions()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void lockUserKey(int)>"
  },
  {
    "helperCls": "android.app.slice.SliceManager",
    "implCls": "com.android.server.slice.SliceManagerService",
    "inf": "android.app.slice.ISliceManager",
    "mtd": "<android.app.slice.ISliceManager: android.app.slice.SliceSpec[] getPinnedSpecs(android.net.Uri,java.lang.String)>"
  },
  {
    "helperCls": "android.app.usage.NetworkStatsManager",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: android.net.INetworkStatsSession openSessionForUsageStats(int,java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.view.accessibility.CaptioningManager",
    "implCls": "com.android.server.content.ContentService",
    "inf": "android.content.IContentService",
    "mtd": "<android.content.IContentService: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>"
  },
  {
    "helperCls": "android.telephony.ims.stub.ImsSmsImplBase",
    "implCls": "android.telephony.ims.aidl.IImsSmsListener",
    "inf": "android.telephony.ims.aidl.IImsSmsListener",
    "mtd": "<android.telephony.ims.aidl.IImsSmsListener: void onSmsStatusReportReceived(int,int,java.lang.String,byte[])>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void unregisterGnssStatusCallback(android.location.IGnssStatusListener)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int checkUidSignatures(int,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isDeviceProvisioned()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: java.util.List getVrInputMethodList()>"
  },
  {
    "helperCls": "android.util.StatsLog",
    "implCls": "android.os.IStatsManager",
    "inf": "android.os.IStatsManager",
    "mtd": "<android.os.IStatsManager: void sendAppBreadcrumbAtom(int,int)>"
  },
  {
    "helperCls": "android.print.PrintManager",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: android.view.IWindowSession openSession(android.view.IWindowSessionCallback,com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext)>"
  },
  {
    "helperCls": "android.app.AlarmManager",
    "implCls": "android.app.IAlarmManager",
    "inf": "android.app.IAlarmManager",
    "mtd": "<android.app.IAlarmManager: android.app.AlarmManager$AlarmClockInfo getNextAlarmClock(int)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void disableEphemeralNetwork(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.media.session.MediaSession",
    "implCls": "android.media.session.ISession",
    "inf": "android.media.session.ISession",
    "mtd": "<android.media.session.ISession: void setMetadata(android.media.MediaMetadata)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>"
  },
  {
    "helperCls": "android.app.JobSchedulerImpl",
    "implCls": "com.android.server.job.JobSchedulerService$JobSchedulerStub",
    "inf": "android.app.job.IJobScheduler",
    "mtd": "<android.app.job.IJobScheduler: void cancelAll()>"
  },
  {
    "helperCls": "android.telephony.ims.feature.MmTelFeature",
    "implCls": "android.telephony.ims.aidl.IImsMmTelListener",
    "inf": "android.telephony.ims.aidl.IImsMmTelListener",
    "mtd": "<android.telephony.ims.aidl.IImsMmTelListener: void onIncomingCall(com.android.ims.internal.IImsCallSession,android.os.Bundle)>"
  },
  {
    "helperCls": "android.media.midi.MidiDevice",
    "implCls": "com.android.server.midi.MidiService",
    "inf": "android.media.midi.IMidiManager",
    "mtd": "<android.media.midi.IMidiManager: void closeDevice(android.os.IBinder,android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void extendVerificationTimeout(int,int,long)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: java.util.List getUserRestrictionSources(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.DragAndDropPermissions",
    "implCls": "com.android.internal.view.IDragAndDropPermissions",
    "inf": "com.android.internal.view.IDragAndDropPermissions",
    "mtd": "<com.android.internal.view.IDragAndDropPermissions: void takeTransient(android.os.IBinder)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetHost",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: android.content.IntentSender createAppWidgetConfigIntentSender(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setBluetoothA2dpOn(boolean)>"
  },
  {
    "helperCls": "android.os.CancellationSignal",
    "implCls": "android.os.ICancellationSignal",
    "inf": "android.os.ICancellationSignal",
    "mtd": "<android.os.ICancellationSignal: void cancel()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: android.bluetooth.IBluetoothSocketManager getSocketManager()>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "inf": "com.android.internal.app.IVoiceInteractionManagerService",
    "mtd": "<com.android.internal.app.IVoiceInteractionManagerService: int getUserDisabledShowContext()>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: void showStrictModeViolation(boolean)>"
  },
  {
    "helperCls": "android.hardware.Camera",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void stopWatchingMode(com.android.internal.app.IAppOpsCallback)>"
  },
  {
    "helperCls": "android.net.wifi.rtt.WifiRttManager",
    "implCls": "com.android.server.wifi.rtt.RttServiceImpl",
    "inf": "android.net.wifi.rtt.IWifiRttManager",
    "mtd": "<android.net.wifi.rtt.IWifiRttManager: void startRanging(android.os.IBinder,java.lang.String,android.os.WorkSource,android.net.wifi.rtt.RangingRequest,android.net.wifi.rtt.IRttCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHearingAid",
    "implCls": "android.bluetooth.IBluetoothHearingAid",
    "inf": "android.bluetooth.IBluetoothHearingAid",
    "mtd": "<android.bluetooth.IBluetoothHearingAid: java.util.List getActiveDevices()>"
  },
  {
    "helperCls": "android.hardware.location.GeofenceHardware",
    "implCls": "android.hardware.location.IGeofenceHardware",
    "inf": "android.hardware.location.IGeofenceHardware",
    "mtd": "<android.hardware.location.IGeofenceHardware: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: android.bluetooth.IBluetoothSocketManager getSocketManager()>"
  },
  {
    "helperCls": "android.hardware.Camera",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: android.os.ParcelFileDescriptor getShortcutIconFd(java.lang.String,java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void onCallAudioStateChanged(java.lang.String,android.telecom.CallAudioState,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void setInsets(android.view.IWindow,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Region)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void updateSession(int,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,int,int)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: java.lang.String[] getMobileIfaces()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: float getCurrentAnimatorScale()>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: android.app.AutomaticZenRule getAutomaticZenRule(java.lang.String)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: int sendIntentSender(android.content.IIntentSender,android.os.IBinder,int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void onPendingSaveUi(int,android.os.IBinder)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getStreamMaxVolume(int)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.NfcFCardEmulation",
    "implCls": "android.nfc.INfcFCardEmulation",
    "inf": "android.nfc.INfcFCardEmulation",
    "mtd": "<android.nfc.INfcFCardEmulation: java.util.List getNfcFServices(int)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.NfcFCardEmulation",
    "implCls": "android.nfc.INfcFCardEmulation",
    "inf": "android.nfc.INfcFCardEmulation",
    "mtd": "<android.nfc.INfcFCardEmulation: java.util.List getNfcFServices(int)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: android.os.IBinder getToken(android.os.IBinder)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: int getState()>"
  },
  {
    "helperCls": "android.media.projection.MediaProjectionManager",
    "implCls": "com.android.server.media.projection.MediaProjectionManagerService$BinderService",
    "inf": "android.media.projection.IMediaProjectionManager",
    "mtd": "<android.media.projection.IMediaProjectionManager: void removeCallback(android.media.projection.IMediaProjectionWatcherCallback)>"
  },
  {
    "helperCls": "android.print.PrinterDiscoverySession",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: void destroyPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>"
  },
  {
    "helperCls": "android.app.usage.StorageStatsManager",
    "implCls": "com.android.server.usage.StorageStatsService",
    "inf": "android.app.usage.IStorageStatsManager",
    "mtd": "<android.app.usage.IStorageStatsManager: boolean isReservedSupported(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: long getDiscoveryEndMillis()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void pausePolling(int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: boolean isWallpaperSupported(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGattServer",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void serverConnect(int,java.lang.String,boolean,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getMaxConnectedAudioDevices()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void reportKeyguardDismissed(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void revokeRuntimePermission(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.media.browse.MediaBrowser",
    "implCls": "android.service.media.IMediaBrowserService",
    "inf": "android.service.media.IMediaBrowserService",
    "mtd": "<android.service.media.IMediaBrowserService: void removeSubscription(java.lang.String,android.os.IBinder,android.service.media.IMediaBrowserServiceCallbacks)>"
  },
  {
    "helperCls": "android.media.browse.MediaBrowser",
    "implCls": "android.service.media.IMediaBrowserService",
    "inf": "android.service.media.IMediaBrowserService",
    "mtd": "<android.service.media.IMediaBrowserService: void removeSubscription(java.lang.String,android.os.IBinder,android.service.media.IMediaBrowserServiceCallbacks)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setCrossProfileContactsSearchDisabled(android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: java.lang.String getProviderMimeType(android.net.Uri,int)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: boolean isRinging(java.lang.String)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setVolumePolicy(android.media.VolumePolicy)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setSpeakerphoneOn(boolean)>"
  },
  {
    "helperCls": "android.os.ResultReceiver",
    "implCls": "com.android.internal.os.IResultReceiver",
    "inf": "com.android.internal.os.IResultReceiver",
    "mtd": "<com.android.internal.os.IResultReceiver: void send(int,android.os.Bundle)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.VolumeRecord[] getVolumeRecords(int)>"
  },
  {
    "helperCls": "android.os.ServiceManager",
    "implCls": "android.os.IServiceManager",
    "inf": "android.os.IServiceManager",
    "mtd": "<android.os.IServiceManager: void addService(java.lang.String,android.os.IBinder,boolean,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: boolean isScanAlwaysAvailable()>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void setListener(android.telephony.ims.aidl.IImsCallSessionListener)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.UiAutomationConnection",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: android.os.IBinder getWindowToken(int,int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: java.lang.String getSeedAccountType()>"
  },
  {
    "helperCls": "android.media.audiopolicy.AudioPolicy",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int setFocusPropertiesForPolicy(int,android.media.audiopolicy.IAudioPolicyCallback)>"
  },
  {
    "helperCls": "android.hardware.location.ContextHubManager",
    "implCls": "com.android.server.location.ContextHubService",
    "inf": "android.hardware.location.IContextHubService",
    "mtd": "<android.hardware.location.IContextHubService: int unloadNanoApp(int)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void remove(android.view.IWindow)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothSap",
    "implCls": "android.bluetooth.IBluetoothSap",
    "inf": "android.bluetooth.IBluetoothSap",
    "mtd": "<android.bluetooth.IBluetoothSap: int getState()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: android.os.Messenger getWifiServiceMessenger(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dp",
    "implCls": "android.bluetooth.IBluetoothA2dp",
    "inf": "android.bluetooth.IBluetoothA2dp",
    "mtd": "<android.bluetooth.IBluetoothA2dp: void disableOptionalCodecs(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.content.RestrictionsManager",
    "implCls": "com.android.server.restrictions.RestrictionsManagerService$RestrictionsManagerImpl",
    "inf": "android.content.IRestrictionsManager",
    "mtd": "<android.content.IRestrictionsManager: android.content.Intent createLocalApprovalIntent()>"
  },
  {
    "helperCls": "android.app.StatsManager",
    "implCls": "android.os.IStatsManager",
    "inf": "android.os.IStatsManager",
    "mtd": "<android.os.IStatsManager: byte[] getMetadata(java.lang.String)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: android.net.lowpan.LowpanIdentity getLowpanIdentity()>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void sendDtmf(char,android.os.Message)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: android.accounts.Account[] getAccountsForPackage(java.lang.String,int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int addClient(android.view.autofill.IAutoFillManagerClient,int)>"
  },
  {
    "helperCls": "android.app.usage.NetworkStats",
    "implCls": "android.net.INetworkStatsSession",
    "inf": "android.net.INetworkStatsSession",
    "mtd": "<android.net.INetworkStatsSession: int[] getRelevantUids()>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>"
  },
  {
    "helperCls": "android.content.RestrictionsManager",
    "implCls": "com.android.server.restrictions.RestrictionsManagerService$RestrictionsManagerImpl",
    "inf": "android.content.IRestrictionsManager",
    "mtd": "<android.content.IRestrictionsManager: boolean hasRestrictionsProvider()>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean isUserRunning(int)>"
  },
  {
    "helperCls": "android.service.quicksettings.TileService",
    "implCls": "android.service.quicksettings.IQSService",
    "inf": "android.service.quicksettings.IQSService",
    "mtd": "<android.service.quicksettings.IQSService: void startUnlockAndRun(android.os.IBinder)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionUssdMessageReceived(int,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: android.media.session.PlaybackState getPlaybackState()>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection$VideoProvider",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void setCamera(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: boolean disable(boolean)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: java.util.List getProviders(android.location.Criteria,boolean)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputContentInfo",
    "implCls": "com.android.internal.inputmethod.IInputContentUriToken",
    "inf": "com.android.internal.inputmethod.IInputContentUriToken",
    "mtd": "<com.android.internal.inputmethod.IInputContentUriToken: void release()>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: long getUserCreationTime(int)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: java.util.List getSelfManagedPhoneAccounts(java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.bluetooth.le.AdvertisingSet",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void getOwnAddress(int)>"
  },
  {
    "helperCls": "android.app.JobSchedulerImpl",
    "implCls": "com.android.server.job.JobSchedulerService$JobSchedulerStub",
    "inf": "android.app.job.IJobScheduler",
    "mtd": "<android.app.job.IJobScheduler: android.app.job.JobInfo getPendingJob(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isOffloadedFilteringSupported()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isOffloadedFilteringSupported()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.media.audiopolicy.AudioPolicy",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int removeMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: void setUserAccount(int,java.lang.String)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: boolean isAlwaysOnVpnPackageSupported(int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentContentProviders(android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int reset()>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: boolean isPackageEnabled(java.lang.String,java.lang.String,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isDiscovering()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.telephony.SubscriptionManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: java.lang.String getSubscriptionPlansOwner(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int logoutUser(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void updatePermissionFlags(java.lang.String,java.lang.String,int,int,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: java.util.List getEnabledInputMethodSubtypeList(java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.print.PrintManager",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int,int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGattServer",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void serverReadPhy(int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: android.content.res.Configuration getConfiguration()>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: android.content.res.Configuration getConfiguration()>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: void removeOnAppsChangedListener(android.content.pm.IOnAppsChangedListener)>"
  },
  {
    "helperCls": "android.os.DropBoxManager",
    "implCls": "com.android.internal.os.IDropBoxManagerService$Stub",
    "inf": "com.android.internal.os.IDropBoxManagerService",
    "mtd": "<com.android.internal.os.IDropBoxManagerService: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: android.content.pm.ParceledListSlice getInstalledProvidersForProfile(int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.textservice.TextServicesManager",
    "implCls": "com.android.server.TextServicesManagerService",
    "inf": "com.android.internal.textservice.ITextServicesManager",
    "mtd": "<com.android.internal.textservice.ITextServicesManager: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>"
  },
  {
    "helperCls": "android.se.omapi.Session",
    "implCls": "android.se.omapi.ISecureElementSession",
    "inf": "android.se.omapi.ISecureElementSession",
    "mtd": "<android.se.omapi.ISecureElementSession: android.se.omapi.ISecureElementChannel openBasicChannel(byte[],byte,android.se.omapi.ISecureElementListener)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: int[] getDisplayIds()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.speech.RecognitionService$Callback",
    "implCls": "android.speech.IRecognitionListener",
    "inf": "android.speech.IRecognitionListener",
    "mtd": "<android.speech.IRecognitionListener: void onResults(android.os.Bundle)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int)>"
  },
  {
    "helperCls": "android.media.Ringtone",
    "implCls": "android.media.IRingtonePlayer",
    "inf": "android.media.IRingtonePlayer",
    "mtd": "<android.media.IRingtonePlayer: void setPlaybackProperties(android.os.IBinder,float,boolean)>"
  },
  {
    "helperCls": "android.net.sip.SipManager",
    "implCls": "com.android.server.sip.SipService",
    "inf": "android.net.sip.ISipService",
    "mtd": "<android.net.sip.ISipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.CardEmulation",
    "implCls": "android.nfc.INfcCardEmulation",
    "inf": "android.nfc.INfcCardEmulation",
    "mtd": "<android.nfc.INfcCardEmulation: boolean removeAidGroupForService(int,android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.CardEmulation",
    "implCls": "android.nfc.INfcCardEmulation",
    "inf": "android.nfc.INfcCardEmulation",
    "mtd": "<android.nfc.INfcCardEmulation: boolean removeAidGroupForService(int,android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.telephony.SubscriptionManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: void setSubscriptionPlans(int,android.telephony.SubscriptionPlan[],java.lang.String)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setLogoutEnabled(android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setPasswordExpirationTimeout(android.content.ComponentName,long,boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void enforceCanManageCaCerts(android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothSap",
    "implCls": "android.bluetooth.IBluetoothSap",
    "inf": "android.bluetooth.IBluetoothSap",
    "mtd": "<android.bluetooth.IBluetoothSap: int getState()>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int checkOperation(int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionProgressing(android.telephony.ims.ImsStreamMediaProfile)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidHost",
    "implCls": "android.bluetooth.IBluetoothHidHost",
    "inf": "android.bluetooth.IBluetoothHidHost",
    "mtd": "<android.bluetooth.IBluetoothHidHost: int getConnectionState(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: void setUserName(int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void reportSuccessfulPasswordAttempt(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void unregisterClient(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void removeActiveAdmin(android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isPackageSuspended(android.content.ComponentName,java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean installKeyPair(android.content.ComponentName,java.lang.String,byte[],byte[],byte[],java.lang.String,boolean,boolean)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setRingerModeInternal(int,java.lang.String)>"
  },
  {
    "helperCls": "android.net.sip.SipSession",
    "implCls": "android.net.sip.ISipSession",
    "inf": "android.net.sip.ISipSession",
    "mtd": "<android.net.sip.ISipSession: void register(int)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.app.AlarmManager",
    "implCls": "android.app.IAlarmManager",
    "inf": "android.app.IAlarmManager",
    "mtd": "<android.app.IAlarmManager: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>"
  },
  {
    "helperCls": "android.app.UiModeManager",
    "implCls": "android.app.IUiModeManager$Stub",
    "inf": "android.app.IUiModeManager",
    "mtd": "<android.app.IUiModeManager: void setNightMode(int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int addClient(android.view.autofill.IAutoFillManagerClient,int)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.util.MergedConfiguration,android.view.Surface)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: int getState()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int getMoveStatus(int)>"
  },
  {
    "helperCls": "android.telecom.RemoteConference",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void unhold(java.lang.String,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.content.pm.UserInfo createUser(java.lang.String,int)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionConferenceExtended(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
  },
  {
    "helperCls": "android.service.trust.TrustAgentService",
    "implCls": "android.service.trust.ITrustAgentServiceCallback",
    "inf": "android.service.trust.ITrustAgentServiceCallback",
    "mtd": "<android.service.trust.ITrustAgentServiceCallback: void unlockUserWithToken(long,byte[],int)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHearingAid",
    "implCls": "android.bluetooth.IBluetoothHearingAid",
    "inf": "android.bluetooth.IBluetoothHearingAid",
    "mtd": "<android.bluetooth.IBluetoothHearingAid: boolean disconnect(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: java.util.List getUsers(boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void destroyUserKey(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidHost",
    "implCls": "android.bluetooth.IBluetoothHidHost",
    "inf": "android.bluetooth.IBluetoothHidHost",
    "mtd": "<android.bluetooth.IBluetoothHidHost: int getPriority(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setMasterMute(boolean,int,java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void cancelSession(int,int)>"
  },
  {
    "helperCls": "android.media.projection.MediaProjection",
    "implCls": "android.media.projection.IMediaProjection",
    "inf": "android.media.projection.IMediaProjection",
    "mtd": "<android.media.projection.IMediaProjection: void start(android.media.projection.IMediaProjectionCallback)>"
  },
  {
    "helperCls": "android.telephony.ims.feature.MmTelFeature",
    "implCls": "android.telephony.ims.aidl.IImsMmTelFeature",
    "inf": "android.telephony.ims.aidl.IImsMmTelFeature",
    "mtd": "<android.telephony.ims.aidl.IImsMmTelFeature: void setSmsListener(android.telephony.ims.aidl.IImsSmsListener)>"
  },
  {
    "helperCls": "android.app.usage.NetworkStats",
    "implCls": "android.net.INetworkStatsSession",
    "inf": "android.net.INetworkStatsSession",
    "mtd": "<android.net.INetworkStatsSession: android.net.NetworkStatsHistory getHistoryIntervalForUid(android.net.NetworkTemplate,int,int,int,int,long,long)>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: float getCurrentAnimatorScale()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidHost",
    "implCls": "android.bluetooth.IBluetoothHidHost",
    "inf": "android.bluetooth.IBluetoothHidHost",
    "mtd": "<android.bluetooth.IBluetoothHidHost: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)>"
  },
  {
    "helperCls": "android.location.Geocoder",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>"
  },
  {
    "helperCls": "android.telecom.VideoCallImpl",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void setPauseImage(android.net.Uri)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dpSink",
    "implCls": "android.bluetooth.IBluetoothA2dpSink",
    "inf": "android.bluetooth.IBluetoothA2dpSink",
    "mtd": "<android.bluetooth.IBluetoothA2dpSink: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.UiAutomation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: boolean clearWindowContentFrameStats(int)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: java.lang.String getLine1Number(android.telecom.PhoneAccountHandle,java.lang.String)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int checkOperation(int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int addClient(android.view.autofill.IAutoFillManagerClient,int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.telephony.ims.feature.MmTelFeature",
    "implCls": "android.telephony.ims.aidl.IImsMmTelFeature",
    "inf": "android.telephony.ims.aidl.IImsMmTelFeature",
    "mtd": "<android.telephony.ims.aidl.IImsMmTelFeature: void sendSms(int,int,java.lang.String,java.lang.String,boolean,byte[])>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setHearingAidDeviceConnectionState(android.bluetooth.BluetoothDevice,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dp",
    "implCls": "android.bluetooth.IBluetoothA2dp",
    "inf": "android.bluetooth.IBluetoothA2dp",
    "mtd": "<android.bluetooth.IBluetoothA2dp: java.util.List getConnectedDevices()>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void stopBluetoothSco(android.os.IBinder)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dp",
    "implCls": "android.bluetooth.IBluetoothA2dp",
    "inf": "android.bluetooth.IBluetoothA2dp",
    "mtd": "<android.bluetooth.IBluetoothA2dp: boolean setActiveDevice(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: boolean isPlaybackActive(android.media.IMediaRouterClient)>"
  },
  {
    "helperCls": "android.net.sip.SipSession",
    "implCls": "android.net.sip.ISipSession",
    "inf": "android.net.sip.ISipSession",
    "mtd": "<android.net.sip.ISipSession: java.lang.String getLocalIp()>"
  },
  {
    "helperCls": "android.hardware.radio.RadioManager",
    "implCls": "com.android.server.broadcastradio.BroadcastRadioService$ServiceImpl",
    "inf": "android.hardware.radio.IRadioService",
    "mtd": "<android.hardware.radio.IRadioService: java.util.List listModules()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: boolean removeAccountExplicitly(android.accounts.Account)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void hide()>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetHost",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: int allocateAppWidgetId(java.lang.String,int)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: java.util.List getAllProviders()>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: boolean startShortcut(java.lang.String,java.lang.String,java.lang.String,android.graphics.Rect,android.os.Bundle,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothSap",
    "implCls": "android.bluetooth.IBluetoothSap",
    "inf": "android.bluetooth.IBluetoothSap",
    "mtd": "<android.bluetooth.IBluetoothSap: java.util.List getConnectedDevices()>"
  },
  {
    "helperCls": "android.app.backup.BackupManager",
    "implCls": "com.android.server.backup.Trampoline",
    "inf": "android.app.backup.IBackupManager",
    "mtd": "<android.app.backup.IBackupManager: java.lang.String selectBackupTransport(java.lang.String)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: void addNewUnknownCall(android.telecom.PhoneAccountHandle,android.os.Bundle)>"
  },
  {
    "helperCls": "android.net.NetworkScoreManager",
    "implCls": "com.android.server.NetworkScoreService",
    "inf": "android.net.INetworkScoreService",
    "mtd": "<android.net.INetworkScoreService: boolean updateScores(android.net.ScoredNetwork[])>"
  },
  {
    "helperCls": "android.os.CancellationSignal",
    "implCls": "android.os.ICancellationSignal",
    "inf": "android.os.ICancellationSignal",
    "mtd": "<android.os.ICancellationSignal: void cancel()>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int getState(int)>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: boolean hasEnrolledFingerprints(int,java.lang.String)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: boolean isPlaybackActive(android.media.IMediaRouterClient)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void setTransparentRegion(android.view.IWindow,android.graphics.Region)>"
  },
  {
    "helperCls": "android.se.omapi.Reader",
    "implCls": "android.se.omapi.ISecureElementReader",
    "inf": "android.se.omapi.ISecureElementReader",
    "mtd": "<android.se.omapi.ISecureElementReader: boolean isSecureElementPresent()>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: int createVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.backup.BackupManager",
    "implCls": "com.android.server.backup.Trampoline",
    "inf": "android.app.backup.IBackupManager",
    "mtd": "<android.app.backup.IBackupManager: boolean isAppEligibleForBackup(java.lang.String)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: android.app.NotificationManager$Policy getNotificationPolicy(java.lang.String)>"
  },
  {
    "helperCls": "android.media.projection.MediaProjectionManager",
    "implCls": "com.android.server.media.projection.MediaProjectionManagerService$BinderService",
    "inf": "android.media.projection.IMediaProjectionManager",
    "mtd": "<android.media.projection.IMediaProjectionManager: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int getPackageUid(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getStreamVolume(int)>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void finishSelf(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void finishSelf(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentServices(android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.companion.CompanionDeviceManager",
    "implCls": "com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl",
    "inf": "android.companion.ICompanionDeviceManager",
    "mtd": "<android.companion.ICompanionDeviceManager: void associate(android.companion.AssociationRequest,android.companion.IFindDeviceCallback,java.lang.String)>"
  },
  {
    "helperCls": "android.telephony.ims.feature.MmTelFeature",
    "implCls": "android.telephony.ims.aidl.IImsMmTelFeature",
    "inf": "android.telephony.ims.aidl.IImsMmTelFeature",
    "mtd": "<android.telephony.ims.aidl.IImsMmTelFeature: void acknowledgeSmsReport(int,int,int)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void registerSoftApCallback(android.os.IBinder,android.net.wifi.ISoftApCallback,int)>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void pullExternalCall(java.lang.String,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: void setUserRestriction(java.lang.String,boolean,int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: void setUserRestriction(java.lang.String,boolean,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothPbap",
    "implCls": "android.bluetooth.IBluetoothPbap",
    "inf": "android.bluetooth.IBluetoothPbap",
    "mtd": "<android.bluetooth.IBluetoothPbap: java.util.List getDevicesMatchingConnectionStates(int[])>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: boolean isRequestPinItemSupported(int,int)>"
  },
  {
    "helperCls": "android.app.SearchManager",
    "implCls": "com.android.server.search.SearchManagerService",
    "inf": "android.app.ISearchManager",
    "mtd": "<android.app.ISearchManager: android.content.ComponentName getGlobalSearchActivity()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void setPrimaryStorageUuid(java.lang.String,android.content.pm.IPackageMoveObserver)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: android.telecom.PhoneAccountHandle getSimCallManager()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidHost",
    "implCls": "android.bluetooth.IBluetoothHidHost",
    "inf": "android.bluetooth.IBluetoothHidHost",
    "mtd": "<android.bluetooth.IBluetoothHidHost: boolean getIdleTime(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isMeteredDataDisabledPackageForUser(android.content.ComponentName,java.lang.String,int)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void mount(java.lang.String)>"
  },
  {
    "helperCls": "android.telephony.SubscriptionManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: java.lang.String getSubscriptionPlansOwner(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.media.midi.MidiManager",
    "implCls": "com.android.server.midi.MidiService",
    "inf": "android.media.midi.IMidiManager",
    "mtd": "<android.media.midi.IMidiManager: android.media.midi.MidiDeviceInfo registerDeviceServer(android.media.midi.IMidiDeviceServer,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.os.Bundle getDefaultGuestRestrictions()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean isPackageAvailable(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getOrganizationName(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void disableOwnedAutofillServices(int)>"
  },
  {
    "helperCls": "android.net.NetworkPolicyManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: void setRestrictBackground(boolean)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isEnabled()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>"
  },
  {
    "helperCls": "android.security.keystore.recovery.RecoveryController",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: void removeKey(java.lang.String)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InputChannel)>"
  },
  {
    "helperCls": "android.app.StatusBarManager",
    "implCls": "com.android.server.statusbar.StatusBarManagerService",
    "inf": "com.android.internal.statusbar.IStatusBarService",
    "mtd": "<com.android.internal.statusbar.IStatusBarService: void collapsePanels()>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean factoryReset()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.os.PowerManager",
    "implCls": "com.android.server.power.PowerManagerService$BinderService",
    "inf": "android.os.IPowerManager",
    "mtd": "<android.os.IPowerManager: boolean isWakeLockLevelSupported(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void forceRemoveActiveAdmin(android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: boolean disconnect(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.media.soundtrigger.SoundTriggerDetector",
    "implCls": "com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub",
    "inf": "com.android.internal.app.ISoundTriggerService",
    "mtd": "<com.android.internal.app.ISoundTriggerService: int stopRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryInstrumentation(java.lang.String,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void invokeBeamInternal(android.nfc.BeamShareData)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setCrossProfileCallerIdDisabled(android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.media.Ringtone",
    "implCls": "android.media.IRingtonePlayer",
    "inf": "android.media.IRingtonePlayer",
    "mtd": "<android.media.IRingtonePlayer: void setPlaybackProperties(android.os.IBinder,float,boolean)>"
  },
  {
    "helperCls": "android.app.usage.NetworkStats",
    "implCls": "android.net.INetworkStatsSession",
    "inf": "android.net.INetworkStatsSession",
    "mtd": "<android.net.INetworkStatsSession: android.net.NetworkStats getDeviceSummaryForNetwork(android.net.NetworkTemplate,long,long)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: void dispatchMediaKeyEvent(java.lang.String,boolean,android.view.KeyEvent,boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.graphics.Point getStableDisplaySize()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean packageHasActiveAdmins(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void finishInput()>"
  },
  {
    "helperCls": "android.database.BulkCursorToCursorAdaptor",
    "implCls": "android.database.IBulkCursor",
    "inf": "android.database.IBulkCursor",
    "mtd": "<android.database.IBulkCursor: void close()>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: void evictCredentialEncryptionKey(int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: long getRateLimitResetTime(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.SearchManager",
    "implCls": "com.android.server.search.SearchManagerService",
    "inf": "android.app.ISearchManager",
    "mtd": "<android.app.ISearchManager: android.content.ComponentName getGlobalSearchActivity()>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionRttMessageReceived(java.lang.String)>"
  },
  {
    "helperCls": "android.telephony.ims.feature.MmTelFeature",
    "implCls": "android.telephony.ims.aidl.IImsMmTelFeature",
    "inf": "android.telephony.ims.aidl.IImsMmTelFeature",
    "mtd": "<android.telephony.ims.aidl.IImsMmTelFeature: void acknowledgeSms(int,int,int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int addClient(android.view.autofill.IAutoFillManagerClient,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: java.lang.String getNameForUid(int)>"
  },
  {
    "helperCls": "android.net.IpSecManager$UdpEncapsulationSocket",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: android.net.IpSecUdpEncapResponse openUdpEncapsulationSocket(int,android.os.IBinder)>"
  },
  {
    "helperCls": "android.speech.RecognitionService$Callback",
    "implCls": "android.speech.IRecognitionListener",
    "inf": "android.speech.IRecognitionListener",
    "mtd": "<android.speech.IRecognitionListener: void onRmsChanged(float)>"
  },
  {
    "helperCls": "android.telephony.ims.stub.ImsSmsImplBase",
    "implCls": "android.telephony.ims.aidl.IImsSmsListener",
    "inf": "android.telephony.ims.aidl.IImsSmsListener",
    "mtd": "<android.telephony.ims.aidl.IImsSmsListener: void onSmsReceived(int,java.lang.String,byte[])>"
  },
  {
    "helperCls": "android.os.RecoverySystem",
    "implCls": "com.android.server.RecoverySystemService$BinderService",
    "inf": "android.os.IRecoverySystem",
    "mtd": "<android.os.IRecoverySystem: void rebootRecoveryWithCommand(java.lang.String)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int getKeyCharacteristics(java.lang.String,android.security.keymaster.KeymasterBlob,android.security.keymaster.KeymasterBlob,int,android.security.keymaster.KeyCharacteristics)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void unregisterListener(android.os.storage.IStorageEventListener)>"
  },
  {
    "helperCls": "android.app.UiModeManager",
    "implCls": "android.app.IUiModeManager$Stub",
    "inf": "android.app.IUiModeManager",
    "mtd": "<android.app.IUiModeManager: int getCurrentModeType()>"
  },
  {
    "helperCls": "android.content.pm.dex.ArtManager",
    "implCls": "android.content.pm.dex.IArtManager",
    "inf": "android.content.pm.dex.IArtManager",
    "mtd": "<android.content.pm.dex.IArtManager: void snapshotRuntimeProfile(int,java.lang.String,java.lang.String,android.content.pm.dex.ISnapshotRuntimeProfileCallback,java.lang.String)>"
  },
  {
    "helperCls": "android.net.sip.SipManager",
    "implCls": "com.android.server.sip.SipService",
    "inf": "android.net.sip.ISipService",
    "mtd": "<android.net.sip.ISipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void unregisterGnssStatusCallback(android.location.IGnssStatusListener)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>"
  },
  {
    "helperCls": "android.hardware.camera2.impl.ICameraDeviceUserWrapper",
    "implCls": "android.hardware.camera2.ICameraDeviceUser",
    "inf": "android.hardware.camera2.ICameraDeviceUser",
    "mtd": "<android.hardware.camera2.ICameraDeviceUser: android.view.Surface getInputSurface()>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.hardware.usb.UsbManager",
    "implCls": "com.android.server.usb.UsbService",
    "inf": "android.hardware.usb.IUsbManager",
    "mtd": "<android.hardware.usb.IUsbManager: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean outOfMemory(android.view.IWindow)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionResumeReceived(android.telephony.ims.ImsCallProfile)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean hasSystemFeature(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputContext",
    "inf": "com.android.internal.view.IInputContext",
    "mtd": "<com.android.internal.view.IInputContext: void finishComposingText()>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidDevice",
    "implCls": "android.bluetooth.IBluetoothHidDevice",
    "inf": "android.bluetooth.IBluetoothHidDevice",
    "mtd": "<android.bluetooth.IBluetoothHidDevice: boolean connect(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void setUidMode(int,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGattServer",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void sendNotification(int,java.lang.String,int,boolean,byte[])>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void remove(android.view.IWindow)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.net.IpSecManager$IpSecTunnelInterface",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: android.net.IpSecTunnelInterfaceResponse createTunnelInterface(java.lang.String,java.lang.String,android.net.Network,android.os.IBinder,java.lang.String)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: java.util.Map getAccountsAndVisibilityForPackage(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dp",
    "implCls": "android.bluetooth.IBluetoothA2dp",
    "inf": "android.bluetooth.IBluetoothA2dp",
    "mtd": "<android.bluetooth.IBluetoothA2dp: void disableOptionalCodecs(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isLePeriodicAdvertisingSupported()>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void stopWifiDisplayScan()>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: void unbindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void join(android.net.lowpan.LowpanProvision)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller",
    "implCls": "android.content.pm.IPackageInstaller",
    "inf": "android.content.pm.IPackageInstaller",
    "mtd": "<android.content.pm.IPackageInstaller: void registerCallback(android.content.pm.IPackageInstallerCallback,int)>"
  },
  {
    "helperCls": "android.net.ip.IpClient",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>"
  },
  {
    "helperCls": "android.app.SearchManager",
    "implCls": "com.android.server.search.SearchManagerService",
    "inf": "android.app.ISearchManager",
    "mtd": "<android.app.ISearchManager: android.content.ComponentName getGlobalSearchActivity()>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int addClient(android.view.autofill.IAutoFillManagerClient,int)>"
  },
  {
    "helperCls": "android.hardware.usb.UsbManager",
    "implCls": "com.android.server.usb.UsbService",
    "inf": "android.hardware.usb.IUsbManager",
    "mtd": "<android.hardware.usb.IUsbManager: void setUsbDeviceConnectionHandler(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.speech.SpeechRecognizer",
    "implCls": "android.speech.IRecognitionService",
    "inf": "android.speech.IRecognitionService",
    "mtd": "<android.speech.IRecognitionService: void startListening(android.content.Intent,android.speech.IRecognitionListener)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanCommissioningSession",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void sendToCommissioner(byte[])>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setBluetoothA2dpOn(boolean)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: int registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkMisc)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void form(android.net.lowpan.LowpanProvision)>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: void setStatus(android.print.PrintJobId,java.lang.CharSequence)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: boolean removeSharedAccountAsUser(android.accounts.Account,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isBondingInitiatedLocally(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void disconnectWifiDisplay()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getIntentFilterVerifications(java.lang.String)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: android.security.keymaster.OperationResult finish(android.os.IBinder,android.security.keymaster.KeymasterArguments,byte[],byte[])>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: android.media.AudioRoutesInfo startWatchingRoutes(android.media.IAudioRoutesObserver)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: android.telecom.TelecomAnalytics dumpCallAnalytics()>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void setListener(android.telephony.ims.aidl.IImsCallSessionListener)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.NfcFCardEmulation",
    "implCls": "android.nfc.INfcFCardEmulation",
    "inf": "android.nfc.INfcFCardEmulation",
    "mtd": "<android.nfc.INfcFCardEmulation: boolean disableNfcFForegroundService()>"
  },
  {
    "helperCls": "android.nfc.cardemulation.NfcFCardEmulation",
    "implCls": "android.nfc.INfcFCardEmulation",
    "inf": "android.nfc.INfcFCardEmulation",
    "mtd": "<android.nfc.INfcFCardEmulation: boolean disableNfcFForegroundService()>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: long getmtime(java.lang.String,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.nfc.cardemulation.CardEmulation",
    "implCls": "android.nfc.INfcCardEmulation",
    "inf": "android.nfc.INfcCardEmulation",
    "mtd": "<android.nfc.INfcCardEmulation: android.nfc.cardemulation.AidGroup getAidGroupForService(int,android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.CardEmulation",
    "implCls": "android.nfc.INfcCardEmulation",
    "inf": "android.nfc.INfcCardEmulation",
    "mtd": "<android.nfc.INfcCardEmulation: android.nfc.cardemulation.AidGroup getAidGroupForService(int,android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: int getManagedProfileBadge(int)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.VolumeInfo[] getVolumes(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.content.pm.ParceledListSlice retrievePreRebootSecurityLogs(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.hardware.location.GeofenceHardware",
    "implCls": "android.hardware.location.IGeofenceHardware",
    "inf": "android.hardware.location.IGeofenceHardware",
    "mtd": "<android.hardware.location.IGeofenceHardware: boolean removeGeofence(int,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean isPackageSuspendedForUser(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int updateOrRestartSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,int,int,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGattServer",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void clearServices(int)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.service.wallpaper.IWallpaperConnection",
    "inf": "android.service.wallpaper.IWallpaperConnection",
    "mtd": "<android.service.wallpaper.IWallpaperConnection: void engineShown(android.service.wallpaper.IWallpaperEngine)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void enableWifiConnectivityManager(boolean)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.app.timezone.RulesManager",
    "implCls": "com.android.server.timezone.RulesManagerService",
    "inf": "android.app.timezone.IRulesManager",
    "mtd": "<android.app.timezone.IRulesManager: int requestUninstall(byte[],android.app.timezone.ICallback)>"
  },
  {
    "helperCls": "android.app.SearchManager",
    "implCls": "com.android.server.search.SearchManagerService",
    "inf": "android.app.ISearchManager",
    "mtd": "<android.app.ISearchManager: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: void setSeedAccountData(int,java.lang.String,java.lang.String,android.os.PersistableBundle,boolean)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputContext",
    "inf": "com.android.internal.view.IInputContext",
    "mtd": "<com.android.internal.view.IInputContext: void finishComposingText()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: android.net.wifi.WifiActivityEnergyInfo reportActivityInfo()>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void dragRecipientExited(android.view.IWindow)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()>"
  },
  {
    "helperCls": "android.hardware.Camera",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int checkAudioOperation(int,int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.net.NetworkPolicyManager",
    "implCls": "com.android.server.net.NetworkPolicyManagerService",
    "inf": "android.net.INetworkPolicyManager",
    "mtd": "<android.net.INetworkPolicyManager: android.net.NetworkPolicy[] getNetworkPolicies(java.lang.String)>"
  },
  {
    "helperCls": "android.net.nsd.NsdManager",
    "implCls": "com.android.server.NsdService",
    "inf": "android.net.nsd.INsdManager",
    "mtd": "<android.net.nsd.INsdManager: void setEnabled(boolean)>"
  },
  {
    "helperCls": "android.media.midi.MidiManager",
    "implCls": "com.android.server.midi.MidiService",
    "inf": "android.media.midi.IMidiManager",
    "mtd": "<android.media.midi.IMidiManager: android.media.midi.MidiDeviceInfo[] getDevices()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void requestColorMode(int,int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.speech.SpeechRecognizer",
    "implCls": "android.speech.IRecognitionService",
    "inf": "android.speech.IRecognitionService",
    "mtd": "<android.speech.IRecognitionService: void stopListening(android.speech.IRecognitionListener)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean addPermission(android.content.pm.PermissionInfo)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: boolean isUserKeyUnlocked(int)>"
  },
  {
    "helperCls": "android.net.NetworkScoreManager",
    "implCls": "com.android.server.NetworkScoreService",
    "inf": "android.net.INetworkScoreService",
    "mtd": "<android.net.INetworkScoreService: java.util.List getAllValidScorers()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.Session",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: int getState()>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void conference(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetHost",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: void deleteAllHosts()>"
  },
  {
    "helperCls": "android.bluetooth.le.PeriodicAdvertisingManager",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>"
  },
  {
    "helperCls": "android.net.sip.SipSession",
    "implCls": "android.net.sip.ISipSession",
    "inf": "android.net.sip.ISipSession",
    "mtd": "<android.net.sip.ISipSession: void changeCall(java.lang.String,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.DiskInfo[] getDisks()>"
  },
  {
    "helperCls": "android.net.ip.IpClient",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void setInterfaceIpv6PrivacyExtensions(java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>"
  },
  {
    "helperCls": "android.se.omapi.Channel",
    "implCls": "android.se.omapi.ISecureElementChannel",
    "inf": "android.se.omapi.ISecureElementChannel",
    "mtd": "<android.se.omapi.ISecureElementChannel: boolean isClosed()>"
  },
  {
    "helperCls": "android.media.projection.MediaProjectionManager",
    "implCls": "com.android.server.media.projection.MediaProjectionManagerService$BinderService",
    "inf": "android.media.projection.IMediaProjectionManager",
    "mtd": "<android.media.projection.IMediaProjectionManager: void stopActiveProjection()>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps$PinItemRequest",
    "implCls": "android.content.pm.IPinItemRequest",
    "inf": "android.content.pm.IPinItemRequest",
    "mtd": "<android.content.pm.IPinItemRequest: android.content.pm.ShortcutInfo getShortcutInfo()>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: android.telecom.PhoneAccountHandle getDefaultOutgoingPhoneAccount(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void finishInput()>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId)>"
  },
  {
    "helperCls": "android.app.StatusBarManager",
    "implCls": "com.android.server.statusbar.StatusBarManagerService",
    "inf": "com.android.internal.statusbar.IStatusBarService",
    "mtd": "<com.android.internal.statusbar.IStatusBarService: void disable(int,android.os.IBinder,java.lang.String)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: int getAccountVisibility(android.accounts.Account,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.util.List getDisallowedSystemApps(android.content.ComponentName,int,java.lang.String)>"
  },
  {
    "helperCls": "android.telephony.ims.feature.MmTelFeature",
    "implCls": "android.telephony.ims.aidl.IImsMmTelFeature",
    "inf": "android.telephony.ims.aidl.IImsMmTelFeature",
    "mtd": "<android.telephony.ims.aidl.IImsMmTelFeature: void acknowledgeSmsReport(int,int,int)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: android.hardware.input.TouchCalibration getTouchCalibrationForInputDevice(java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: int getState()>"
  },
  {
    "helperCls": "android.provider.Settings$Secure",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.UiAutomationConnection",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: void freezeRotation(int)>"
  },
  {
    "helperCls": "android.app.usage.NetworkStatsManager",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: android.net.INetworkStatsSession openSessionForUsageStats(int,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int getPermissionFlags(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void turnOnProximitySensor()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: boolean getAudioRouteAllowed()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getMode()>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: android.content.IntentSender getShortcutConfigActivityIntent(java.lang.String,android.content.ComponentName,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: java.util.List getHardwareList()>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: boolean isLocationEnabledForUser(int)>"
  },
  {
    "helperCls": "android.database.BulkCursorToCursorAdaptor",
    "implCls": "android.database.IBulkCursor",
    "inf": "android.database.IBulkCursor",
    "mtd": "<android.database.IBulkCursor: android.os.Bundle respond(android.os.Bundle)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: int getCurrentTtyMode(java.lang.String)>"
  },
  {
    "helperCls": "android.app.usage.NetworkStats",
    "implCls": "android.net.INetworkStatsSession",
    "inf": "android.net.INetworkStatsSession",
    "mtd": "<android.net.INetworkStatsSession: android.net.NetworkStatsHistory getHistoryIntervalForUid(android.net.NetworkTemplate,int,int,int,int,long,long)>"
  },
  {
    "helperCls": "android.app.usage.NetworkStats",
    "implCls": "android.net.INetworkStatsSession",
    "inf": "android.net.INetworkStatsSession",
    "mtd": "<android.net.INetworkStatsSession: android.net.NetworkStatsHistory getHistoryIntervalForUid(android.net.NetworkTemplate,int,int,int,int,long,long)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: boolean isWallpaperBackupEligible(int,int)>"
  },
  {
    "helperCls": "android.hardware.Camera",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int checkAudioOperation(int,int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dp",
    "implCls": "android.bluetooth.IBluetoothA2dp",
    "inf": "android.bluetooth.IBluetoothA2dp",
    "mtd": "<android.bluetooth.IBluetoothA2dp: android.bluetooth.BluetoothDevice getActiveDevice()>"
  },
  {
    "helperCls": "android.net.ip.IpClient",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void setIPv6AddrGenMode(java.lang.String,int)>"
  },
  {
    "helperCls": "android.net.ip.IpClient",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void setIPv6AddrGenMode(java.lang.String,int)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: void addSharedAccountsFromParentUser(int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: void hideMySoftInput(android.os.IBinder,int)>"
  },
  {
    "helperCls": "android.os.health.SystemHealthManager",
    "implCls": "com.android.server.am.BatteryStatsService",
    "inf": "com.android.internal.app.IBatteryStats",
    "mtd": "<com.android.internal.app.IBatteryStats: android.os.health.HealthStatsParceler takeUidSnapshot(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.content.pm.ParceledListSlice retrieveSecurityLogs(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: int postEnroll(android.os.IBinder)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void finishSession(int,int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: java.lang.String getAlwaysOnVpnPackage(int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int updateOrRestartSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,int,int,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.app.trust.TrustManager",
    "implCls": "android.app.trust.ITrustManager",
    "inf": "android.app.trust.ITrustManager",
    "mtd": "<android.app.trust.ITrustManager: void reportUnlockAttempt(boolean,int)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: boolean enable()>"
  },
  {
    "helperCls": "android.app.SearchManager",
    "implCls": "com.android.server.search.SearchManagerService",
    "inf": "android.app.ISearchManager",
    "mtd": "<android.app.ISearchManager: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: void reportFullscreenMode(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: java.util.List getShortcutInputMethodsAndSubtypes()>"
  },
  {
    "helperCls": "android.os.UpdateLock",
    "implCls": "com.android.server.UpdateLockService",
    "inf": "android.os.IUpdateLock",
    "mtd": "<android.os.IUpdateLock: void acquireUpdateLock(android.os.IBinder,java.lang.String)>"
  },
  {
    "helperCls": "android.media.browse.MediaBrowser",
    "implCls": "android.service.media.IMediaBrowserService",
    "inf": "android.service.media.IMediaBrowserService",
    "mtd": "<android.service.media.IMediaBrowserService: void addSubscription(java.lang.String,android.os.IBinder,android.os.Bundle,android.service.media.IMediaBrowserServiceCallbacks)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: void unregisterAccountListener(java.lang.String[],java.lang.String)>"
  },
  {
    "helperCls": "android.service.quicksettings.TileService",
    "implCls": "android.service.quicksettings.IQSService",
    "inf": "android.service.quicksettings.IQSService",
    "mtd": "<android.service.quicksettings.IQSService: boolean isLocked()>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: java.util.List getUsers(boolean)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Session",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void selectTrack(android.os.IBinder,int,java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int updateOrRestartSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,int,int,boolean)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int updateOrRestartSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,int,int,boolean)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: java.util.List getInstalledAccessibilityServiceList(int)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: java.lang.String getPackageName()>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean shouldVibrate(int)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: android.os.IBinder getToken(android.os.IBinder)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Session",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void tune(android.os.IBinder,android.net.Uri,android.os.Bundle,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.app.UiAutomation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: android.view.WindowContentFrameStats getWindowContentFrameStats(int)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InputChannel)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void setAudioRoute(int,java.lang.String)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: boolean addOrUpdatePasspointConfiguration(android.net.wifi.hotspot2.PasspointConfiguration,java.lang.String)>"
  },
  {
    "helperCls": "android.os.health.SystemHealthManager",
    "implCls": "com.android.server.am.BatteryStatsService",
    "inf": "com.android.internal.app.IBatteryStats",
    "mtd": "<com.android.internal.app.IBatteryStats: android.os.health.HealthStatsParceler[] takeUidSnapshots(int[])>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void reconnect(java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.location.CountryDetector",
    "implCls": "com.android.server.CountryDetectorService",
    "inf": "android.location.ICountryDetector",
    "mtd": "<android.location.ICountryDetector: void removeCountryListener(android.location.ICountryListener)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.util.List getBindDeviceAdminTargetUsers(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: boolean captureFrame(java.lang.String,android.view.Surface,android.media.tv.TvStreamConfig,int)>"
  },
  {
    "helperCls": "android.hardware.Camera",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int checkAudioOperation(int,int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void updateInterfaceIpState(java.lang.String,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void finishInput()>"
  },
  {
    "helperCls": "android.app.UiAutomation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: void executeShellCommand(java.lang.String,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: int[] getInputDeviceIds()>"
  },
  {
    "helperCls": "android.net.wifi.RttManager",
    "implCls": "com.android.server.wifi.rtt.RttServiceImpl",
    "inf": "android.net.wifi.rtt.IWifiRttManager",
    "mtd": "<android.net.wifi.rtt.IWifiRttManager: void startRanging(android.os.IBinder,java.lang.String,android.os.WorkSource,android.net.wifi.rtt.RangingRequest,android.net.wifi.rtt.IRttCallback)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.lang.String getDeviceOwnerName()>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetHost",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: android.os.Bundle getAppWidgetOptions(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.os.PersistableBundle getTransferOwnershipBundle()>"
  },
  {
    "helperCls": "android.app.StatsManager",
    "implCls": "android.os.IStatsManager",
    "inf": "android.os.IStatsManager",
    "mtd": "<android.os.IStatsManager: void setBroadcastSubscriber(long,long,android.os.IBinder,java.lang.String)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: boolean isInCall(java.lang.String)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.util.MergedConfiguration,android.view.Surface)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void merge()>"
  },
  {
    "helperCls": "android.content.pm.CrossProfileApps",
    "implCls": "com.android.server.pm.CrossProfileAppsServiceImpl",
    "inf": "android.content.pm.ICrossProfileApps",
    "mtd": "<android.content.pm.ICrossProfileApps: java.util.List getTargetUserProfiles(java.lang.String)>"
  },
  {
    "helperCls": "android.app.KeyguardManager",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.CardEmulation",
    "implCls": "android.nfc.INfcCardEmulation",
    "inf": "android.nfc.INfcCardEmulation",
    "mtd": "<android.nfc.INfcCardEmulation: boolean isDefaultServiceForAid(int,android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.CardEmulation",
    "implCls": "android.nfc.INfcCardEmulation",
    "inf": "android.nfc.INfcCardEmulation",
    "mtd": "<android.nfc.INfcCardEmulation: boolean isDefaultServiceForAid(int,android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: java.lang.String[] setPackagesSuspendedAsUser(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: void registerPhoneAccount(android.telecom.PhoneAccount)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void unregisterClient(android.media.IMediaRouterClient)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.hardware.camera2.impl.ICameraDeviceUserWrapper",
    "implCls": "android.hardware.camera2.ICameraDeviceUser",
    "inf": "android.hardware.camera2.ICameraDeviceUser",
    "mtd": "<android.hardware.camera2.ICameraDeviceUser: void finalizeOutputConfigurations(int,android.hardware.camera2.params.OutputConfiguration)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Session",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void setVolume(android.os.IBinder,float,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: java.lang.String[] getTetheringErroredIfaces()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionHandoverFailed(int,int,android.telephony.ims.ImsReasonInfo)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getEndUserSessionMessage(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection$VideoProvider",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void requestCallDataUsage()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGattServer",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void unregisterServer(int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: java.util.List getEnabledNotificationListenerPackages()>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.content.pm.UserInfo getUserInfo(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.util.List getDelegatePackages(android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.app.UiAutomationConnection",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void grantRuntimePermission(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: void setVolumeTo(java.lang.String,android.media.session.ISessionControllerCallback,int,int)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void hide()>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean outOfMemory(android.view.IWindow)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: android.media.MediaRouterClientState getState(android.media.IMediaRouterClient)>"
  },
  {
    "helperCls": "android.app.timezone.RulesManager",
    "implCls": "com.android.server.timezone.RulesManagerService",
    "inf": "android.app.timezone.IRulesManager",
    "mtd": "<android.app.timezone.IRulesManager: android.app.timezone.RulesState getRulesState()>"
  },
  {
    "helperCls": "android.os.SystemVibrator",
    "implCls": "com.android.server.VibratorService",
    "inf": "android.os.IVibratorService",
    "mtd": "<android.os.IVibratorService: void vibrate(int,java.lang.String,android.os.VibrationEffect,int,android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>"
  },
  {
    "helperCls": "android.net.wifi.aware.WifiAwareManager",
    "implCls": "com.android.server.wifi.aware.WifiAwareServiceImpl",
    "inf": "android.net.wifi.aware.IWifiAwareManager",
    "mtd": "<android.net.wifi.aware.IWifiAwareManager: android.net.wifi.aware.Characteristics getCharacteristics()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean hasUidSigningCertificate(int,byte[],int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[],int,int)>"
  },
  {
    "helperCls": "android.app.AlarmManager",
    "implCls": "android.app.IAlarmManager",
    "inf": "android.app.IAlarmManager",
    "mtd": "<android.app.IAlarmManager: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: int getPackageUid(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMap",
    "implCls": "android.bluetooth.IBluetoothMap",
    "inf": "android.bluetooth.IBluetoothMap",
    "mtd": "<android.bluetooth.IBluetoothMap: boolean isConnected(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.location.Geocoder",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHearingAid",
    "implCls": "android.bluetooth.IBluetoothHearingAid",
    "inf": "android.bluetooth.IBluetoothHearingAid",
    "mtd": "<android.bluetooth.IBluetoothHearingAid: int getDeviceSide(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: boolean isProviderEnabledForUser(java.lang.String,int)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionService",
    "implCls": "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "inf": "com.android.internal.app.IVoiceInteractionManagerService",
    "mtd": "<com.android.internal.app.IVoiceInteractionManagerService: int stopRecognition(android.service.voice.IVoiceInteractionService,int,android.hardware.soundtrigger.IRecognitionStatusCallback)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.media.session.MediaSession",
    "implCls": "android.media.session.ISession",
    "inf": "android.media.session.ISession",
    "mtd": "<android.media.session.ISession: void setCurrentVolume(int)>"
  },
  {
    "helperCls": "android.app.StatusBarManager",
    "implCls": "com.android.server.statusbar.StatusBarManagerService",
    "inf": "com.android.internal.statusbar.IStatusBarService",
    "mtd": "<com.android.internal.statusbar.IStatusBarService: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.app.UiAutomationConnection",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: int getDefaultDisplayRotation()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfoVersioned(android.content.pm.VersionedPackage,int,int)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void pullExternalCall(java.lang.String)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: android.content.pm.ParceledListSlice getNotificationChannels(java.lang.String)>"
  },
  {
    "helperCls": "android.net.sip.SipManager",
    "implCls": "com.android.server.sip.SipService",
    "inf": "android.net.sip.ISipService",
    "mtd": "<android.net.sip.ISipService: android.net.sip.ISipSession getPendingSession(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: void setNotificationListenerAccessGrantedForUser(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void unregisterSoftApCallback(int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void verifyNfcPermission()>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setMode(int,android.os.IBinder,java.lang.String)>"
  },
  {
    "helperCls": "android.media.midi.MidiDevice",
    "implCls": "com.android.server.midi.MidiService",
    "inf": "android.media.midi.IMidiManager",
    "mtd": "<android.media.midi.IMidiManager: void closeDevice(android.os.IBinder,android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean canHaveRestrictedProfile(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMap",
    "implCls": "android.bluetooth.IBluetoothMap",
    "inf": "android.bluetooth.IBluetoothMap",
    "mtd": "<android.bluetooth.IBluetoothMap: int getPriority(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: int getWallpaperIdForUser(int,int)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: int getRuleInstanceCount(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: void setWallpaperComponentChecked(android.content.ComponentName,java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: android.bluetooth.IBluetoothSocketManager getSocketManager()>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.hardware.display.BrightnessConfiguration getDefaultBrightnessConfiguration()>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: void clearSeedAccountData()>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void finishSelf(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.service.dreams.DreamService",
    "implCls": "com.android.server.dreams.DreamManagerService$BinderService",
    "inf": "android.service.dreams.IDreamManager",
    "mtd": "<android.service.dreams.IDreamManager: void finishSelf(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: boolean isNetworkActive()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void startSubscriptionProvisioning(android.net.wifi.hotspot2.OsuProvider,android.net.wifi.hotspot2.IProvisioningCallback)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getStreamMaxVolume(int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.content.pm.UserInfo getUserInfo(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMapClient",
    "implCls": "android.bluetooth.IBluetoothMapClient",
    "inf": "android.bluetooth.IBluetoothMapClient",
    "mtd": "<android.bluetooth.IBluetoothMapClient: boolean disconnect(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.accessibilityservice.FingerprintGestureController",
    "implCls": "android.accessibilityservice.IAccessibilityServiceConnection",
    "inf": "android.accessibilityservice.IAccessibilityServiceConnection",
    "mtd": "<android.accessibilityservice.IAccessibilityServiceConnection: boolean isFingerprintGestureDetectionAvailable()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: boolean isDualBandSupported()>"
  },
  {
    "helperCls": "android.net.sip.SipManager",
    "implCls": "com.android.server.sip.SipService",
    "inf": "android.net.sip.ISipService",
    "mtd": "<android.net.sip.ISipService: boolean isRegistered(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isBluetoothA2dpOn()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void finishInput()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InputChannel)>"
  },
  {
    "helperCls": "android.content.ClipboardManager",
    "implCls": "com.android.server.clipboard.ClipboardService$ClipboardImpl",
    "inf": "android.content.IClipboard",
    "mtd": "<android.content.IClipboard: void removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean switchUser(android.content.ComponentName,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void finishInput()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>"
  },
  {
    "helperCls": "android.hardware.camera2.impl.ICameraDeviceUserWrapper",
    "implCls": "android.hardware.camera2.ICameraDeviceUser",
    "inf": "android.hardware.camera2.ICameraDeviceUser",
    "mtd": "<android.hardware.camera2.ICameraDeviceUser: android.hardware.camera2.impl.CameraMetadataNative createDefaultRequest(int)>"
  },
  {
    "helperCls": "android.hardware.SerialManager",
    "implCls": "com.android.server.SerialService",
    "inf": "android.hardware.ISerialManager",
    "mtd": "<android.hardware.ISerialManager: android.os.ParcelFileDescriptor openSerialPort(java.lang.String)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Session",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void sendAppPrivateCommand(android.os.IBinder,java.lang.String,android.os.Bundle,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: android.os.storage.VolumeInfo[] getVolumes(int)>"
  },
  {
    "helperCls": "android.content.SyncContext",
    "implCls": "android.content.ISyncContext",
    "inf": "android.content.ISyncContext",
    "mtd": "<android.content.ISyncContext: void sendHeartbeat()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothManager",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.net.ip.InterfaceController",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void setInterfaceIpv6PrivacyExtensions(java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.print.PrinterDiscoverySession",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void finishSession(int,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.util.MergedConfiguration,android.view.Surface)>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId)>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: boolean setPrintJobState(android.print.PrintJobId,int,java.lang.String)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: boolean hasKeys(int,int,int[],boolean[])>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionMergeStarted(com.android.ims.internal.IImsCallSession,android.telephony.ims.ImsCallProfile)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: int getState()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void forceUpdateUserSetupComplete()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getCurrentFailedPasswordAttempts(int,boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int checkProvisioningPreCondition(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.net.ip.IpClient",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void clearInterfaceAddresses(java.lang.String)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void finishInput()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void playDtmfTone(java.lang.String,char)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void hold(android.telephony.ims.ImsStreamMediaProfile)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dp",
    "implCls": "android.bluetooth.IBluetoothA2dp",
    "inf": "android.bluetooth.IBluetoothA2dp",
    "mtd": "<android.bluetooth.IBluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.net.wifi.rtt.WifiRttManager",
    "implCls": "com.android.server.wifi.rtt.RttServiceImpl",
    "inf": "android.net.wifi.rtt.IWifiRttManager",
    "mtd": "<android.net.wifi.rtt.IWifiRttManager: boolean isAvailable()>"
  },
  {
    "helperCls": "android.database.BulkCursorToCursorAdaptor",
    "implCls": "android.database.IBulkCursor",
    "inf": "android.database.IBulkCursor",
    "mtd": "<android.database.IBulkCursor: void close()>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Session",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void createOverlayView(android.os.IBinder,android.os.IBinder,android.graphics.Rect,int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: int getState()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getStreamVolume(int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.graphics.Bitmap getInstantAppIcon(java.lang.String,int)>"
  },
  {
    "helperCls": "android.os.PowerManager",
    "implCls": "com.android.server.power.PowerManagerService$BinderService",
    "inf": "android.os.IPowerManager",
    "mtd": "<android.os.IPowerManager: boolean isDeviceIdleMode()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getUserProvisioningState()>"
  },
  {
    "helperCls": "android.view.WindowId",
    "implCls": "android.view.IWindowId",
    "inf": "android.view.IWindowId",
    "mtd": "<android.view.IWindowId: boolean isFocused()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dp",
    "implCls": "android.bluetooth.IBluetoothA2dp",
    "inf": "android.bluetooth.IBluetoothA2dp",
    "mtd": "<android.bluetooth.IBluetoothA2dp: int getOptionalCodecsEnabled(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void registerCallback(android.hardware.display.IDisplayManagerCallback)>"
  },
  {
    "helperCls": "android.app.usage.NetworkStats",
    "implCls": "android.net.INetworkStatsSession",
    "inf": "android.net.INetworkStatsSession",
    "mtd": "<android.net.INetworkStatsSession: android.net.NetworkStats getSummaryForAllUid(android.net.NetworkTemplate,long,long,boolean)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: android.content.res.Configuration getConfiguration()>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: java.lang.String getProperty(java.lang.String)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: void clearAccounts(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void finishSession(int,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void uninstallPackageWithActiveAdmins(java.lang.String)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: void createNotificationChannelGroups(java.lang.String,android.content.pm.ParceledListSlice)>"
  },
  {
    "helperCls": "android.content.ClipboardManager",
    "implCls": "com.android.server.clipboard.ClipboardService$ClipboardImpl",
    "inf": "android.content.IClipboard",
    "mtd": "<android.content.IClipboard: void setPrimaryClip(android.content.ClipData,java.lang.String)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void hide()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dp",
    "implCls": "android.bluetooth.IBluetoothA2dp",
    "inf": "android.bluetooth.IBluetoothA2dp",
    "mtd": "<android.bluetooth.IBluetoothA2dp: void enableOptionalCodecs(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isSpeakerphoneOn()>"
  },
  {
    "helperCls": "android.app.UiAutomationConnection",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: void freezeRotation(int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int noteOperation(int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: void setUserSelectedOutgoingPhoneAccount(android.telecom.PhoneAccountHandle)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: int getState()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.util.List getPermittedInputMethods(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isLeCodedPhySupported()>"
  },
  {
    "helperCls": "android.net.IpSecManager",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: android.net.IpSecUdpEncapResponse openUdpEncapsulationSocket(int,android.os.IBinder)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void updateSession(int,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,int,int)>"
  },
  {
    "helperCls": "android.os.PowerManager",
    "implCls": "com.android.server.power.PowerManagerService$BinderService",
    "inf": "android.os.IPowerManager",
    "mtd": "<android.os.IPowerManager: android.os.PowerSaveState getPowerSaveState(int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>"
  },
  {
    "helperCls": "android.hardware.camera2.impl.ICameraDeviceUserWrapper",
    "implCls": "android.hardware.camera2.ICameraDeviceUser",
    "inf": "android.hardware.camera2.ICameraDeviceUser",
    "mtd": "<android.hardware.camera2.ICameraDeviceUser: void tearDown(int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>"
  },
  {
    "helperCls": "android.telecom.VideoCallImpl",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void removeVideoCallback(android.os.IBinder)>"
  },
  {
    "helperCls": "android.content.pm.ShortcutManager",
    "implCls": "com.android.server.pm.ShortcutService",
    "inf": "android.content.pm.IShortcutService",
    "mtd": "<android.content.pm.IShortcutService: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: void setUserIcon(int,android.graphics.Bitmap)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setBluetoothA2dpOn(boolean)>"
  },
  {
    "helperCls": "android.app.backup.BackupManager",
    "implCls": "com.android.server.backup.Trampoline",
    "inf": "android.app.backup.IBackupManager",
    "mtd": "<android.app.backup.IBackupManager: void dataChanged(java.lang.String)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: void stopLocalOnlyHotspot()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void finishInput()>"
  },
  {
    "helperCls": "android.os.UpdateEngine",
    "implCls": "android.os.IUpdateEngine",
    "inf": "android.os.IUpdateEngine",
    "mtd": "<android.os.IUpdateEngine: void resume()>"
  },
  {
    "helperCls": "android.net.sip.SipManager",
    "implCls": "com.android.server.sip.SipService",
    "inf": "android.net.sip.ISipService",
    "mtd": "<android.net.sip.ISipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.ProxyInfo getProxyForNetwork(android.net.Network)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSessionListener",
    "implCls": "android.telephony.ims.aidl.IImsCallSessionListener",
    "inf": "android.telephony.ims.aidl.IImsCallSessionListener",
    "mtd": "<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionMayHandover(int,int)>"
  },
  {
    "helperCls": "android.hardware.location.GeofenceHardwareImpl",
    "implCls": "android.location.IFusedGeofenceHardware",
    "inf": "android.location.IFusedGeofenceHardware",
    "mtd": "<android.location.IFusedGeofenceHardware: boolean isSupported()>"
  },
  {
    "helperCls": "android.net.wifi.p2p.WifiP2pManager",
    "implCls": "com.android.server.wifi.p2p.WifiP2pServiceImpl",
    "inf": "android.net.wifi.p2p.IWifiP2pManager",
    "mtd": "<android.net.wifi.p2p.IWifiP2pManager: android.os.Messenger getMessenger(android.os.IBinder)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int getSupportedFeatures()>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputContext",
    "inf": "com.android.internal.view.IInputContext",
    "mtd": "<com.android.internal.view.IInputContext: void finishComposingText()>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: int getTvInputState(java.lang.String,int)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: boolean isSingleSessionActive(int)>"
  },
  {
    "helperCls": "android.os.PowerManager",
    "implCls": "com.android.server.power.PowerManagerService$BinderService",
    "inf": "android.os.IPowerManager",
    "mtd": "<android.os.IPowerManager: void boostScreenBrightness(long)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void updateTvInputInfo(android.media.tv.TvInputInfo,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothSap",
    "implCls": "android.bluetooth.IBluetoothSap",
    "inf": "android.bluetooth.IBluetoothSap",
    "mtd": "<android.bluetooth.IBluetoothSap: int getConnectionState(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void updateCursorAnchorInfo(android.view.inputmethod.CursorAnchorInfo)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: void clearPassword(android.accounts.Account)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.LinkProperties getLinkPropertiesForType(int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: android.os.ParcelFileDescriptor getUserIcon(int)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: int getRatingType()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.telecom.RemoteConnection$VideoProvider",
    "implCls": "com.android.internal.telecom.IVideoProvider",
    "inf": "com.android.internal.telecom.IVideoProvider",
    "mtd": "<com.android.internal.telecom.IVideoProvider: void setPauseImage(android.net.Uri)>"
  },
  {
    "helperCls": "android.app.AlarmManager",
    "implCls": "android.app.IAlarmManager",
    "inf": "android.app.IAlarmManager",
    "mtd": "<android.app.IAlarmManager: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getName()>"
  },
  {
    "helperCls": "android.view.WindowManagerImpl",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: android.graphics.Region getCurrentImeTouchRegion()>"
  },
  {
    "helperCls": "android.net.ip.IpClient",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void enableIpv6(java.lang.String)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int addClient(android.view.autofill.IAutoFillManagerClient,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getState()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>"
  },
  {
    "helperCls": "android.speech.RecognitionService$Callback",
    "implCls": "android.speech.IRecognitionListener",
    "inf": "android.speech.IRecognitionListener",
    "mtd": "<android.speech.IRecognitionListener: void onReadyForSpeech(android.os.Bundle)>"
  },
  {
    "helperCls": "android.hardware.location.GeofenceHardwareImpl",
    "implCls": "android.location.IFusedGeofenceHardware",
    "inf": "android.location.IFusedGeofenceHardware",
    "mtd": "<android.location.IFusedGeofenceHardware: boolean isSupported()>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.telephony.ims.feature.MmTelFeature",
    "implCls": "android.telephony.ims.aidl.IImsMmTelFeature",
    "inf": "android.telephony.ims.aidl.IImsMmTelFeature",
    "mtd": "<android.telephony.ims.aidl.IImsMmTelFeature: void onSmsReady()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: void setAudioRouteAllowed(android.bluetooth.BluetoothDevice,boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: boolean switchToNextInputMethod(android.os.IBinder,boolean)>"
  },
  {
    "helperCls": "android.app.usage.NetworkStatsManager",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: android.net.DataUsageRequest registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.JobSchedulerImpl",
    "implCls": "com.android.server.job.JobSchedulerService$JobSchedulerStub",
    "inf": "android.app.job.IJobScheduler",
    "mtd": "<android.app.job.IJobScheduler: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>"
  },
  {
    "helperCls": "android.net.TrafficStats",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: int getConnectionState(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadset",
    "implCls": "android.bluetooth.IBluetoothHeadset",
    "inf": "android.bluetooth.IBluetoothHeadset",
    "mtd": "<android.bluetooth.IBluetoothHeadset: void setAudioRouteAllowed(boolean)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void setAppCallback(android.nfc.IAppCallback)>"
  },
  {
    "helperCls": "android.hardware.hdmi.HdmiControlManager",
    "implCls": "com.android.server.hdmi.HdmiControlService$BinderService",
    "inf": "android.hardware.hdmi.IHdmiControlService",
    "mtd": "<android.hardware.hdmi.IHdmiControlService: int[] getSupportedTypes()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void setUpdateAvailable(java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void postDialContinue(java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.hardware.fingerprint.FingerprintManager",
    "implCls": "com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper",
    "inf": "android.hardware.fingerprint.IFingerprintService",
    "mtd": "<android.hardware.fingerprint.IFingerprintService: void resetTimeout(byte[])>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: void startNattKeepalive(android.net.Network,int,android.os.Messenger,android.os.IBinder,java.lang.String,int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isResetPasswordTokenActive(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.net.wifi.aware.WifiAwareManager",
    "implCls": "com.android.server.wifi.aware.WifiAwareServiceImpl",
    "inf": "android.net.wifi.aware.IWifiAwareManager",
    "mtd": "<android.net.wifi.aware.IWifiAwareManager: void publish(java.lang.String,int,android.net.wifi.aware.PublishConfig,android.net.wifi.aware.IWifiAwareDiscoverySessionCallback)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setUserRestriction(android.content.ComponentName,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: void setUserEnabled(int)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void sendRttMessage(java.lang.String)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: void pinShortcuts(java.lang.String,java.lang.String,java.util.List,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: android.content.res.Configuration getConfiguration()>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: android.content.res.Configuration getConfiguration()>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int clear_uid(long)>"
  },
  {
    "helperCls": "android.app.UiAutomationConnection",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: void unregisterUiTestAutomationService(android.accessibilityservice.IAccessibilityServiceClient)>"
  },
  {
    "helperCls": "android.media.session.MediaSession",
    "implCls": "android.media.session.ISession",
    "inf": "android.media.session.ISession",
    "mtd": "<android.media.session.ISession: void destroy()>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean isManagedProfile(int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean isManagedProfile(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.content.ComponentName getDeviceOwnerComponent(boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isOffloadedScanBatchingSupported()>"
  },
  {
    "helperCls": "android.telecom.RemoteConference",
    "implCls": "com.android.internal.telecom.IConnectionService",
    "inf": "com.android.internal.telecom.IConnectionService",
    "mtd": "<com.android.internal.telecom.IConnectionService: void playDtmfTone(java.lang.String,char,android.telecom.Logging.Session$Info)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothMap",
    "implCls": "android.bluetooth.IBluetoothMap",
    "inf": "android.bluetooth.IBluetoothMap",
    "mtd": "<android.bluetooth.IBluetoothMap: int getState()>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void resizeVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,int,int,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean isInstantApp(java.lang.String,int)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller",
    "implCls": "android.content.pm.IPackageInstaller",
    "inf": "android.content.pm.IPackageInstaller",
    "mtd": "<android.content.pm.IPackageInstaller: void abandonSession(int)>"
  },
  {
    "helperCls": "android.net.ip.InterfaceController",
    "implCls": "android.net.INetd",
    "inf": "android.net.INetd",
    "mtd": "<android.net.INetd: void interfaceAddAddress(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidHost",
    "implCls": "android.bluetooth.IBluetoothHidHost",
    "inf": "android.bluetooth.IBluetoothHidHost",
    "mtd": "<android.bluetooth.IBluetoothHidHost: boolean getProtocolMode(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: android.content.res.Configuration getConfiguration()>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isValidRingerMode(int)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InputChannel)>"
  },
  {
    "helperCls": "android.net.IpSecManager$UdpEncapsulationSocket",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: void closeUdpEncapsulationSocket(int)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.service.wallpaper.IWallpaperConnection",
    "inf": "android.service.wallpaper.IWallpaperConnection",
    "mtd": "<android.service.wallpaper.IWallpaperConnection: void engineShown(android.service.wallpaper.IWallpaperEngine)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: int[] getInputDeviceIds()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetManager",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>"
  },
  {
    "helperCls": "android.telephony.ims.feature.MmTelFeature",
    "implCls": "android.telephony.ims.aidl.IImsMmTelFeature",
    "inf": "android.telephony.ims.aidl.IImsMmTelFeature",
    "mtd": "<android.telephony.ims.aidl.IImsMmTelFeature: void acknowledgeSms(int,int,int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: long getRequiredStrongAuthTimeout(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: java.util.List getDevicesMatchingConnectionStates(int[])>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void setHarmfulAppWarning(java.lang.String,java.lang.CharSequence,int)>"
  },
  {
    "helperCls": "android.bluetooth.le.PeriodicAdvertisingManager",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void clearPackagePersistentPreferredActivities(android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.os.RecoverySystem",
    "implCls": "com.android.server.RecoverySystemService$BinderService",
    "inf": "android.os.IRecoverySystem",
    "mtd": "<android.os.IRecoverySystem: boolean uncrypt(java.lang.String,android.os.IRecoverySystemProgressListener)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: void updateSession(int,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,int,int)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputContentInfo",
    "implCls": "com.android.internal.inputmethod.IInputContentUriToken",
    "inf": "com.android.internal.inputmethod.IInputContentUriToken",
    "mtd": "<com.android.internal.inputmethod.IInputContentUriToken: void take()>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int del(java.lang.String,int)>"
  },
  {
    "helperCls": "android.os.PowerManager",
    "implCls": "com.android.server.power.PowerManagerService$BinderService",
    "inf": "android.os.IPowerManager",
    "mtd": "<android.os.IPowerManager: void goToSleep(long,int,int)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.NfcFCardEmulation",
    "implCls": "android.nfc.INfcFCardEmulation",
    "inf": "android.nfc.INfcFCardEmulation",
    "mtd": "<android.nfc.INfcFCardEmulation: boolean enableNfcFForegroundService(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.NfcFCardEmulation",
    "implCls": "android.nfc.INfcFCardEmulation",
    "inf": "android.nfc.INfcFCardEmulation",
    "mtd": "<android.nfc.INfcFCardEmulation: boolean enableNfcFForegroundService(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean outOfMemory(android.view.IWindow)>"
  },
  {
    "helperCls": "android.app.AlarmManager",
    "implCls": "android.app.IAlarmManager",
    "inf": "android.app.IAlarmManager",
    "mtd": "<android.app.IAlarmManager: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: int getDiscoverableTimeout()>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: android.net.wifi.WifiConfiguration getMatchingWifiConfig(android.net.wifi.ScanResult)>"
  },
  {
    "helperCls": "android.hardware.usb.UsbManager",
    "implCls": "com.android.server.usb.UsbService",
    "inf": "android.hardware.usb.IUsbManager",
    "mtd": "<android.hardware.usb.IUsbManager: android.hardware.usb.UsbPort[] getPorts()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: void setPasswordQuality(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: boolean disconnectAudio(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.service.wallpaper.IWallpaperConnection",
    "inf": "android.service.wallpaper.IWallpaperConnection",
    "mtd": "<android.service.wallpaper.IWallpaperConnection: void engineShown(android.service.wallpaper.IWallpaperEngine)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Session",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void dispatchSurfaceChanged(android.os.IBinder,int,int,int,int)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getStreamMinVolume(int)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.hardware.display.Curve getMinimumBrightnessCurve()>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: void unregisterGnssStatusCallback(android.location.IGnssStatusListener)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dp",
    "implCls": "android.bluetooth.IBluetoothA2dp",
    "inf": "android.bluetooth.IBluetoothA2dp",
    "mtd": "<android.bluetooth.IBluetoothA2dp: int getPriority(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void registerClient(android.os.ParcelUuid,android.bluetooth.IBluetoothGattCallback)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: android.content.pm.StringParceledListSlice getOwnerInstalledCaCerts(android.os.UserHandle)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int startLocalOnlyHotspot(android.os.Messenger,android.os.IBinder,java.lang.String)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkInfo getActiveNetworkInfoForUid(int,boolean)>"
  },
  {
    "helperCls": "android.app.VrManager",
    "implCls": "android.service.vr.IVrManager",
    "inf": "android.service.vr.IVrManager",
    "mtd": "<android.service.vr.IVrManager: boolean getVrModeState()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: boolean isEnabled()>"
  },
  {
    "helperCls": "android.hardware.Camera",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int checkAudioOperation(int,int,int,java.lang.String)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean removeKeyPair(android.content.ComponentName,java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ActivityOptions",
    "implCls": "android.os.IRemoteCallback",
    "inf": "android.os.IRemoteCallback",
    "mtd": "<android.os.IRemoteCallback: void sendResult(android.os.Bundle)>"
  },
  {
    "helperCls": "android.app.ActivityOptions",
    "implCls": "android.os.IRemoteCallback",
    "inf": "android.os.IRemoteCallback",
    "mtd": "<android.os.IRemoteCallback: void sendResult(android.os.Bundle)>"
  },
  {
    "helperCls": "android.app.ActivityOptions",
    "implCls": "android.os.IRemoteCallback",
    "inf": "android.os.IRemoteCallback",
    "mtd": "<android.os.IRemoteCallback: void sendResult(android.os.Bundle)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.ProxyInfo getGlobalProxy()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void unregisterPlaybackCallback(android.media.IPlaybackConfigDispatcher)>"
  },
  {
    "helperCls": "android.os.ServiceManager",
    "implCls": "android.os.IServiceManager",
    "inf": "android.os.IServiceManager",
    "mtd": "<android.os.IServiceManager: android.os.IBinder getService(java.lang.String)>"
  },
  {
    "helperCls": "android.app.usage.NetworkStatsManager",
    "implCls": "com.android.server.net.NetworkStatsService",
    "inf": "android.net.INetworkStatsService",
    "mtd": "<android.net.INetworkStatsService: android.net.INetworkStatsSession openSessionForUsageStats(int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isCurrentInputMethodSetByOwner()>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void createSession(android.media.tv.ITvInputClient,java.lang.String,boolean,int,int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGattServer",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void serverDisconnect(int,java.lang.String)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void handleBluetoothA2dpDeviceConfigChange(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.os.BatteryManager",
    "implCls": "android.os.IBatteryPropertiesRegistrar",
    "inf": "android.os.IBatteryPropertiesRegistrar",
    "mtd": "<android.os.IBatteryPropertiesRegistrar: int getProperty(int,android.os.BatteryProperty)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: boolean isSystemConditionProviderEnabled(java.lang.String)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: java.util.List getEnabledAccessibilityServiceList(int,int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeScanner",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: int getState()>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetHost",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: void stopListening(java.lang.String,int)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "android.service.voice.IVoiceInteractionSession",
    "inf": "android.service.voice.IVoiceInteractionSession",
    "mtd": "<android.service.voice.IVoiceInteractionSession: void hide()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothPan",
    "implCls": "android.bluetooth.IBluetoothPan",
    "inf": "android.bluetooth.IBluetoothPan",
    "mtd": "<android.bluetooth.IBluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.net.IpSecManager",
    "implCls": "com.android.server.IpSecService",
    "inf": "android.net.IIpSecService",
    "mtd": "<android.net.IIpSecService: android.net.IpSecSpiResponse allocateSecurityParameterIndex(java.lang.String,int,android.os.IBinder)>"
  },
  {
    "helperCls": "android.provider.Settings$Secure",
    "implCls": "com.android.server.locksettings.LockSettingsService",
    "inf": "com.android.internal.widget.ILockSettings",
    "mtd": "<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: long getLastNetworkLogRetrievalTime()>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setBluetoothA2dpOn(boolean)>"
  },
  {
    "helperCls": "android.net.NetworkWatchlistManager",
    "implCls": "com.android.server.net.watchlist.NetworkWatchlistService",
    "inf": "com.android.internal.net.INetworkWatchlistManager",
    "mtd": "<com.android.internal.net.INetworkWatchlistManager: void reportWatchlistIfNecessary()>"
  },
  {
    "helperCls": "android.telecom.TelecomManager",
    "implCls": "com.android.internal.telecom.ITelecomService",
    "inf": "com.android.internal.telecom.ITelecomService",
    "mtd": "<com.android.internal.telecom.ITelecomService: java.util.List getAllPhoneAccounts()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: java.lang.String getAddress()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.media.session.MediaSession",
    "implCls": "android.media.session.ISession",
    "inf": "android.media.session.ISession",
    "mtd": "<android.media.session.ISession: void sendEvent(java.lang.String,android.os.Bundle)>"
  },
  {
    "helperCls": "android.hardware.input.InputManager",
    "implCls": "com.android.server.input.InputManagerService",
    "inf": "android.hardware.input.IInputManager",
    "mtd": "<android.hardware.input.IInputManager: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.CardEmulation",
    "implCls": "android.nfc.INfcCardEmulation",
    "inf": "android.nfc.INfcCardEmulation",
    "mtd": "<android.nfc.INfcCardEmulation: boolean setDefaultServiceForCategory(int,android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.nfc.cardemulation.CardEmulation",
    "implCls": "android.nfc.INfcCardEmulation",
    "inf": "android.nfc.INfcCardEmulation",
    "mtd": "<android.nfc.INfcCardEmulation: boolean setDefaultServiceForCategory(int,android.content.ComponentName,java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHidDevice",
    "implCls": "android.bluetooth.IBluetoothHidDevice",
    "inf": "android.bluetooth.IBluetoothHidDevice",
    "mtd": "<android.bluetooth.IBluetoothHidDevice: java.util.List getDevicesMatchingConnectionStates(int[])>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void dragRecipientEntered(android.view.IWindow)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps$PinItemRequest",
    "implCls": "android.content.pm.IPinItemRequest",
    "inf": "android.content.pm.IPinItemRequest",
    "mtd": "<android.content.pm.IPinItemRequest: android.os.Bundle getExtras()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void refreshDevice(int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.ActivityThread",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: void notifyPackageUse(java.lang.String,int)>"
  },
  {
    "helperCls": "android.hardware.camera2.impl.ICameraDeviceUserWrapper",
    "implCls": "android.hardware.camera2.ICameraDeviceUser",
    "inf": "android.hardware.camera2.ICameraDeviceUser",
    "mtd": "<android.hardware.camera2.ICameraDeviceUser: android.hardware.camera2.utils.SubmitInfo submitRequest(android.hardware.camera2.CaptureRequest,boolean)>"
  },
  {
    "helperCls": "android.net.wifi.rtt.WifiRttManager",
    "implCls": "com.android.server.wifi.rtt.RttServiceImpl",
    "inf": "android.net.wifi.rtt.IWifiRttManager",
    "mtd": "<android.net.wifi.rtt.IWifiRttManager: void cancelRanging(android.os.WorkSource)>"
  },
  {
    "helperCls": "android.content.pm.PackageInstaller$Session",
    "implCls": "android.content.pm.IPackageInstallerSession",
    "inf": "android.content.pm.IPackageInstallerSession",
    "mtd": "<android.content.pm.IPackageInstallerSession: java.lang.String[] getNames()>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.util.MergedConfiguration,android.view.Surface)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothDevice",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: boolean isEnabled()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: long getLastBugReportRequestTime()>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: boolean isPackageDeviceAdminOnAnyUser(java.lang.String)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.media.tv.TvInputManager$Session",
    "implCls": "com.android.server.tv.TvInputManagerService$BinderService",
    "inf": "android.media.tv.ITvInputManager",
    "mtd": "<android.media.tv.ITvInputManager: void startRecording(android.os.IBinder,android.net.Uri,int)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionService",
    "implCls": "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "inf": "com.android.internal.app.IVoiceInteractionManagerService",
    "mtd": "<com.android.internal.app.IVoiceInteractionManagerService: void showSession(android.service.voice.IVoiceInteractionService,android.os.Bundle,int)>"
  },
  {
    "helperCls": "android.app.UiAutomation",
    "implCls": "android.app.IUiAutomationConnection",
    "inf": "android.app.IUiAutomationConnection",
    "mtd": "<android.app.IUiAutomationConnection: void grantRuntimePermission(java.lang.String,java.lang.String,int)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: boolean isStreamMute(int)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGatt",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void beginReliableWrite(int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.app.UiAutomationConnection",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: void thawRotation()>"
  },
  {
    "helperCls": "android.media.session.MediaSessionManager",
    "implCls": "com.android.server.media.MediaSessionService$SessionManagerImpl",
    "inf": "android.media.session.ISessionManager",
    "mtd": "<android.media.session.ISessionManager: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub",
    "inf": "android.view.autofill.IAutoFillManager",
    "mtd": "<android.view.autofill.IAutoFillManager: int addClient(android.view.autofill.IAutoFillManagerClient,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "inf": "com.android.internal.app.IVoiceInteractionManagerService",
    "mtd": "<com.android.internal.app.IVoiceInteractionManagerService: int getDisabledShowContext()>"
  },
  {
    "helperCls": "android.view.autofill.AutofillManager",
    "implCls": "android.view.autofill.IAutoFillManagerClient",
    "inf": "android.view.autofill.IAutoFillManagerClient",
    "mtd": "<android.view.autofill.IAutoFillManagerClient: void setState(int)>"
  },
  {
    "helperCls": "android.accounts.AccountManager",
    "implCls": "com.android.server.accounts.AccountManagerService",
    "inf": "android.accounts.IAccountManager",
    "mtd": "<android.accounts.IAccountManager: boolean someUserHasAccount(android.accounts.Account)>"
  },
  {
    "helperCls": "android.media.browse.MediaBrowser",
    "implCls": "android.service.media.IMediaBrowserService",
    "inf": "android.service.media.IMediaBrowserService",
    "mtd": "<android.service.media.IMediaBrowserService: void addSubscriptionDeprecated(java.lang.String,android.service.media.IMediaBrowserServiceCallbacks)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dp",
    "implCls": "android.bluetooth.IBluetoothA2dp",
    "inf": "android.bluetooth.IBluetoothA2dp",
    "mtd": "<android.bluetooth.IBluetoothA2dp: void setOptionalCodecsEnabled(android.bluetooth.BluetoothDevice,int)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int exist(java.lang.String,int)>"
  },
  {
    "helperCls": "android.app.usage.NetworkStats",
    "implCls": "android.net.INetworkStatsSession",
    "inf": "android.net.INetworkStatsSession",
    "mtd": "<android.net.INetworkStatsSession: android.net.NetworkStatsHistory getHistoryIntervalForUid(android.net.NetworkTemplate,int,int,int,int,long,long)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setBluetoothA2dpOn(boolean)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void benchmark(java.lang.String,android.os.IVoldTaskListener)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: java.util.List getProfiles(int,boolean)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>"
  },
  {
    "helperCls": "android.service.voice.AlwaysOnHotwordDetector",
    "implCls": "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "inf": "com.android.internal.app.IVoiceInteractionManagerService",
    "mtd": "<com.android.internal.app.IVoiceInteractionManagerService: int startRecognition(android.service.voice.IVoiceInteractionService,int,java.lang.String,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.server.InputMethodManagerService",
    "inf": "com.android.internal.view.IInputMethodManager",
    "mtd": "<com.android.internal.view.IInputMethodManager: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient,int)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,long,java.lang.String,java.util.List,android.content.ComponentName,int,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.media.session.MediaSession",
    "implCls": "android.media.session.ISession",
    "inf": "android.media.session.ISession",
    "mtd": "<android.media.session.ISession: void setPlaybackToRemote(int,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcTag getNfcTagInterface()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean getBluetoothContactSharingDisabledForUser(int)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.app.ApplicationPackageManager",
    "implCls": "com.android.server.pm.PackageManagerService",
    "inf": "android.content.pm.IPackageManager",
    "mtd": "<android.content.pm.IPackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)>"
  },
  {
    "helperCls": "android.view.WindowManagerGlobal",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>"
  },
  {
    "helperCls": "android.view.accessibility.AccessibilityManager",
    "implCls": "com.android.server.accessibility.AccessibilityManagerService",
    "inf": "android.view.accessibility.IAccessibilityManager",
    "mtd": "<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>"
  },
  {
    "helperCls": "android.app.ActivityView",
    "implCls": "com.android.server.am.ActivityManagerService",
    "inf": "android.app.IActivityManager",
    "mtd": "<android.app.IActivityManager: void unregisterTaskStackListener(android.app.ITaskStackListener)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothGattServer",
    "implCls": "android.bluetooth.IBluetoothGatt",
    "inf": "android.bluetooth.IBluetoothGatt",
    "mtd": "<android.bluetooth.IBluetoothGatt: void serverSetPreferredPhy(int,java.lang.String,int,int,int)>"
  },
  {
    "helperCls": "android.app.WallpaperManager",
    "implCls": "com.android.server.wallpaper.WallpaperManagerService",
    "inf": "android.app.IWallpaperManager",
    "mtd": "<android.app.IWallpaperManager: java.lang.String getName()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: java.util.List getOverrideApns(android.content.ComponentName)>"
  },
  {
    "helperCls": "android.app.KeyguardManager",
    "implCls": "com.android.server.wm.WindowManagerService",
    "inf": "android.view.IWindowManager",
    "mtd": "<android.view.IWindowManager: float getCurrentAnimatorScale()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: void removeNfcUnlockHandler(android.nfc.INfcUnlockHandler)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: android.service.notification.ZenModeConfig getZenModeConfig()>"
  },
  {
    "helperCls": "android.net.sip.SipManager",
    "implCls": "com.android.server.sip.SipService",
    "inf": "android.net.sip.ISipService",
    "mtd": "<android.net.sip.ISipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean removeOverrideApn(android.content.ComponentName,int)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: boolean requestBandwidthUpdate(android.net.Network)>"
  },
  {
    "helperCls": "android.media.AudioManager",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void unregisterAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.media.MediaRouterService",
    "inf": "android.media.IMediaRouterService",
    "mtd": "<android.media.IMediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanManager",
    "implCls": "android.net.lowpan.ILowpanManager",
    "inf": "android.net.lowpan.ILowpanManager",
    "mtd": "<android.net.lowpan.ILowpanManager: void addListener(android.net.lowpan.ILowpanManagerListener)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void removeParticipants(java.lang.String[])>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: void setBluetoothA2dpOn(boolean)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHealth",
    "implCls": "android.bluetooth.IBluetoothHealth",
    "inf": "android.bluetooth.IBluetoothHealth",
    "mtd": "<android.bluetooth.IBluetoothHealth: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)>"
  },
  {
    "helperCls": "android.os.UserManager",
    "implCls": "com.android.server.pm.UserManagerService",
    "inf": "android.os.IUserManager",
    "mtd": "<android.os.IUserManager: boolean isUserUnlockingOrUnlocked(int)>"
  },
  {
    "helperCls": "android.net.wifi.WifiScanner",
    "implCls": "com.android.server.wifi.scanner.WifiScanningServiceImpl",
    "inf": "android.net.wifi.IWifiScanner",
    "mtd": "<android.net.wifi.IWifiScanner: android.os.Messenger getMessenger()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>"
  },
  {
    "helperCls": "android.service.oemlock.OemLockManager",
    "implCls": "android.service.oemlock.IOemLockService",
    "inf": "android.service.oemlock.IOemLockService",
    "mtd": "<android.service.oemlock.IOemLockService: void setOemUnlockAllowedByUser(boolean)>"
  },
  {
    "helperCls": "android.appwidget.AppWidgetHost",
    "implCls": "com.android.server.appwidget.AppWidgetServiceImpl",
    "inf": "com.android.internal.appwidget.IAppWidgetService",
    "mtd": "<com.android.internal.appwidget.IAppWidgetService: void deleteAppWidgetId(java.lang.String,int)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: boolean disable(boolean)>"
  },
  {
    "helperCls": "android.media.MediaRouter",
    "implCls": "com.android.server.audio.AudioService",
    "inf": "android.media.IAudioService",
    "mtd": "<android.media.IAudioService: int getStreamVolume(int)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean getInTouchMode()>"
  },
  {
    "helperCls": "android.os.PowerManager",
    "implCls": "com.android.server.power.PowerManagerService$BinderService",
    "inf": "android.os.IPowerManager",
    "mtd": "<android.os.IPowerManager: void reboot(boolean,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession",
    "implCls": "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "inf": "com.android.internal.app.IVoiceInteractionManagerService",
    "mtd": "<com.android.internal.app.IVoiceInteractionManagerService: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int)>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void format(java.lang.String)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: int getMultipathPreference(android.net.Network)>"
  },
  {
    "helperCls": "android.net.lowpan.LowpanInterface",
    "implCls": "android.net.lowpan.ILowpanInterface",
    "inf": "android.net.lowpan.ILowpanInterface",
    "mtd": "<android.net.lowpan.ILowpanInterface: void addListener(android.net.lowpan.ILowpanInterfaceListener)>"
  },
  {
    "helperCls": "android.printservice.PrintJob",
    "implCls": "android.printservice.IPrintServiceClient",
    "inf": "android.printservice.IPrintServiceClient",
    "mtd": "<android.printservice.IPrintServiceClient: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void appPrivateCommand(java.lang.String,android.os.Bundle)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder)>"
  },
  {
    "helperCls": "android.content.pm.LauncherApps",
    "implCls": "com.android.server.pm.LauncherAppsService$LauncherAppsImpl",
    "inf": "android.content.pm.ILauncherApps",
    "mtd": "<android.content.pm.ILauncherApps: android.os.Bundle getSuspendedPackageLauncherExtras(java.lang.String,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.hardware.location.GeofenceHardwareImpl",
    "implCls": "android.location.IGpsGeofenceHardware",
    "inf": "android.location.IGpsGeofenceHardware",
    "mtd": "<android.location.IGpsGeofenceHardware: boolean pauseHardwareGeofence(int)>"
  },
  {
    "helperCls": "android.service.voice.AlwaysOnHotwordDetector",
    "implCls": "com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub",
    "inf": "com.android.internal.app.IVoiceInteractionManagerService",
    "mtd": "<com.android.internal.app.IVoiceInteractionManagerService: int startRecognition(android.service.voice.IVoiceInteractionService,int,java.lang.String,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)>"
  },
  {
    "helperCls": "android.service.voice.VoiceInteractionSession$Request",
    "implCls": "com.android.internal.app.IVoiceInteractorCallback",
    "inf": "com.android.internal.app.IVoiceInteractorCallback",
    "mtd": "<com.android.internal.app.IVoiceInteractorCallback: void deliverCancel(com.android.internal.app.IVoiceInteractorRequest)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void resume(android.telephony.ims.ImsStreamMediaProfile)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: void setAvoidUnvalidated(android.net.Network)>"
  },
  {
    "helperCls": "android.telephony.mbms.StreamingService",
    "implCls": "android.telephony.mbms.vendor.IMbmsStreamingService",
    "inf": "android.telephony.mbms.vendor.IMbmsStreamingService",
    "mtd": "<android.telephony.mbms.vendor.IMbmsStreamingService: android.net.Uri getPlaybackUri(int,java.lang.String)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: int startOperation(android.os.IBinder,int,int,java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.view.inputmethod.InputMethodManager",
    "implCls": "com.android.internal.view.IInputMethodSession",
    "inf": "com.android.internal.view.IInputMethodSession",
    "mtd": "<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>"
  },
  {
    "helperCls": "android.content.pm.CrossProfileApps",
    "implCls": "com.android.server.pm.CrossProfileAppsServiceImpl",
    "inf": "android.content.pm.ICrossProfileApps",
    "mtd": "<android.content.pm.ICrossProfileApps: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.ComponentName,android.os.UserHandle)>"
  },
  {
    "helperCls": "android.bluetooth.le.BluetoothLeAdvertiser",
    "implCls": "com.android.server.BluetoothManagerService",
    "inf": "android.bluetooth.IBluetoothManager",
    "mtd": "<android.bluetooth.IBluetoothManager: int getState()>"
  },
  {
    "helperCls": "android.net.ip.IpClient",
    "implCls": "com.android.server.NetworkManagementService",
    "inf": "android.os.INetworkManagementService",
    "mtd": "<android.os.INetworkManagementService: void clearInterfaceAddresses(java.lang.String)>"
  },
  {
    "helperCls": "android.media.session.MediaController",
    "implCls": "android.media.session.ISessionController",
    "inf": "android.media.session.ISessionController",
    "mtd": "<android.media.session.ISessionController: java.lang.String getPackageName()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.location.LocationManager",
    "implCls": "com.android.server.LocationManagerService",
    "inf": "android.location.ILocationManager",
    "mtd": "<android.location.ILocationManager: boolean stopGnssBatch()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothA2dpSink",
    "implCls": "android.bluetooth.IBluetoothA2dpSink",
    "inf": "android.bluetooth.IBluetoothA2dpSink",
    "mtd": "<android.bluetooth.IBluetoothA2dpSink: int getConnectionState(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: void deleteNotificationChannel(java.lang.String,java.lang.String)>"
  },
  {
    "helperCls": "android.app.SearchManager",
    "implCls": "com.android.server.search.SearchManagerService",
    "inf": "android.app.ISearchManager",
    "mtd": "<android.app.ISearchManager: android.content.ComponentName getGlobalSearchActivity()>"
  },
  {
    "helperCls": "android.os.storage.StorageManager",
    "implCls": "com.android.server.StorageManagerService",
    "inf": "android.os.storage.IStorageManager",
    "mtd": "<android.os.storage.IStorageManager: void createUserKey(int,int,boolean)>"
  },
  {
    "helperCls": "android.nfc.NfcAdapter",
    "implCls": "android.nfc.INfcAdapter",
    "inf": "android.nfc.INfcAdapter",
    "mtd": "<android.nfc.INfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManagerGlobal",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: void registerCallback(android.hardware.display.IDisplayManagerCallback)>"
  },
  {
    "helperCls": "android.telecom.InCallAdapter",
    "implCls": "com.android.internal.telecom.IInCallAdapter",
    "inf": "com.android.internal.telecom.IInCallAdapter",
    "mtd": "<com.android.internal.telecom.IInCallAdapter: void putExtras(java.lang.String,android.os.Bundle)>"
  },
  {
    "helperCls": "android.hardware.display.DisplayManager",
    "implCls": "com.android.server.display.DisplayManagerService$BinderService",
    "inf": "android.hardware.display.IDisplayManager",
    "mtd": "<android.hardware.display.IDisplayManager: android.hardware.display.BrightnessConfiguration getBrightnessConfigurationForUser(int)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>"
  },
  {
    "helperCls": "android.service.wallpaper.WallpaperService$Engine",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: void wallpaperOffsetsComplete(android.os.IBinder)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: boolean isActiveNetworkMetered()>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName,int,boolean)>"
  },
  {
    "helperCls": "android.net.wifi.WifiManager",
    "implCls": "com.android.server.wifi.WifiServiceImpl",
    "inf": "android.net.wifi.IWifiManager",
    "mtd": "<android.net.wifi.IWifiManager: int getSupportedFeatures()>"
  },
  {
    "helperCls": "android.app.slice.SliceManager",
    "implCls": "com.android.server.slice.SliceManagerService",
    "inf": "android.app.slice.ISliceManager",
    "mtd": "<android.app.slice.ISliceManager: boolean hasSliceAccess(java.lang.String)>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothAdapter",
    "implCls": "android.bluetooth.IBluetooth",
    "inf": "android.bluetooth.IBluetooth",
    "mtd": "<android.bluetooth.IBluetooth: android.bluetooth.IBluetoothSocketManager getSocketManager()>"
  },
  {
    "helperCls": "android.view.textservice.TextServicesManager",
    "implCls": "com.android.server.TextServicesManagerService",
    "inf": "com.android.internal.textservice.ITextServicesManager",
    "mtd": "<com.android.internal.textservice.ITextServicesManager: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(java.lang.String,boolean)>"
  },
  {
    "helperCls": "android.telephony.ims.ImsCallSession",
    "implCls": "com.android.ims.internal.IImsCallSession",
    "inf": "com.android.ims.internal.IImsCallSession",
    "mtd": "<com.android.ims.internal.IImsCallSession: void accept(int,android.telephony.ims.ImsStreamMediaProfile)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: void reportNetworkConnectivity(android.net.Network,boolean)>"
  },
  {
    "helperCls": "android.app.admin.DevicePolicyManager",
    "implCls": "com.android.server.devicepolicy.BaseIDevicePolicyManager",
    "inf": "android.app.admin.IDevicePolicyManager",
    "mtd": "<android.app.admin.IDevicePolicyManager: boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName,java.lang.String,int)>"
  },
  {
    "helperCls": "android.accessibilityservice.AccessibilityButtonController",
    "implCls": "android.accessibilityservice.IAccessibilityServiceConnection",
    "inf": "android.accessibilityservice.IAccessibilityServiceConnection",
    "mtd": "<android.accessibilityservice.IAccessibilityServiceConnection: boolean isAccessibilityButtonAvailable()>"
  },
  {
    "helperCls": "android.app.NotificationManager",
    "implCls": "android.app.INotificationManager",
    "inf": "android.app.INotificationManager",
    "mtd": "<android.app.INotificationManager: java.util.List getZenRules()>"
  },
  {
    "helperCls": "android.bluetooth.BluetoothHeadsetClient",
    "implCls": "android.bluetooth.IBluetoothHeadsetClient",
    "inf": "android.bluetooth.IBluetoothHeadsetClient",
    "mtd": "<android.bluetooth.IBluetoothHeadsetClient: android.os.Bundle getCurrentAgEvents(android.bluetooth.BluetoothDevice)>"
  },
  {
    "helperCls": "android.view.ViewRootImpl",
    "implCls": "android.view.IWindowSession",
    "inf": "android.view.IWindowSession",
    "mtd": "<android.view.IWindowSession: boolean outOfMemory(android.view.IWindow)>"
  },
  {
    "helperCls": "android.service.trust.TrustAgentService",
    "implCls": "android.service.trust.ITrustAgentServiceCallback",
    "inf": "android.service.trust.ITrustAgentServiceCallback",
    "mtd": "<android.service.trust.ITrustAgentServiceCallback: void setManagingTrust(boolean)>"
  },
  {
    "helperCls": "android.security.KeyStore",
    "implCls": "android.security.IKeystoreService",
    "inf": "android.security.IKeystoreService",
    "mtd": "<android.security.IKeystoreService: int getState(int)>"
  },
  {
    "helperCls": "android.print.PrinterDiscoverySession",
    "implCls": "com.android.server.print.PrintManagerService$PrintManagerImpl",
    "inf": "android.print.IPrintManager",
    "mtd": "<android.print.IPrintManager: void destroyPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>"
  },
  {
    "helperCls": "android.app.AppOpsManager",
    "implCls": "com.android.server.AppOpsService",
    "inf": "com.android.internal.app.IAppOpsService",
    "mtd": "<com.android.internal.app.IAppOpsService: android.os.IBinder getToken(android.os.IBinder)>"
  },
  {
    "helperCls": "android.net.ConnectivityManager",
    "implCls": "com.android.server.ConnectivityService",
    "inf": "android.net.IConnectivityManager",
    "mtd": "<android.net.IConnectivityManager: int checkMobileProvisioning(int)>"
  }
]