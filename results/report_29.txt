Fake Identify(163)
	<android.app.admin.IDevicePolicyManager: boolean setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int)>
	<android.app.admin.IDevicePolicyManager: java.util.List getKeepUninstalledPackages(android.content.ComponentName,java.lang.String)>
	<android.app.INotificationManager: android.app.NotificationManager$Policy getNotificationPolicy(java.lang.String)>
	<android.media.IAudioService: boolean isValidRingerMode(int)>
	<com.android.internal.app.IAppOpsService: int noteProxyOperation(int,java.lang.String,int,java.lang.String)>
	<com.android.internal.telecom.ITelecomService: java.util.List getPhoneAccountsSupportingScheme(java.lang.String,java.lang.String)>
	<android.content.pm.IShortcutService: android.content.Intent createShortcutResultIntent(java.lang.String,android.content.pm.ShortcutInfo,int)>
	<android.app.admin.IDevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)>
	<com.android.internal.telecom.ITelecomService: boolean isVoiceMailNumber(android.telecom.PhoneAccountHandle,java.lang.String,java.lang.String)>
	<android.app.admin.IDevicePolicyManager: java.util.List getActiveAdmins(int)>
	<android.content.pm.ILauncherApps: boolean isActivityEnabled(java.lang.String,android.content.ComponentName,android.os.UserHandle)>
	<android.content.pm.IShortcutService: int getMaxShortcutCountPerActivity(java.lang.String,int)>
	<android.app.INotificationManager: void deleteNotificationChannelGroup(java.lang.String,java.lang.String)>
	<com.android.internal.telephony.euicc.IEuiccController: void getDownloadableSubscriptionMetadata(android.telephony.euicc.DownloadableSubscription,java.lang.String,android.app.PendingIntent)>
	<android.content.pm.IShortcutService: boolean updateShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>
	<android.app.admin.IDevicePolicyManager: int getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String)>
	<android.content.pm.ILauncherApps: void showAppDetailsAsUser(java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
	<android.app.INotificationManager: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
	<android.nfc.INfcCardEmulation: boolean setDefaultServiceForCategory(int,android.content.ComponentName,java.lang.String)>
	<android.app.admin.IDevicePolicyManager: void setApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String,android.os.Bundle)>
	<android.nfc.INfcFCardEmulation: java.lang.String getSystemCodeForService(int,android.content.ComponentName)>
	<android.app.admin.IDevicePolicyManager: android.os.Bundle getApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String)>
	<com.android.internal.telephony.euicc.IEuiccController: void getDefaultDownloadableSubscriptionList(java.lang.String,android.app.PendingIntent)>
	<android.app.admin.IDevicePolicyManager: int getStorageEncryptionStatus(java.lang.String,int)>
	<android.app.trust.ITrustManager: boolean isDeviceLocked(int)>
	<com.android.internal.telecom.ITelecomService: void clearAccounts(java.lang.String)>
	<android.app.usage.IUsageStatsManager: boolean isAppInactive(java.lang.String,int)>
	<android.app.usage.IStorageStatsManager: long getTotalBytes(java.lang.String,java.lang.String)>
	<android.nfc.INfcCardEmulation: boolean setDefaultForNextTap(int,android.content.ComponentName)>
	<android.nfc.INfcFCardEmulation: boolean registerSystemCodeForService(int,android.content.ComponentName,java.lang.String)>
	<android.media.session.ISessionController: void setVolumeTo(int,int,java.lang.String)>
	<android.app.admin.IDevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>
	<com.android.internal.telecom.ITelecomService: java.util.List getCallCapablePhoneAccounts(boolean,java.lang.String)>
	<com.android.internal.telecom.ITelecomService: void cancelMissedCallsNotification(java.lang.String)>
	<android.content.pm.IPackageManager: boolean canRequestPackageInstalls(java.lang.String,int)>
	<android.hardware.display.IDisplayManager: android.view.DisplayInfo getDisplayInfo(int)>
	<android.app.INotificationManager: boolean areNotificationsEnabled(java.lang.String)>
	<android.nfc.INfcCardEmulation: boolean registerAidGroupForService(int,android.content.ComponentName,android.nfc.cardemulation.AidGroup)>
	<com.android.internal.telecom.ITelecomService: boolean handlePinMmiForPhoneAccount(android.telecom.PhoneAccountHandle,java.lang.String,java.lang.String)>
	<android.app.admin.IDevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>
	<android.app.INotificationManager: int getPackageImportance(java.lang.String)>
	<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName,int,boolean)>
	<android.app.INotificationManager: void enqueueToast(java.lang.String,android.app.ITransientNotification,int)>
	<android.app.admin.IDevicePolicyManager: int getPasswordQuality(android.content.ComponentName,int,boolean)>
	<android.nfc.INfcCardEmulation: boolean isDefaultServiceForAid(int,android.content.ComponentName,java.lang.String)>
	<android.nfc.INfcCardEmulation: java.util.List getServices(int,java.lang.String)>
	<com.android.internal.telecom.ITelecomService: void showInCallScreen(boolean,java.lang.String)>
	<android.nfc.INfcAdapter: android.nfc.INfcDta getNfcDtaInterface(java.lang.String)>
	<android.content.pm.ILauncherApps: android.content.pm.ParceledListSlice getLauncherActivities(java.lang.String,java.lang.String,android.os.UserHandle)>
	<android.app.admin.IDevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>
	<android.app.admin.IDevicePolicyManager: long getPasswordExpiration(android.content.ComponentName,int,boolean)>
	<android.content.pm.IPackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,java.lang.String,int)>
	<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName,int,boolean)>
	<android.media.IMediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>
	<android.app.IWallpaperManager: boolean isWallpaperSupported(java.lang.String)>
	<com.android.internal.telecom.ITelecomService: void acceptRingingCallWithVideoState(java.lang.String,int)>
	<android.content.pm.IShortcutService: void enableShortcuts(java.lang.String,java.util.List,int)>
	<android.app.admin.IDevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName,int)>
	<android.content.pm.ILauncherApps: android.content.pm.ActivityInfo resolveActivity(java.lang.String,android.content.ComponentName,android.os.UserHandle)>
	<android.app.admin.IDevicePolicyManager: boolean isCallerApplicationRestrictionsManagingPackage(java.lang.String)>
	<com.android.internal.telecom.ITelecomService: boolean handlePinMmi(java.lang.String,java.lang.String)>
	<android.content.pm.IPackageManager: java.lang.String[] getPackagesForUid(int)>
	<android.media.session.ISessionController: void adjustVolume(int,int,java.lang.String)>
	<com.android.internal.telecom.ITelecomService: boolean isTtySupported(java.lang.String)>
	<com.android.internal.telephony.euicc.IEuiccController: void deleteSubscription(int,java.lang.String,android.app.PendingIntent)>
	<android.security.IKeystoreService: int lock(int)>
	<android.printservice.IPrintServiceClient: void setStatusRes(android.print.PrintJobId,int,java.lang.CharSequence)>
	<android.app.INotificationManager: void deleteNotificationChannel(java.lang.String,java.lang.String)>
	<android.accounts.IAccountManager: android.accounts.Account[] getAccounts(java.lang.String,java.lang.String)>
	<android.content.pm.IShortcutService: android.content.pm.ParceledListSlice getPinnedShortcuts(java.lang.String,int)>
	<android.nfc.INfcCardEmulation: boolean removeAidGroupForService(int,android.content.ComponentName,java.lang.String)>
	<android.app.INotificationManager: void setInterruptionFilter(java.lang.String,int)>
	<android.content.IRestrictionsManager: android.os.Bundle getApplicationRestrictions(java.lang.String)>
	<com.android.internal.app.IVoiceInteractor: boolean[] supportsCommands(java.lang.String,java.lang.String[])>
	<android.nfc.INfcFCardEmulation: boolean removeSystemCodeForService(int,android.content.ComponentName)>
	<android.media.IAudioService: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>
	<com.android.internal.telecom.ITelecomService: java.util.List getPhoneAccountsForPackage(java.lang.String)>
	<android.content.pm.ILauncherApps: android.content.pm.ParceledListSlice getShortcutConfigActivities(java.lang.String,java.lang.String,android.os.UserHandle)>
	<android.nfc.INfcCardEmulation: android.nfc.cardemulation.AidGroup getAidGroupForService(int,android.content.ComponentName,java.lang.String)>
	<android.security.IKeystoreService: int getState(int)>
	<android.content.pm.IShortcutService: long getRateLimitResetTime(java.lang.String,int)>
	<android.app.admin.IDevicePolicyManager: int getKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)>
	<com.android.internal.telecom.ITelecomService: void silenceRinger(java.lang.String)>
	<com.android.internal.telecom.ITelecomService: int getCurrentTtyMode(java.lang.String)>
	<android.app.INotificationManager: void createNotificationChannels(java.lang.String,android.content.pm.ParceledListSlice)>
	<android.hardware.display.IDisplayManager: int createVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int,java.lang.String)>
	<android.app.admin.IDevicePolicyManager: long getPasswordExpirationTimeout(android.content.ComponentName,int,boolean)>
	<com.android.internal.telecom.ITelecomService: boolean isRinging(java.lang.String)>
	<android.app.INotificationManager: void cancelNotificationWithTag(java.lang.String,java.lang.String,int,int)>
	<android.content.pm.IShortcutService: android.content.pm.ParceledListSlice getManifestShortcuts(java.lang.String,int)>
	<com.android.internal.telecom.ITelecomService: java.util.List getSelfManagedPhoneAccounts(java.lang.String)>
	<android.app.admin.IDevicePolicyManager: int getCurrentFailedPasswordAttempts(int,boolean)>
	<android.content.pm.IShortcutService: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>
	<android.content.pm.ILauncherApps: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,java.lang.String,int,android.os.UserHandle)>
	<android.content.pm.ILauncherApps: void startActivityAsUser(java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
	<android.app.IWallpaperManager: android.app.WallpaperInfo getWallpaperInfo(int)>
	<android.app.admin.IDevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName,int,boolean)>
	<android.content.pm.IShortcutService: android.content.pm.ParceledListSlice getDynamicShortcuts(java.lang.String,int)>
	<android.app.admin.IDevicePolicyManager: boolean isAdminActive(android.content.ComponentName,int)>
	<android.app.admin.IDevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName,int,boolean)>
	<android.view.IWindowSession: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.InputChannel)>
	<android.media.IAudioService: int getStreamVolume(int)>
	<com.android.internal.telecom.ITelecomService: boolean isInManagedCall(java.lang.String)>
	<android.nfc.INfcFCardEmulation: java.util.List getNfcFServices(int)>
	<android.content.pm.IShortcutService: void removeAllDynamicShortcuts(java.lang.String,int)>
	<com.android.internal.telecom.ITelecomService: void acceptRingingCall(java.lang.String)>
	<android.media.IAudioService: void setRingerModeExternal(int,java.lang.String)>
	<android.app.INotificationManager: android.content.pm.ParceledListSlice getNotificationChannels(java.lang.String)>
	<android.app.IWallpaperManager: boolean isSetWallpaperAllowed(java.lang.String)>
	<android.app.INotificationManager: android.content.pm.ParceledListSlice getNotificationChannelGroups(java.lang.String)>
	<android.net.INetworkStatsService: android.net.INetworkStatsSession openSessionForUsageStats(int,java.lang.String)>
	<android.app.admin.IDevicePolicyManager: boolean hasGrantedPolicy(android.content.ComponentName,int,int)>
	<android.app.admin.IDevicePolicyManager: android.content.ComponentName getGlobalProxyAdmin(int)>
	<android.app.admin.IDevicePolicyManager: boolean installKeyPair(android.content.ComponentName,java.lang.String,byte[],byte[],byte[],java.lang.String,boolean)>
	<android.nfc.INfcFCardEmulation: boolean setNfcid2ForService(int,android.content.ComponentName,java.lang.String)>
	<android.content.pm.ILauncherApps: boolean isPackageEnabled(java.lang.String,java.lang.String,android.os.UserHandle)>
	<com.android.internal.telephony.euicc.IEuiccController: void downloadSubscription(android.telephony.euicc.DownloadableSubscription,boolean,java.lang.String,android.app.PendingIntent)>
	<android.app.admin.IDevicePolicyManager: long getRequiredStrongAuthTimeout(android.content.ComponentName,int,boolean)>
	<android.app.INotificationManager: void createNotificationChannelGroups(java.lang.String,android.content.pm.ParceledListSlice)>
	<android.content.pm.IShortcutService: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>
	<com.android.internal.telecom.ITelecomService: android.telecom.PhoneAccountHandle getDefaultOutgoingPhoneAccount(java.lang.String,java.lang.String)>
	<android.app.admin.IDevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>
	<android.app.admin.IDevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>
	<com.android.internal.telecom.ITelecomService: void placeCall(android.net.Uri,android.os.Bundle,java.lang.String)>
	<android.nfc.INfcAdapter: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface(java.lang.String)>
	<android.app.INotificationManager: android.content.pm.ParceledListSlice getAppActiveNotifications(java.lang.String,int)>
	<android.app.backup.IBackupManager: void dataChanged(java.lang.String)>
	<android.content.pm.IPackageManager: java.util.List getPreviousCodePaths(java.lang.String)>
	<android.content.pm.IShortcutService: boolean setDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>
	<android.app.trust.ITrustManager: boolean isDeviceSecure(int)>
	<com.android.internal.telecom.ITelecomService: boolean isInCall(java.lang.String)>
	<android.content.pm.IShortcutService: void reportShortcutUsed(java.lang.String,java.lang.String,int)>
	<android.view.autofill.IAutoFillManager: boolean isServiceEnabled(int,java.lang.String)>
	<android.media.IAudioService: void setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String,java.lang.String)>
	<android.app.backup.IBackupManager: android.app.backup.IRestoreSession beginRestoreSession(java.lang.String,java.lang.String)>
	<android.security.IKeystoreService: int isEmpty(int)>
	<android.media.IAudioService: int getStreamMaxVolume(int)>
	<android.nfc.INfcFCardEmulation: java.lang.String getNfcid2ForService(int,android.content.ComponentName)>
	<android.app.admin.IDevicePolicyManager: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,int,boolean)>
	<android.app.admin.IDevicePolicyManager: boolean packageHasActiveAdmins(java.lang.String,int)>
	<com.android.internal.telecom.ITelecomService: java.lang.String getLine1Number(android.telecom.PhoneAccountHandle,java.lang.String)>
	<android.app.admin.IDevicePolicyManager: boolean isActivePasswordSufficient(int,boolean)>
	<com.android.internal.telecom.ITelecomService: java.lang.String getVoiceMailNumber(android.telecom.PhoneAccountHandle,java.lang.String)>
	<android.os.storage.IStorageManager: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>
	<android.app.INotificationManager: android.app.NotificationChannel getNotificationChannel(java.lang.String,java.lang.String)>
	<android.app.admin.IDevicePolicyManager: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int)>
	<android.content.pm.IShortcutService: boolean addDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>
	<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.util.MergedConfiguration,android.view.Surface)>
	<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>
	<android.content.pm.IShortcutService: int getIconMaxDimensions(java.lang.String,int)>
	<android.nfc.INfcCardEmulation: boolean isDefaultServiceForCategory(int,android.content.ComponentName,java.lang.String)>
	<android.app.admin.IDevicePolicyManager: android.content.ComponentName getProfileOwner(int)>
	<android.app.admin.IDevicePolicyManager: boolean getStorageEncryption(android.content.ComponentName,int)>
	<android.content.pm.IShortcutService: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>
	<android.app.INotificationManager: void cancelAllNotifications(java.lang.String,int)>
	<com.android.internal.telephony.euicc.IEuiccController: void switchToSubscription(int,java.lang.String,android.app.PendingIntent)>
	<android.content.pm.IShortcutService: int getRemainingCallCount(java.lang.String,int)>
	<android.app.admin.IDevicePolicyManager: boolean isProvisioningAllowed(java.lang.String,java.lang.String)>
	<com.android.internal.telecom.ITelecomService: android.net.Uri getAdnUriForPhoneAccount(android.telecom.PhoneAccountHandle,java.lang.String)>
	<android.media.IMediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>
	<android.app.IAlarmManager: android.app.AlarmManager$AlarmClockInfo getNextAlarmClock(int)>
	<android.app.admin.IDevicePolicyManager: boolean getScreenCaptureDisabled(android.content.ComponentName,int)>
	<android.app.INotificationManager: boolean isNotificationPolicyAccessGranted(java.lang.String)>
IPC Flooding(42)
	<android.nfc.INfcAdapter: void setAppCallback(android.nfc.IAppCallback)>
	<android.hardware.location.IGeofenceHardware: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)>
	<android.net.lowpan.ILowpanInterface: void addListener(android.net.lowpan.ILowpanInterfaceListener)>
	<android.net.sip.ISipSession: void setListener(android.net.sip.ISipSessionListener)>
	<android.media.projection.IMediaProjectionManager: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)>
	<android.bluetooth.IBluetoothManager: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
	<android.hardware.location.IContextHubService: int registerCallback(android.hardware.location.IContextHubCallback)>
	<android.media.midi.IMidiManager: void registerListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>
	<android.service.vr.IVrManager: void registerListener(android.service.vr.IVrStateCallbacks)>
	<android.net.IEthernetManager: void addListener(android.net.IEthernetServiceListener)>
	<android.content.pm.IPackageManager: void addOnPermissionsChangeListener(android.content.pm.IOnPermissionsChangeListener)>
	<android.media.session.ISessionManager: void setOnVolumeKeyLongPressListener(android.media.session.IOnVolumeKeyLongPressListener)>
	<android.print.IPrintManager: void addPrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>
	<android.service.vr.IVrManager: void registerPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>
	<android.media.session.ISessionController: void registerCallbackListener(android.media.session.ISessionControllerCallback)>
	<android.location.ILocationManager: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String)>
	<android.hardware.input.IInputManager: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>
	<android.print.IPrintManager: void addPrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>
	<android.location.ICountryDetector: void addCountryListener(android.location.ICountryListener)>
	<android.content.IClipboard: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String)>
	<android.os.storage.IStorageManager: void registerListener(android.os.storage.IStorageEventListener)>
	<android.hardware.hdmi.IHdmiControlService: void addHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)>
	<android.net.lowpan.ILowpanManager: void addListener(android.net.lowpan.ILowpanManagerListener)>
	<android.content.pm.ILauncherApps: void addOnAppsChangedListener(java.lang.String,android.content.pm.IOnAppsChangedListener)>
	<android.print.IPrintManager: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)>
	<android.media.tv.ITvInputManager: void registerCallback(android.media.tv.ITvInputManagerCallback,int)>
	<android.hardware.fingerprint.IFingerprintService: void addLockoutResetCallback(android.hardware.fingerprint.IFingerprintServiceLockoutResetCallback)>
	<android.os.INetworkManagementService: void registerNetworkActivityListener(android.os.INetworkActivityListener)>
	<android.app.IWallpaperManager: void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int)>
	<android.content.pm.IPackageManager: void registerMoveCallback(android.content.pm.IPackageMoveObserver)>
	<android.media.IAudioService: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)>
	<android.app.IWallpaperManager: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)>
	<android.media.session.ISessionManager: void setCallback(android.media.session.ICallback)>
	<android.media.IAudioService: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)>
	<android.hardware.input.IInputManager: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>
	<android.content.pm.IPackageInstaller: void registerCallback(android.content.pm.IPackageInstallerCallback,int)>
	<android.app.trust.ITrustManager: void registerTrustListener(android.app.trust.ITrustListener)>
	<android.hardware.display.IDisplayManager: void registerCallback(android.hardware.display.IDisplayManagerCallback)>
	<android.net.INetworkPolicyManager: void registerListener(android.net.INetworkPolicyListener)>
	<android.media.session.ISessionManager: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>
	<android.media.session.ISessionManager: void setOnMediaKeyListener(android.media.session.IOnMediaKeyListener)>
	<android.net.sip.ISipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)>
Fake Status(22)
	<android.media.IMediaScannerService: void requestScanFile(java.lang.String,java.lang.String,android.media.IMediaScannerListener)>
	<com.android.internal.app.IVoiceInteractionManagerService: void showSession(android.service.voice.IVoiceInteractionService,android.os.Bundle,int)>
	<android.service.trust.ITrustAgentServiceCallback: void addEscrowToken(byte[],int)>
	<android.media.tv.ITvInputManager: void createOverlayView(android.os.IBinder,android.os.IBinder,android.graphics.Rect,int)>
	<android.print.IPrintManager: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>
	<android.view.accessibility.IAccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>
	<android.nfc.INfcTag: android.nfc.Tag rediscover(int)>
	<android.bluetooth.IBluetooth: java.lang.String getAddress()>
	<com.android.internal.app.IVoiceInteractionManagerService: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int)>
	<com.android.internal.app.IVoiceInteractionManagerService: boolean hideSessionFromSession(android.os.IBinder)>
	<android.view.accessibility.IAccessibilityManager: void interrupt(int)>
	<android.view.IWindowId: void registerFocusObserver(android.view.IWindowFocusObserver)>
	<android.service.trust.ITrustAgentServiceCallback: void grantTrust(java.lang.CharSequence,long,int)>
	<com.android.internal.app.IVoiceInteractionManagerService: void finish(android.os.IBinder)>
	<android.service.trust.ITrustAgentServiceCallback: void isEscrowTokenActive(long,int)>
	<android.service.trust.ITrustAgentServiceCallback: void removeEscrowToken(long,int)>
	<android.nfc.INfcAdapter: void setForegroundDispatch(android.app.PendingIntent,android.content.IntentFilter[],android.nfc.TechListParcel)>
	<android.app.IUiAutomationConnection: void disconnect()>
	<android.service.trust.ITrustAgentServiceCallback: void unlockUserWithToken(long,byte[],int)>
	<android.telephony.mbms.vendor.IMbmsStreamingService: android.net.Uri getPlaybackUri(int,java.lang.String)>
	<android.view.IWindowId: void unregisterFocusObserver(android.view.IWindowFocusObserver)>
	<android.telephony.mbms.vendor.IMbmsStreamingService: void stopStreaming(int,java.lang.String)>
Illegal Parameter(21)
	<android.location.ILocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
	<android.bluetooth.IBluetoothHeadset: boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)>
	<android.media.IAudioService: int setFocusPropertiesForPolicy(int,android.media.audiopolicy.IAudioPolicyCallback)>
	<android.net.wifi.IWifiManager: void disableEphemeralNetwork(java.lang.String)>
	<android.bluetooth.IBluetoothHealth: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)>
	<android.bluetooth.IBluetooth: boolean createBond(android.bluetooth.BluetoothDevice,int)>
	<android.location.ILocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
	<android.location.ILocationManager: boolean isProviderEnabled(java.lang.String)>
	<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>
	<android.accounts.IAccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>
	<android.media.session.ISession: void setPlaybackToLocal(android.media.AudioAttributes)>
	<android.view.accessibility.IAccessibilityManager: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int)>
	<android.net.IIpSecService: android.net.IpSecSpiResponse reserveSecurityParameterIndex(int,java.lang.String,int,android.os.IBinder)>
	<android.media.tv.ITvInputManager: void selectTrack(android.os.IBinder,int,java.lang.String,int)>
	<android.net.IIpSecService: android.net.IpSecUdpEncapResponse openUdpEncapsulationSocket(int,android.os.IBinder)>
	<android.bluetooth.IBluetoothGatt: void connectionParameterUpdate(int,java.lang.String,int)>
	<android.media.session.ISessionController: boolean sendMediaButton(android.view.KeyEvent)>
	<android.location.ILocationManager: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)>
	<android.app.INotificationManager: void setNotificationPolicy(java.lang.String,android.app.NotificationManager$Policy)>
	<android.location.ILocationManager: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>
	<android.media.midi.IMidiDeviceServer: int connectPorts(android.os.IBinder,java.io.FileDescriptor,int)>
System Environment Evaluation(11)
	<android.media.IMediaRouterService: void unregisterClient(android.media.IMediaRouterClient)>
	<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>
	<android.service.wallpaper.IWallpaperConnection: void engineShown(android.service.wallpaper.IWallpaperEngine)>
	<android.media.IMediaRouterService: android.media.MediaRouterClientState getState(android.media.IMediaRouterClient)>
	<android.net.wifi.IRttManager: android.os.Messenger getMessenger(android.os.IBinder,int[])>
	<android.media.IMediaRouterService: boolean isPlaybackActive(android.media.IMediaRouterClient)>
	<android.hardware.display.IDisplayManager: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>
	<android.media.IAudioService: void setBluetoothA2dpOn(boolean)>
	<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>
	<android.media.IAudioService: android.media.AudioRoutesInfo startWatchingRoutes(android.media.IAudioRoutesObserver)>
	<com.android.internal.app.IAppOpsService: android.os.IBinder getToken(android.os.IBinder)>
